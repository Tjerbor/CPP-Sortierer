
STM32L1xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062b0  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000560  080063f0  080063f0  000073f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006950  08006950  00008074  2**0
                  CONTENTS
  4 .ARM          00000008  08006950  08006950  00007950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006958  08006958  00008074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08006958  08006958  00007958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08006964  08006964  00007964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800696c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000058c  20000078  080069e0  00008078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000604  080069e0  00008604  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021305  00000000  00000000  0000809d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024d7  00000000  00000000  000293a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e8  00000000  00000000  0002b880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001000  00000000  00000000  0002cd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000edff  00000000  00000000  0002dd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010127  00000000  00000000  0003cb67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004f573  00000000  00000000  0004cc8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009c201  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a34  00000000  00000000  0009c244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000c5  00000000  00000000  000a2c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000078 	.word	0x20000078
 800015c:	00000000 	.word	0x00000000
 8000160:	080063d8 	.word	0x080063d8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000007c 	.word	0x2000007c
 800017c:	080063d8 	.word	0x080063d8
 8000180:	0800696c 	.word	0x0800696c
 8000184:	20000000 	.word	0x20000000
 8000188:	20000074 	.word	0x20000074
 800018c:	20000078 	.word	0x20000078
 8000190:	20000604 	.word	0x20000604

08000194 <save_context>:
.type    save_context, %function
.global load_context
.type    load_context, %function

save_context:
    MRS    r0, msp
 8000194:	f3ef 8008 	mrs	r0, MSP
    STMDB  r0!, {r4-r11}
 8000198:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR    msp, r0
 800019c:	f380 8808 	msr	MSP, r0
    BX     lr
 80001a0:	4770      	bx	lr

080001a2 <load_context>:

load_context:
    MSR    msp, r0
 80001a2:	f380 8808 	msr	MSP, r0
//    MRS    r0, msp
    LDMFD  r0!, {r4-r11}
 80001a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR    msp, r0
 80001aa:	f380 8808 	msr	MSP, r0
    BX     lr
 80001ae:	4770      	bx	lr

080001b0 <strlen>:
 80001b0:	4603      	mov	r3, r0
 80001b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001b6:	2a00      	cmp	r2, #0
 80001b8:	d1fb      	bne.n	80001b2 <strlen+0x2>
 80001ba:	1a18      	subs	r0, r3, r0
 80001bc:	3801      	subs	r0, #1
 80001be:	4770      	bx	lr

080001c0 <__aeabi_drsub>:
 80001c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001c4:	e002      	b.n	80001cc <__adddf3>
 80001c6:	bf00      	nop

080001c8 <__aeabi_dsub>:
 80001c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001cc <__adddf3>:
 80001cc:	b530      	push	{r4, r5, lr}
 80001ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001d6:	ea94 0f05 	teq	r4, r5
 80001da:	bf08      	it	eq
 80001dc:	ea90 0f02 	teqeq	r0, r2
 80001e0:	bf1f      	itttt	ne
 80001e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001f2:	f000 80e2 	beq.w	80003ba <__adddf3+0x1ee>
 80001f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001fe:	bfb8      	it	lt
 8000200:	426d      	neglt	r5, r5
 8000202:	dd0c      	ble.n	800021e <__adddf3+0x52>
 8000204:	442c      	add	r4, r5
 8000206:	ea80 0202 	eor.w	r2, r0, r2
 800020a:	ea81 0303 	eor.w	r3, r1, r3
 800020e:	ea82 0000 	eor.w	r0, r2, r0
 8000212:	ea83 0101 	eor.w	r1, r3, r1
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	2d36      	cmp	r5, #54	@ 0x36
 8000220:	bf88      	it	hi
 8000222:	bd30      	pophi	{r4, r5, pc}
 8000224:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000228:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800022c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000230:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000234:	d002      	beq.n	800023c <__adddf3+0x70>
 8000236:	4240      	negs	r0, r0
 8000238:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800023c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000240:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000244:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000248:	d002      	beq.n	8000250 <__adddf3+0x84>
 800024a:	4252      	negs	r2, r2
 800024c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000250:	ea94 0f05 	teq	r4, r5
 8000254:	f000 80a7 	beq.w	80003a6 <__adddf3+0x1da>
 8000258:	f1a4 0401 	sub.w	r4, r4, #1
 800025c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000260:	db0d      	blt.n	800027e <__adddf3+0xb2>
 8000262:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000266:	fa22 f205 	lsr.w	r2, r2, r5
 800026a:	1880      	adds	r0, r0, r2
 800026c:	f141 0100 	adc.w	r1, r1, #0
 8000270:	fa03 f20e 	lsl.w	r2, r3, lr
 8000274:	1880      	adds	r0, r0, r2
 8000276:	fa43 f305 	asr.w	r3, r3, r5
 800027a:	4159      	adcs	r1, r3
 800027c:	e00e      	b.n	800029c <__adddf3+0xd0>
 800027e:	f1a5 0520 	sub.w	r5, r5, #32
 8000282:	f10e 0e20 	add.w	lr, lr, #32
 8000286:	2a01      	cmp	r2, #1
 8000288:	fa03 fc0e 	lsl.w	ip, r3, lr
 800028c:	bf28      	it	cs
 800028e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000292:	fa43 f305 	asr.w	r3, r3, r5
 8000296:	18c0      	adds	r0, r0, r3
 8000298:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800029c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a0:	d507      	bpl.n	80002b2 <__adddf3+0xe6>
 80002a2:	f04f 0e00 	mov.w	lr, #0
 80002a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80002b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002b6:	d31b      	bcc.n	80002f0 <__adddf3+0x124>
 80002b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002bc:	d30c      	bcc.n	80002d8 <__adddf3+0x10c>
 80002be:	0849      	lsrs	r1, r1, #1
 80002c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002c8:	f104 0401 	add.w	r4, r4, #1
 80002cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002d4:	f080 809a 	bcs.w	800040c <__adddf3+0x240>
 80002d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002dc:	bf08      	it	eq
 80002de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002e2:	f150 0000 	adcs.w	r0, r0, #0
 80002e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ea:	ea41 0105 	orr.w	r1, r1, r5
 80002ee:	bd30      	pop	{r4, r5, pc}
 80002f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002f4:	4140      	adcs	r0, r0
 80002f6:	eb41 0101 	adc.w	r1, r1, r1
 80002fa:	3c01      	subs	r4, #1
 80002fc:	bf28      	it	cs
 80002fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000302:	d2e9      	bcs.n	80002d8 <__adddf3+0x10c>
 8000304:	f091 0f00 	teq	r1, #0
 8000308:	bf04      	itt	eq
 800030a:	4601      	moveq	r1, r0
 800030c:	2000      	moveq	r0, #0
 800030e:	fab1 f381 	clz	r3, r1
 8000312:	bf08      	it	eq
 8000314:	3320      	addeq	r3, #32
 8000316:	f1a3 030b 	sub.w	r3, r3, #11
 800031a:	f1b3 0220 	subs.w	r2, r3, #32
 800031e:	da0c      	bge.n	800033a <__adddf3+0x16e>
 8000320:	320c      	adds	r2, #12
 8000322:	dd08      	ble.n	8000336 <__adddf3+0x16a>
 8000324:	f102 0c14 	add.w	ip, r2, #20
 8000328:	f1c2 020c 	rsb	r2, r2, #12
 800032c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000330:	fa21 f102 	lsr.w	r1, r1, r2
 8000334:	e00c      	b.n	8000350 <__adddf3+0x184>
 8000336:	f102 0214 	add.w	r2, r2, #20
 800033a:	bfd8      	it	le
 800033c:	f1c2 0c20 	rsble	ip, r2, #32
 8000340:	fa01 f102 	lsl.w	r1, r1, r2
 8000344:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000348:	bfdc      	itt	le
 800034a:	ea41 010c 	orrle.w	r1, r1, ip
 800034e:	4090      	lslle	r0, r2
 8000350:	1ae4      	subs	r4, r4, r3
 8000352:	bfa2      	ittt	ge
 8000354:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000358:	4329      	orrge	r1, r5
 800035a:	bd30      	popge	{r4, r5, pc}
 800035c:	ea6f 0404 	mvn.w	r4, r4
 8000360:	3c1f      	subs	r4, #31
 8000362:	da1c      	bge.n	800039e <__adddf3+0x1d2>
 8000364:	340c      	adds	r4, #12
 8000366:	dc0e      	bgt.n	8000386 <__adddf3+0x1ba>
 8000368:	f104 0414 	add.w	r4, r4, #20
 800036c:	f1c4 0220 	rsb	r2, r4, #32
 8000370:	fa20 f004 	lsr.w	r0, r0, r4
 8000374:	fa01 f302 	lsl.w	r3, r1, r2
 8000378:	ea40 0003 	orr.w	r0, r0, r3
 800037c:	fa21 f304 	lsr.w	r3, r1, r4
 8000380:	ea45 0103 	orr.w	r1, r5, r3
 8000384:	bd30      	pop	{r4, r5, pc}
 8000386:	f1c4 040c 	rsb	r4, r4, #12
 800038a:	f1c4 0220 	rsb	r2, r4, #32
 800038e:	fa20 f002 	lsr.w	r0, r0, r2
 8000392:	fa01 f304 	lsl.w	r3, r1, r4
 8000396:	ea40 0003 	orr.w	r0, r0, r3
 800039a:	4629      	mov	r1, r5
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	fa21 f004 	lsr.w	r0, r1, r4
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f094 0f00 	teq	r4, #0
 80003aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ae:	bf06      	itte	eq
 80003b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003b4:	3401      	addeq	r4, #1
 80003b6:	3d01      	subne	r5, #1
 80003b8:	e74e      	b.n	8000258 <__adddf3+0x8c>
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf18      	it	ne
 80003c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c4:	d029      	beq.n	800041a <__adddf3+0x24e>
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	d005      	beq.n	80003de <__adddf3+0x212>
 80003d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003d6:	bf04      	itt	eq
 80003d8:	4619      	moveq	r1, r3
 80003da:	4610      	moveq	r0, r2
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	ea91 0f03 	teq	r1, r3
 80003e2:	bf1e      	ittt	ne
 80003e4:	2100      	movne	r1, #0
 80003e6:	2000      	movne	r0, #0
 80003e8:	bd30      	popne	{r4, r5, pc}
 80003ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ee:	d105      	bne.n	80003fc <__adddf3+0x230>
 80003f0:	0040      	lsls	r0, r0, #1
 80003f2:	4149      	adcs	r1, r1
 80003f4:	bf28      	it	cs
 80003f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003fa:	bd30      	pop	{r4, r5, pc}
 80003fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000400:	bf3c      	itt	cc
 8000402:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000406:	bd30      	popcc	{r4, r5, pc}
 8000408:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800040c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000410:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000414:	f04f 0000 	mov.w	r0, #0
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf1a      	itte	ne
 8000420:	4619      	movne	r1, r3
 8000422:	4610      	movne	r0, r2
 8000424:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000428:	bf1c      	itt	ne
 800042a:	460b      	movne	r3, r1
 800042c:	4602      	movne	r2, r0
 800042e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000432:	bf06      	itte	eq
 8000434:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000438:	ea91 0f03 	teqeq	r1, r3
 800043c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	bf00      	nop

08000444 <__aeabi_ui2d>:
 8000444:	f090 0f00 	teq	r0, #0
 8000448:	bf04      	itt	eq
 800044a:	2100      	moveq	r1, #0
 800044c:	4770      	bxeq	lr
 800044e:	b530      	push	{r4, r5, lr}
 8000450:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000454:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000458:	f04f 0500 	mov.w	r5, #0
 800045c:	f04f 0100 	mov.w	r1, #0
 8000460:	e750      	b.n	8000304 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_i2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000478:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800047c:	bf48      	it	mi
 800047e:	4240      	negmi	r0, r0
 8000480:	f04f 0100 	mov.w	r1, #0
 8000484:	e73e      	b.n	8000304 <__adddf3+0x138>
 8000486:	bf00      	nop

08000488 <__aeabi_f2d>:
 8000488:	0042      	lsls	r2, r0, #1
 800048a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800048e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000492:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000496:	bf1f      	itttt	ne
 8000498:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800049c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004a4:	4770      	bxne	lr
 80004a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004aa:	bf08      	it	eq
 80004ac:	4770      	bxeq	lr
 80004ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004b2:	bf04      	itt	eq
 80004b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004c8:	e71c      	b.n	8000304 <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aed8 	beq.w	80002b2 <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6bd      	b.n	80002b2 <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__aeabi_d2uiz>:
 800095c:	004a      	lsls	r2, r1, #1
 800095e:	d211      	bcs.n	8000984 <__aeabi_d2uiz+0x28>
 8000960:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000964:	d211      	bcs.n	800098a <__aeabi_d2uiz+0x2e>
 8000966:	d50d      	bpl.n	8000984 <__aeabi_d2uiz+0x28>
 8000968:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800096c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000970:	d40e      	bmi.n	8000990 <__aeabi_d2uiz+0x34>
 8000972:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000976:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800097a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800097e:	fa23 f002 	lsr.w	r0, r3, r2
 8000982:	4770      	bx	lr
 8000984:	f04f 0000 	mov.w	r0, #0
 8000988:	4770      	bx	lr
 800098a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800098e:	d102      	bne.n	8000996 <__aeabi_d2uiz+0x3a>
 8000990:	f04f 30ff 	mov.w	r0, #4294967295
 8000994:	4770      	bx	lr
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	4770      	bx	lr

0800099c <__aeabi_frsub>:
 800099c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80009a0:	e002      	b.n	80009a8 <__addsf3>
 80009a2:	bf00      	nop

080009a4 <__aeabi_fsub>:
 80009a4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080009a8 <__addsf3>:
 80009a8:	0042      	lsls	r2, r0, #1
 80009aa:	bf1f      	itttt	ne
 80009ac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009b0:	ea92 0f03 	teqne	r2, r3
 80009b4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009b8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009bc:	d06a      	beq.n	8000a94 <__addsf3+0xec>
 80009be:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009c2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009c6:	bfc1      	itttt	gt
 80009c8:	18d2      	addgt	r2, r2, r3
 80009ca:	4041      	eorgt	r1, r0
 80009cc:	4048      	eorgt	r0, r1
 80009ce:	4041      	eorgt	r1, r0
 80009d0:	bfb8      	it	lt
 80009d2:	425b      	neglt	r3, r3
 80009d4:	2b19      	cmp	r3, #25
 80009d6:	bf88      	it	hi
 80009d8:	4770      	bxhi	lr
 80009da:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80009de:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009e2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4240      	negne	r0, r0
 80009ea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009ee:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80009f2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80009f6:	bf18      	it	ne
 80009f8:	4249      	negne	r1, r1
 80009fa:	ea92 0f03 	teq	r2, r3
 80009fe:	d03f      	beq.n	8000a80 <__addsf3+0xd8>
 8000a00:	f1a2 0201 	sub.w	r2, r2, #1
 8000a04:	fa41 fc03 	asr.w	ip, r1, r3
 8000a08:	eb10 000c 	adds.w	r0, r0, ip
 8000a0c:	f1c3 0320 	rsb	r3, r3, #32
 8000a10:	fa01 f103 	lsl.w	r1, r1, r3
 8000a14:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a18:	d502      	bpl.n	8000a20 <__addsf3+0x78>
 8000a1a:	4249      	negs	r1, r1
 8000a1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a20:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a24:	d313      	bcc.n	8000a4e <__addsf3+0xa6>
 8000a26:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a2a:	d306      	bcc.n	8000a3a <__addsf3+0x92>
 8000a2c:	0840      	lsrs	r0, r0, #1
 8000a2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a32:	f102 0201 	add.w	r2, r2, #1
 8000a36:	2afe      	cmp	r2, #254	@ 0xfe
 8000a38:	d251      	bcs.n	8000ade <__addsf3+0x136>
 8000a3a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a42:	bf08      	it	eq
 8000a44:	f020 0001 	biceq.w	r0, r0, #1
 8000a48:	ea40 0003 	orr.w	r0, r0, r3
 8000a4c:	4770      	bx	lr
 8000a4e:	0049      	lsls	r1, r1, #1
 8000a50:	eb40 0000 	adc.w	r0, r0, r0
 8000a54:	3a01      	subs	r2, #1
 8000a56:	bf28      	it	cs
 8000a58:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a5c:	d2ed      	bcs.n	8000a3a <__addsf3+0x92>
 8000a5e:	fab0 fc80 	clz	ip, r0
 8000a62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a66:	ebb2 020c 	subs.w	r2, r2, ip
 8000a6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a6e:	bfaa      	itet	ge
 8000a70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a74:	4252      	neglt	r2, r2
 8000a76:	4318      	orrge	r0, r3
 8000a78:	bfbc      	itt	lt
 8000a7a:	40d0      	lsrlt	r0, r2
 8000a7c:	4318      	orrlt	r0, r3
 8000a7e:	4770      	bx	lr
 8000a80:	f092 0f00 	teq	r2, #0
 8000a84:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a88:	bf06      	itte	eq
 8000a8a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a8e:	3201      	addeq	r2, #1
 8000a90:	3b01      	subne	r3, #1
 8000a92:	e7b5      	b.n	8000a00 <__addsf3+0x58>
 8000a94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a9c:	bf18      	it	ne
 8000a9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa2:	d021      	beq.n	8000ae8 <__addsf3+0x140>
 8000aa4:	ea92 0f03 	teq	r2, r3
 8000aa8:	d004      	beq.n	8000ab4 <__addsf3+0x10c>
 8000aaa:	f092 0f00 	teq	r2, #0
 8000aae:	bf08      	it	eq
 8000ab0:	4608      	moveq	r0, r1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea90 0f01 	teq	r0, r1
 8000ab8:	bf1c      	itt	ne
 8000aba:	2000      	movne	r0, #0
 8000abc:	4770      	bxne	lr
 8000abe:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ac2:	d104      	bne.n	8000ace <__addsf3+0x126>
 8000ac4:	0040      	lsls	r0, r0, #1
 8000ac6:	bf28      	it	cs
 8000ac8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000acc:	4770      	bx	lr
 8000ace:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000ad2:	bf3c      	itt	cc
 8000ad4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ad8:	4770      	bxcc	lr
 8000ada:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ade:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000ae2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae6:	4770      	bx	lr
 8000ae8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000aec:	bf16      	itet	ne
 8000aee:	4608      	movne	r0, r1
 8000af0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000af4:	4601      	movne	r1, r0
 8000af6:	0242      	lsls	r2, r0, #9
 8000af8:	bf06      	itte	eq
 8000afa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000afe:	ea90 0f01 	teqeq	r0, r1
 8000b02:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_ui2f>:
 8000b08:	f04f 0300 	mov.w	r3, #0
 8000b0c:	e004      	b.n	8000b18 <__aeabi_i2f+0x8>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_i2f>:
 8000b10:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b14:	bf48      	it	mi
 8000b16:	4240      	negmi	r0, r0
 8000b18:	ea5f 0c00 	movs.w	ip, r0
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b24:	4601      	mov	r1, r0
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	e01c      	b.n	8000b66 <__aeabi_l2f+0x2a>

08000b2c <__aeabi_ul2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f04f 0300 	mov.w	r3, #0
 8000b38:	e00a      	b.n	8000b50 <__aeabi_l2f+0x14>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_l2f>:
 8000b3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b40:	bf08      	it	eq
 8000b42:	4770      	bxeq	lr
 8000b44:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b48:	d502      	bpl.n	8000b50 <__aeabi_l2f+0x14>
 8000b4a:	4240      	negs	r0, r0
 8000b4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b50:	ea5f 0c01 	movs.w	ip, r1
 8000b54:	bf02      	ittt	eq
 8000b56:	4684      	moveq	ip, r0
 8000b58:	4601      	moveq	r1, r0
 8000b5a:	2000      	moveq	r0, #0
 8000b5c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b60:	bf08      	it	eq
 8000b62:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b66:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b6a:	fabc f28c 	clz	r2, ip
 8000b6e:	3a08      	subs	r2, #8
 8000b70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b74:	db10      	blt.n	8000b98 <__aeabi_l2f+0x5c>
 8000b76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b7a:	4463      	add	r3, ip
 8000b7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b80:	f1c2 0220 	rsb	r2, r2, #32
 8000b84:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b88:	fa20 f202 	lsr.w	r2, r0, r2
 8000b8c:	eb43 0002 	adc.w	r0, r3, r2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f102 0220 	add.w	r2, r2, #32
 8000b9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ba0:	f1c2 0220 	rsb	r2, r2, #32
 8000ba4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ba8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bac:	eb43 0002 	adc.w	r0, r3, r2
 8000bb0:	bf08      	it	eq
 8000bb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_fmul>:
 8000bb8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bc6:	ea92 0f0c 	teqne	r2, ip
 8000bca:	ea93 0f0c 	teqne	r3, ip
 8000bce:	d06f      	beq.n	8000cb0 <__aeabi_fmul+0xf8>
 8000bd0:	441a      	add	r2, r3
 8000bd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bd6:	0240      	lsls	r0, r0, #9
 8000bd8:	bf18      	it	ne
 8000bda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bde:	d01e      	beq.n	8000c1e <__aeabi_fmul+0x66>
 8000be0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000be4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000be8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bec:	fba0 3101 	umull	r3, r1, r0, r1
 8000bf0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000bf4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000bf8:	bf3e      	ittt	cc
 8000bfa:	0049      	lslcc	r1, r1, #1
 8000bfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c00:	005b      	lslcc	r3, r3, #1
 8000c02:	ea40 0001 	orr.w	r0, r0, r1
 8000c06:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000c0a:	2afd      	cmp	r2, #253	@ 0xfd
 8000c0c:	d81d      	bhi.n	8000c4a <__aeabi_fmul+0x92>
 8000c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c16:	bf08      	it	eq
 8000c18:	f020 0001 	biceq.w	r0, r0, #1
 8000c1c:	4770      	bx	lr
 8000c1e:	f090 0f00 	teq	r0, #0
 8000c22:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c26:	bf08      	it	eq
 8000c28:	0249      	lsleq	r1, r1, #9
 8000c2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c32:	3a7f      	subs	r2, #127	@ 0x7f
 8000c34:	bfc2      	ittt	gt
 8000c36:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c3e:	4770      	bxgt	lr
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	dc5d      	bgt.n	8000d08 <__aeabi_fmul+0x150>
 8000c4c:	f112 0f19 	cmn.w	r2, #25
 8000c50:	bfdc      	itt	le
 8000c52:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c56:	4770      	bxle	lr
 8000c58:	f1c2 0200 	rsb	r2, r2, #0
 8000c5c:	0041      	lsls	r1, r0, #1
 8000c5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c62:	f1c2 0220 	rsb	r2, r2, #32
 8000c66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c6e:	f140 0000 	adc.w	r0, r0, #0
 8000c72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c76:	bf08      	it	eq
 8000c78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c7c:	4770      	bx	lr
 8000c7e:	f092 0f00 	teq	r2, #0
 8000c82:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c86:	bf02      	ittt	eq
 8000c88:	0040      	lsleq	r0, r0, #1
 8000c8a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c8e:	3a01      	subeq	r2, #1
 8000c90:	d0f9      	beq.n	8000c86 <__aeabi_fmul+0xce>
 8000c92:	ea40 000c 	orr.w	r0, r0, ip
 8000c96:	f093 0f00 	teq	r3, #0
 8000c9a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c9e:	bf02      	ittt	eq
 8000ca0:	0049      	lsleq	r1, r1, #1
 8000ca2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ca6:	3b01      	subeq	r3, #1
 8000ca8:	d0f9      	beq.n	8000c9e <__aeabi_fmul+0xe6>
 8000caa:	ea41 010c 	orr.w	r1, r1, ip
 8000cae:	e78f      	b.n	8000bd0 <__aeabi_fmul+0x18>
 8000cb0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cb4:	ea92 0f0c 	teq	r2, ip
 8000cb8:	bf18      	it	ne
 8000cba:	ea93 0f0c 	teqne	r3, ip
 8000cbe:	d00a      	beq.n	8000cd6 <__aeabi_fmul+0x11e>
 8000cc0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000cc4:	bf18      	it	ne
 8000cc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000cca:	d1d8      	bne.n	8000c7e <__aeabi_fmul+0xc6>
 8000ccc:	ea80 0001 	eor.w	r0, r0, r1
 8000cd0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cd4:	4770      	bx	lr
 8000cd6:	f090 0f00 	teq	r0, #0
 8000cda:	bf17      	itett	ne
 8000cdc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ce0:	4608      	moveq	r0, r1
 8000ce2:	f091 0f00 	teqne	r1, #0
 8000ce6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000cea:	d014      	beq.n	8000d16 <__aeabi_fmul+0x15e>
 8000cec:	ea92 0f0c 	teq	r2, ip
 8000cf0:	d101      	bne.n	8000cf6 <__aeabi_fmul+0x13e>
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	d10f      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000cf6:	ea93 0f0c 	teq	r3, ip
 8000cfa:	d103      	bne.n	8000d04 <__aeabi_fmul+0x14c>
 8000cfc:	024b      	lsls	r3, r1, #9
 8000cfe:	bf18      	it	ne
 8000d00:	4608      	movne	r0, r1
 8000d02:	d108      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000d04:	ea80 0001 	eor.w	r0, r0, r1
 8000d08:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d14:	4770      	bx	lr
 8000d16:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d1a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d1e:	4770      	bx	lr

08000d20 <__aeabi_fdiv>:
 8000d20:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d28:	bf1e      	ittt	ne
 8000d2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d2e:	ea92 0f0c 	teqne	r2, ip
 8000d32:	ea93 0f0c 	teqne	r3, ip
 8000d36:	d069      	beq.n	8000e0c <__aeabi_fdiv+0xec>
 8000d38:	eba2 0203 	sub.w	r2, r2, r3
 8000d3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d40:	0249      	lsls	r1, r1, #9
 8000d42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d46:	d037      	beq.n	8000db8 <__aeabi_fdiv+0x98>
 8000d48:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d54:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	bf38      	it	cc
 8000d5c:	005b      	lslcc	r3, r3, #1
 8000d5e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d62:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d66:	428b      	cmp	r3, r1
 8000d68:	bf24      	itt	cs
 8000d6a:	1a5b      	subcs	r3, r3, r1
 8000d6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d74:	bf24      	itt	cs
 8000d76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d82:	bf24      	itt	cs
 8000d84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d90:	bf24      	itt	cs
 8000d92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d9a:	011b      	lsls	r3, r3, #4
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000da2:	d1e0      	bne.n	8000d66 <__aeabi_fdiv+0x46>
 8000da4:	2afd      	cmp	r2, #253	@ 0xfd
 8000da6:	f63f af50 	bhi.w	8000c4a <__aeabi_fmul+0x92>
 8000daa:	428b      	cmp	r3, r1
 8000dac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db0:	bf08      	it	eq
 8000db2:	f020 0001 	biceq.w	r0, r0, #1
 8000db6:	4770      	bx	lr
 8000db8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dbc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dc0:	327f      	adds	r2, #127	@ 0x7f
 8000dc2:	bfc2      	ittt	gt
 8000dc4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dcc:	4770      	bxgt	lr
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd2:	f04f 0300 	mov.w	r3, #0
 8000dd6:	3a01      	subs	r2, #1
 8000dd8:	e737      	b.n	8000c4a <__aeabi_fmul+0x92>
 8000dda:	f092 0f00 	teq	r2, #0
 8000dde:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000de2:	bf02      	ittt	eq
 8000de4:	0040      	lsleq	r0, r0, #1
 8000de6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dea:	3a01      	subeq	r2, #1
 8000dec:	d0f9      	beq.n	8000de2 <__aeabi_fdiv+0xc2>
 8000dee:	ea40 000c 	orr.w	r0, r0, ip
 8000df2:	f093 0f00 	teq	r3, #0
 8000df6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dfa:	bf02      	ittt	eq
 8000dfc:	0049      	lsleq	r1, r1, #1
 8000dfe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e02:	3b01      	subeq	r3, #1
 8000e04:	d0f9      	beq.n	8000dfa <__aeabi_fdiv+0xda>
 8000e06:	ea41 010c 	orr.w	r1, r1, ip
 8000e0a:	e795      	b.n	8000d38 <__aeabi_fdiv+0x18>
 8000e0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e10:	ea92 0f0c 	teq	r2, ip
 8000e14:	d108      	bne.n	8000e28 <__aeabi_fdiv+0x108>
 8000e16:	0242      	lsls	r2, r0, #9
 8000e18:	f47f af7d 	bne.w	8000d16 <__aeabi_fmul+0x15e>
 8000e1c:	ea93 0f0c 	teq	r3, ip
 8000e20:	f47f af70 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e776      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e28:	ea93 0f0c 	teq	r3, ip
 8000e2c:	d104      	bne.n	8000e38 <__aeabi_fdiv+0x118>
 8000e2e:	024b      	lsls	r3, r1, #9
 8000e30:	f43f af4c 	beq.w	8000ccc <__aeabi_fmul+0x114>
 8000e34:	4608      	mov	r0, r1
 8000e36:	e76e      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e38:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e3c:	bf18      	it	ne
 8000e3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e42:	d1ca      	bne.n	8000dda <__aeabi_fdiv+0xba>
 8000e44:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e48:	f47f af5c 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e4c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e50:	f47f af3c 	bne.w	8000ccc <__aeabi_fmul+0x114>
 8000e54:	e75f      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e56:	bf00      	nop

08000e58 <__gesf2>:
 8000e58:	f04f 3cff 	mov.w	ip, #4294967295
 8000e5c:	e006      	b.n	8000e6c <__cmpsf2+0x4>
 8000e5e:	bf00      	nop

08000e60 <__lesf2>:
 8000e60:	f04f 0c01 	mov.w	ip, #1
 8000e64:	e002      	b.n	8000e6c <__cmpsf2+0x4>
 8000e66:	bf00      	nop

08000e68 <__cmpsf2>:
 8000e68:	f04f 0c01 	mov.w	ip, #1
 8000e6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e70:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e7c:	bf18      	it	ne
 8000e7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e82:	d011      	beq.n	8000ea8 <__cmpsf2+0x40>
 8000e84:	b001      	add	sp, #4
 8000e86:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e8a:	bf18      	it	ne
 8000e8c:	ea90 0f01 	teqne	r0, r1
 8000e90:	bf58      	it	pl
 8000e92:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e96:	bf88      	it	hi
 8000e98:	17c8      	asrhi	r0, r1, #31
 8000e9a:	bf38      	it	cc
 8000e9c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ea0:	bf18      	it	ne
 8000ea2:	f040 0001 	orrne.w	r0, r0, #1
 8000ea6:	4770      	bx	lr
 8000ea8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eac:	d102      	bne.n	8000eb4 <__cmpsf2+0x4c>
 8000eae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000eb2:	d105      	bne.n	8000ec0 <__cmpsf2+0x58>
 8000eb4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000eb8:	d1e4      	bne.n	8000e84 <__cmpsf2+0x1c>
 8000eba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ebe:	d0e1      	beq.n	8000e84 <__cmpsf2+0x1c>
 8000ec0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <__aeabi_cfrcmple>:
 8000ec8:	4684      	mov	ip, r0
 8000eca:	4608      	mov	r0, r1
 8000ecc:	4661      	mov	r1, ip
 8000ece:	e7ff      	b.n	8000ed0 <__aeabi_cfcmpeq>

08000ed0 <__aeabi_cfcmpeq>:
 8000ed0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ed2:	f7ff ffc9 	bl	8000e68 <__cmpsf2>
 8000ed6:	2800      	cmp	r0, #0
 8000ed8:	bf48      	it	mi
 8000eda:	f110 0f00 	cmnmi.w	r0, #0
 8000ede:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ee0 <__aeabi_fcmpeq>:
 8000ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee4:	f7ff fff4 	bl	8000ed0 <__aeabi_cfcmpeq>
 8000ee8:	bf0c      	ite	eq
 8000eea:	2001      	moveq	r0, #1
 8000eec:	2000      	movne	r0, #0
 8000eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_fcmplt>:
 8000ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef8:	f7ff ffea 	bl	8000ed0 <__aeabi_cfcmpeq>
 8000efc:	bf34      	ite	cc
 8000efe:	2001      	movcc	r0, #1
 8000f00:	2000      	movcs	r0, #0
 8000f02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f06:	bf00      	nop

08000f08 <__aeabi_fcmple>:
 8000f08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f0c:	f7ff ffe0 	bl	8000ed0 <__aeabi_cfcmpeq>
 8000f10:	bf94      	ite	ls
 8000f12:	2001      	movls	r0, #1
 8000f14:	2000      	movhi	r0, #0
 8000f16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1a:	bf00      	nop

08000f1c <__aeabi_fcmpge>:
 8000f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f20:	f7ff ffd2 	bl	8000ec8 <__aeabi_cfrcmple>
 8000f24:	bf94      	ite	ls
 8000f26:	2001      	movls	r0, #1
 8000f28:	2000      	movhi	r0, #0
 8000f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2e:	bf00      	nop

08000f30 <__aeabi_fcmpgt>:
 8000f30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f34:	f7ff ffc8 	bl	8000ec8 <__aeabi_cfrcmple>
 8000f38:	bf34      	ite	cc
 8000f3a:	2001      	movcc	r0, #1
 8000f3c:	2000      	movcs	r0, #0
 8000f3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f42:	bf00      	nop

08000f44 <__aeabi_f2uiz>:
 8000f44:	0042      	lsls	r2, r0, #1
 8000f46:	d20e      	bcs.n	8000f66 <__aeabi_f2uiz+0x22>
 8000f48:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f4c:	d30b      	bcc.n	8000f66 <__aeabi_f2uiz+0x22>
 8000f4e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f56:	d409      	bmi.n	8000f6c <__aeabi_f2uiz+0x28>
 8000f58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f5c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f60:	fa23 f002 	lsr.w	r0, r3, r2
 8000f64:	4770      	bx	lr
 8000f66:	f04f 0000 	mov.w	r0, #0
 8000f6a:	4770      	bx	lr
 8000f6c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f70:	d101      	bne.n	8000f76 <__aeabi_f2uiz+0x32>
 8000f72:	0242      	lsls	r2, r0, #9
 8000f74:	d102      	bne.n	8000f7c <__aeabi_f2uiz+0x38>
 8000f76:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7a:	4770      	bx	lr
 8000f7c:	f04f 0000 	mov.w	r0, #0
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	db0b      	blt.n	8000fae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	f003 021f 	and.w	r2, r3, #31
 8000f9c:	4906      	ldr	r1, [pc, #24]	@ (8000fb8 <__NVIC_EnableIRQ+0x34>)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	095b      	lsrs	r3, r3, #5
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8000faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr
 8000fb8:	e000e100 	.word	0xe000e100

08000fbc <_ZN9EmbSysLib2Hw9SPImaster6Device5startEv>:

        //-----------------------------------------------------------
        /*! \todo comment missing ...
            \todo make virtual, so that SPImaster_Mcu can overload this
        */
        void start()
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
        {
          cs.clr();
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3304      	adds	r3, #4
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f001 ffa9 	bl	8002f20 <_ZN9EmbSysLib2Hw4Port3Pin3clrEv>
        }
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <_ZN9EmbSysLib2Hw9SPImaster6Device4stopEv>:

        //-----------------------------------------------------------
        /*! \todo comment missing ...
            \todo make virtual, so that SPImaster_Mcu can overload this
        */
        void stop()
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
        {
          cs.set();
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f001 ff65 	bl	8002eb2 <_ZN9EmbSysLib2Hw4Port3Pin3setEv>
        }
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <_ZN9EmbSysLib2Hw5Timer4TaskC1Ev>:
    /*!
    \class Task

    \brief Base class for timer interrupt tasks
    */
    class Task : public Std::Sequence<Task>::Item
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3304      	adds	r3, #4
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f002 fd3c 	bl	8003a7c <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE4ItemC1EPS5_>
 8001004:	4a03      	ldr	r2, [pc, #12]	@ (8001014 <_ZN9EmbSysLib2Hw5Timer4TaskC1Ev+0x24>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	080067c0 	.word	0x080067c0

08001018 <_ZN9EmbSysLib3Dev7Digital3setEv>:
    virtual void set( bool value );

    //---------------------------------------------------------------
    /*! Set digital output to logic level 'true'
    */
    virtual void set( void )
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
    {
      set( 1 );
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	3304      	adds	r3, #4
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2101      	movs	r1, #1
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	4798      	blx	r3
    }
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <_ZN9EmbSysLib3Dev7Digital3clrEv>:

    //---------------------------------------------------------------
    /*! Clear digital output to logic level 'false'
    */
    virtual void clr( void )
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
    {
      set( 0 );
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	3304      	adds	r3, #4
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2100      	movs	r1, #0
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	4798      	blx	r3
    }
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <_ZN9EmbSysLib3Dev7Digital6toggleEv>:

    //---------------------------------------------------------------
    /*! Invert digital output
    */
    virtual void toggle( void )
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
    {
      set( !valueOut );
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	3304      	adds	r3, #4
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	7952      	ldrb	r2, [r2, #5]
 8001068:	f082 0201 	eor.w	r2, r2, #1
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	4611      	mov	r1, r2
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	4798      	blx	r3
    }
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <_ZN9EmbSysLib3Dev7Digital8getEventEv>:

    //---------------------------------------------------------------
    /*! Read input state and compare with previous state
        \return Event (NONE, ACTIVATED or RELEASED)
    */
    virtual Event getEvent( void )
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
    {
      bool valueInLast = valueIn;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	791b      	ldrb	r3, [r3, #4]
 8001088:	73fb      	strb	r3, [r7, #15]
      valueIn = get();
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	3314      	adds	r3, #20
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	4798      	blx	r3
 8001096:	4603      	mov	r3, r0
 8001098:	461a      	mov	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	711a      	strb	r2, [r3, #4]
      if( valueIn != valueInLast )
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	791b      	ldrb	r3, [r3, #4]
 80010a2:	7bfa      	ldrb	r2, [r7, #15]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d007      	beq.n	80010b8 <_ZN9EmbSysLib3Dev7Digital8getEventEv+0x3c>
      {
        return( (valueIn)?ACTIVATED:RELEASED );
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	791b      	ldrb	r3, [r3, #4]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <_ZN9EmbSysLib3Dev7Digital8getEventEv+0x38>
 80010b0:	2301      	movs	r3, #1
 80010b2:	e002      	b.n	80010ba <_ZN9EmbSysLib3Dev7Digital8getEventEv+0x3e>
 80010b4:	2302      	movs	r3, #2
 80010b6:	e000      	b.n	80010ba <_ZN9EmbSysLib3Dev7Digital8getEventEv+0x3e>
      }
      return( NONE );
 80010b8:	2300      	movs	r3, #0
    }
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <_ZN9EmbSysLib3Dev7DigitalaSEb>:
    //---------------------------------------------------------------
    /*! Set digital output
        \param value Logic level of digital output
        \return value
    */
    virtual bool operator=( bool value )
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
 80010ca:	460b      	mov	r3, r1
 80010cc:	70fb      	strb	r3, [r7, #3]
    {
      set( value );
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	3304      	adds	r3, #4
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	78fa      	ldrb	r2, [r7, #3]
 80010d8:	4611      	mov	r1, r2
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	4798      	blx	r3
      return( value );
 80010de:	78fb      	ldrb	r3, [r7, #3]
    }
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <_ZN9EmbSysLib3Dev7DigitalaSERS1_>:
    //---------------------------------------------------------------
    /*! Set digital output
        \param x Reference to an Digital object
        \return Logic input level
    */
    virtual bool operator=( Digital &x)
 80010e8:	b590      	push	{r4, r7, lr}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
    {
      set( x.get() );
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	3304      	adds	r3, #4
 80010f8:	681c      	ldr	r4, [r3, #0]
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	3314      	adds	r3, #20
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	6838      	ldr	r0, [r7, #0]
 8001104:	4798      	blx	r3
 8001106:	4603      	mov	r3, r0
 8001108:	4619      	mov	r1, r3
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	47a0      	blx	r4
      return( valueOut );
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	795b      	ldrb	r3, [r3, #5]
    }
 8001112:	4618      	mov	r0, r3
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	bd90      	pop	{r4, r7, pc}

0800111a <_ZN9EmbSysLib3Dev7DigitalcvbEv>:

    //---------------------------------------------------------------
    /*! Get the input state
        \return Digital input state (logic level)
    */
    virtual operator bool( void )
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
    {
      return( get() );
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	3314      	adds	r3, #20
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	4798      	blx	r3
 800112e:	4603      	mov	r3, r0
    }
 8001130:	4618      	mov	r0, r3
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <_ZN9EmbSysLib2Hw6System16disableInterruptEv>:
  enableInterrupt();
}

//-------------------------------------------------------------------
void System::disableInterrupt( void )
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	2301      	movs	r3, #1
 8001140:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f383 8810 	msr	PRIMASK, r3
}
 8001148:	bf00      	nop
  __set_PRIMASK(1); // __disable_irq();
  cntInterrupt++;
 800114a:	4b05      	ldr	r3, [pc, #20]	@ (8001160 <_ZN9EmbSysLib2Hw6System16disableInterruptEv+0x28>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	3301      	adds	r3, #1
 8001150:	b2da      	uxtb	r2, r3
 8001152:	4b03      	ldr	r3, [pc, #12]	@ (8001160 <_ZN9EmbSysLib2Hw6System16disableInterruptEv+0x28>)
 8001154:	701a      	strb	r2, [r3, #0]
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr
 8001160:	20000094 	.word	0x20000094

08001164 <_ZN9EmbSysLib2Hw6System15enableInterruptEv>:

//-------------------------------------------------------------------
void System::enableInterrupt( void )
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
  if( cntInterrupt > 0 )
 800116a:	4b0c      	ldr	r3, [pc, #48]	@ (800119c <_ZN9EmbSysLib2Hw6System15enableInterruptEv+0x38>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d005      	beq.n	800117e <_ZN9EmbSysLib2Hw6System15enableInterruptEv+0x1a>
  {
    cntInterrupt--;
 8001172:	4b0a      	ldr	r3, [pc, #40]	@ (800119c <_ZN9EmbSysLib2Hw6System15enableInterruptEv+0x38>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	3b01      	subs	r3, #1
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4b08      	ldr	r3, [pc, #32]	@ (800119c <_ZN9EmbSysLib2Hw6System15enableInterruptEv+0x38>)
 800117c:	701a      	strb	r2, [r3, #0]
  }
  if( cntInterrupt == 0 )
 800117e:	4b07      	ldr	r3, [pc, #28]	@ (800119c <_ZN9EmbSysLib2Hw6System15enableInterruptEv+0x38>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d105      	bne.n	8001192 <_ZN9EmbSysLib2Hw6System15enableInterruptEv+0x2e>
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f383 8810 	msr	PRIMASK, r3
}
 8001190:	bf00      	nop
  {
     __set_PRIMASK(0); //__enable_irq();
  }
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr
 800119c:	20000094 	.word	0x20000094

080011a0 <_ZN9EmbSysLib2Hw6System14enableWatchdogEt>:

//-------------------------------------------------------------------
void System::enableWatchdog( WORD resetTime )
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	80fb      	strh	r3, [r7, #6]
  DWORD pr  = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
  DWORD rlr = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]

   f_LSI = 40kHz
   RLR: 12 Bit (0,..,4095)
   PR: 0,..6
  ----------------------------------------*/
  rlr = resetTime*10; // 10 = ms*40kHz/4
 80011b2:	88fa      	ldrh	r2, [r7, #6]
 80011b4:	4613      	mov	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	60bb      	str	r3, [r7, #8]
  while( resetTime > 0x0FFF && pr < 6)
 80011be:	e005      	b.n	80011cc <_ZN9EmbSysLib2Hw6System14enableWatchdogEt+0x2c>
  {
    resetTime >>= 2;
 80011c0:	88fb      	ldrh	r3, [r7, #6]
 80011c2:	089b      	lsrs	r3, r3, #2
 80011c4:	80fb      	strh	r3, [r7, #6]
    pr++;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	3301      	adds	r3, #1
 80011ca:	60fb      	str	r3, [r7, #12]
  while( resetTime > 0x0FFF && pr < 6)
 80011cc:	88fb      	ldrh	r3, [r7, #6]
 80011ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80011d2:	d302      	bcc.n	80011da <_ZN9EmbSysLib2Hw6System14enableWatchdogEt+0x3a>
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2b05      	cmp	r3, #5
 80011d8:	d9f2      	bls.n	80011c0 <_ZN9EmbSysLib2Hw6System14enableWatchdogEt+0x20>
  }

  IWDG->KR  = 0x5555;
 80011da:	4b0d      	ldr	r3, [pc, #52]	@ (8001210 <_ZN9EmbSysLib2Hw6System14enableWatchdogEt+0x70>)
 80011dc:	f245 5255 	movw	r2, #21845	@ 0x5555
 80011e0:	601a      	str	r2, [r3, #0]
  IWDG->PR  = pr;
 80011e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001210 <_ZN9EmbSysLib2Hw6System14enableWatchdogEt+0x70>)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	6053      	str	r3, [r2, #4]
  IWDG->KR  = 0x5555;
 80011e8:	4b09      	ldr	r3, [pc, #36]	@ (8001210 <_ZN9EmbSysLib2Hw6System14enableWatchdogEt+0x70>)
 80011ea:	f245 5255 	movw	r2, #21845	@ 0x5555
 80011ee:	601a      	str	r2, [r3, #0]
  IWDG->RLR = rlr;
 80011f0:	4a07      	ldr	r2, [pc, #28]	@ (8001210 <_ZN9EmbSysLib2Hw6System14enableWatchdogEt+0x70>)
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	6093      	str	r3, [r2, #8]
  IWDG->KR  = 0xAAAA;
 80011f6:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <_ZN9EmbSysLib2Hw6System14enableWatchdogEt+0x70>)
 80011f8:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80011fc:	601a      	str	r2, [r3, #0]
  IWDG->KR  = 0xCCCC;
 80011fe:	4b04      	ldr	r3, [pc, #16]	@ (8001210 <_ZN9EmbSysLib2Hw6System14enableWatchdogEt+0x70>)
 8001200:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8001204:	601a      	str	r2, [r3, #0]
}
 8001206:	bf00      	nop
 8001208:	3714      	adds	r7, #20
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr
 8001210:	40003000 	.word	0x40003000

08001214 <_ZN9EmbSysLib2Hw6System5resetEv>:
  IWDG->KR  = 0xAAAA;
}

//-------------------------------------------------------------------
void System::reset( void )
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001218:	b672      	cpsid	i
}
 800121a:	bf00      	nop
  __disable_irq();
  enableWatchdog( 1 );
 800121c:	2001      	movs	r0, #1
 800121e:	f7ff ffbf 	bl	80011a0 <_ZN9EmbSysLib2Hw6System14enableWatchdogEt>

  while(1);
 8001222:	bf00      	nop
 8001224:	e7fd      	b.n	8001222 <_ZN9EmbSysLib2Hw6System5resetEv+0xe>
	...

08001228 <SystemInit>:
//
// SystemInit
//
//*******************************************************************
void SystemInit( void )
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
  // Clock control register
  RCC->CR   |=      RCC_CR_MSION;     // MSI clock enable: MSI oscillator ON
 800122e:	4b53      	ldr	r3, [pc, #332]	@ (800137c <SystemInit+0x154>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a52      	ldr	r2, [pc, #328]	@ (800137c <SystemInit+0x154>)
 8001234:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001238:	6013      	str	r3, [r2, #0]

  // Clock configuration register
  RCC->CFGR &= ~(   RCC_CFGR_MCOPRE   // reset ...
 800123a:	4b50      	ldr	r3, [pc, #320]	@ (800137c <SystemInit+0x154>)
 800123c:	689a      	ldr	r2, [r3, #8]
 800123e:	494f      	ldr	r1, [pc, #316]	@ (800137c <SystemInit+0x154>)
 8001240:	4b4f      	ldr	r3, [pc, #316]	@ (8001380 <SystemInit+0x158>)
 8001242:	4013      	ands	r3, r2
 8001244:	608b      	str	r3, [r1, #8]
                  | RCC_CFGR_PPRE2
                  | RCC_CFGR_HPRE
                  | RCC_CFGR_SW );

  // Clock control register
  RCC->CR   &= ~(   RCC_CR_HSION      // reset ...
 8001246:	4b4d      	ldr	r3, [pc, #308]	@ (800137c <SystemInit+0x154>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a4c      	ldr	r2, [pc, #304]	@ (800137c <SystemInit+0x154>)
 800124c:	f023 5388 	bic.w	r3, r3, #285212672	@ 0x11000000
 8001250:	f023 1301 	bic.w	r3, r3, #65537	@ 0x10001
 8001254:	6013      	str	r3, [r2, #0]
                  | RCC_CR_HSEON
                  | RCC_CR_PLLON
                  | RCC_CR_CSSON );
  RCC->CR   &= ~(   RCC_CR_HSEBYP );  // reset ...
 8001256:	4b49      	ldr	r3, [pc, #292]	@ (800137c <SystemInit+0x154>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a48      	ldr	r2, [pc, #288]	@ (800137c <SystemInit+0x154>)
 800125c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001260:	6013      	str	r3, [r2, #0]

  // Clock configuration register
  RCC->CFGR &= ~(   RCC_CFGR_PLLMUL   // reset ...
 8001262:	4b46      	ldr	r3, [pc, #280]	@ (800137c <SystemInit+0x154>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	4a45      	ldr	r2, [pc, #276]	@ (800137c <SystemInit+0x154>)
 8001268:	f423 037d 	bic.w	r3, r3, #16580608	@ 0xfd0000
 800126c:	6093      	str	r3, [r2, #8]
                  | RCC_CFGR_PLLDIV
                  | RCC_CFGR_PLLSRC );

  // Clock interrupt register
  RCC->CIR   =  0;                    // Disable all interrupts
 800126e:	4b43      	ldr	r3, [pc, #268]	@ (800137c <SystemInit+0x154>)
 8001270:	2200      	movs	r2, #0
 8001272:	60da      	str	r2, [r3, #12]

  // Flash Acess Control Register
  FLASH->ACR |= FLASH_ACR_ACC64;      // 64-bit access: enable
 8001274:	4b43      	ldr	r3, [pc, #268]	@ (8001384 <SystemInit+0x15c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a42      	ldr	r2, [pc, #264]	@ (8001384 <SystemInit+0x15c>)
 800127a:	f043 0304 	orr.w	r3, r3, #4
 800127e:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_ACR_PRFTEN;     // Prefetch: enable
 8001280:	4b40      	ldr	r3, [pc, #256]	@ (8001384 <SystemInit+0x15c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a3f      	ldr	r2, [pc, #252]	@ (8001384 <SystemInit+0x15c>)
 8001286:	f043 0302 	orr.w	r3, r3, #2
 800128a:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_ACR_LATENCY;    // Latency: one wait state
 800128c:	4b3d      	ldr	r3, [pc, #244]	@ (8001384 <SystemInit+0x15c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a3c      	ldr	r2, [pc, #240]	@ (8001384 <SystemInit+0x15c>)
 8001292:	f043 0301 	orr.w	r3, r3, #1
 8001296:	6013      	str	r3, [r2, #0]

  // Advanced Peripheral Bus Enable Register
  RCC->APB1ENR |= RCC_APB1ENR_PWREN;  // Power interface clock: enable
 8001298:	4b38      	ldr	r3, [pc, #224]	@ (800137c <SystemInit+0x154>)
 800129a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800129c:	4a37      	ldr	r2, [pc, #220]	@ (800137c <SystemInit+0x154>)
 800129e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012a2:	6253      	str	r3, [r2, #36]	@ 0x24

  // Power Control Register
  PWR->CR = PWR_CR_VOS_0;             // Voltage scaling range selection: range 1 (1.8 V)
 80012a4:	4b38      	ldr	r3, [pc, #224]	@ (8001388 <SystemInit+0x160>)
 80012a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80012aa:	601a      	str	r2, [r3, #0]
  while( PWR->CSR & PWR_CSR_VOSF )    // Wait until voltage regulator is ready
 80012ac:	e000      	b.n	80012b0 <SystemInit+0x88>
  {
    asm volatile("nop");
 80012ae:	bf00      	nop
  while( PWR->CSR & PWR_CSR_VOSF )    // Wait until voltage regulator is ready
 80012b0:	4b35      	ldr	r3, [pc, #212]	@ (8001388 <SystemInit+0x160>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 0310 	and.w	r3, r3, #16
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	bf14      	ite	ne
 80012bc:	2301      	movne	r3, #1
 80012be:	2300      	moveq	r3, #0
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1f3      	bne.n	80012ae <SystemInit+0x86>
  }

  // Clock Configuration Register
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1;    // AHB prescaler:                   HCLK  = SYSCLK
 80012c6:	4b2d      	ldr	r3, [pc, #180]	@ (800137c <SystemInit+0x154>)
 80012c8:	4a2c      	ldr	r2, [pc, #176]	@ (800137c <SystemInit+0x154>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;   // APB high-speed prescaler (APB2): PCLK2 = HCLK
 80012ce:	4b2b      	ldr	r3, [pc, #172]	@ (800137c <SystemInit+0x154>)
 80012d0:	4a2a      	ldr	r2, [pc, #168]	@ (800137c <SystemInit+0x154>)
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;   // APB low-speed  prescaler (APB1): PCLK1 = HCLK
 80012d6:	4b29      	ldr	r3, [pc, #164]	@ (800137c <SystemInit+0x154>)
 80012d8:	4a28      	ldr	r2, [pc, #160]	@ (800137c <SystemInit+0x154>)
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	6093      	str	r3, [r2, #8]
  #if  OSCSRC == HSE || OSCSRC == HSE_BYPASS

      #if OSCSRC == HSE 
        RCC->CR |= (RCC_CR_HSEON );
      #else
        RCC->CR |= (RCC_CR_HSEON | RCC_CR_HSEBYP);
 80012de:	4b27      	ldr	r3, [pc, #156]	@ (800137c <SystemInit+0x154>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a26      	ldr	r2, [pc, #152]	@ (800137c <SystemInit+0x154>)
 80012e4:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 80012e8:	6013      	str	r3, [r2, #0]
      #endif
      const DWORD pll_Src = RCC_CFGR_PLLSRC_HSE;
 80012ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012ee:	607b      	str	r3, [r7, #4]
      while( !(RCC->CR & RCC_CR_HSERDY) ) // wait for HSE ready
 80012f0:	e000      	b.n	80012f4 <SystemInit+0xcc>
      {
        asm volatile("nop");
 80012f2:	bf00      	nop
      while( !(RCC->CR & RCC_CR_HSERDY) ) // wait for HSE ready
 80012f4:	4b21      	ldr	r3, [pc, #132]	@ (800137c <SystemInit+0x154>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	bf0c      	ite	eq
 8001300:	2301      	moveq	r3, #1
 8001302:	2300      	movne	r3, #0
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f3      	bne.n	80012f2 <SystemInit+0xca>
  #if OSCFREQ == 4000
    const DWORD pll_Mul = RCC_CFGR_PLLMUL24;
  #elif OSCFREQ == 6000
    const DWORD pll_Mul = RCC_CFGR_PLLMUL16;
  #elif OSCFREQ == 8000
    const DWORD pll_Mul = RCC_CFGR_PLLMUL12;
 800130a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800130e:	603b      	str	r3, [r7, #0]
  #else
    #error "OSCFREQ value not supported"
  #endif

  // PLL configuration register
  RCC->CFGR |= ( pll_Src 
 8001310:	4b1a      	ldr	r3, [pc, #104]	@ (800137c <SystemInit+0x154>)
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	4a19      	ldr	r2, [pc, #100]	@ (800137c <SystemInit+0x154>)
 8001316:	f443 0311 	orr.w	r3, r3, #9502720	@ 0x910000
 800131a:	6093      	str	r3, [r2, #8]
               | pll_Mul 
               | RCC_CFGR_PLLDIV3 );

  // Clock control register
  RCC->CR |= RCC_CR_PLLON;            // PLL enable: ON
 800131c:	4b17      	ldr	r3, [pc, #92]	@ (800137c <SystemInit+0x154>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a16      	ldr	r2, [pc, #88]	@ (800137c <SystemInit+0x154>)
 8001322:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001326:	6013      	str	r3, [r2, #0]
  while( !(RCC->CR & RCC_CR_PLLRDY) )// Wait until PLL is ready
 8001328:	e000      	b.n	800132c <SystemInit+0x104>
  {
    asm volatile("nop");
 800132a:	bf00      	nop
  while( !(RCC->CR & RCC_CR_PLLRDY) )// Wait until PLL is ready
 800132c:	4b13      	ldr	r3, [pc, #76]	@ (800137c <SystemInit+0x154>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001334:	2b00      	cmp	r3, #0
 8001336:	bf0c      	ite	eq
 8001338:	2301      	moveq	r3, #1
 800133a:	2300      	movne	r3, #0
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f3      	bne.n	800132a <SystemInit+0x102>
  }

  // Clock Configuration Register
  RCC->CFGR |= RCC_CFGR_SW_PLL;       // System clock switch: PLL used as system clock
 8001342:	4b0e      	ldr	r3, [pc, #56]	@ (800137c <SystemInit+0x154>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	4a0d      	ldr	r2, [pc, #52]	@ (800137c <SystemInit+0x154>)
 8001348:	f043 0303 	orr.w	r3, r3, #3
 800134c:	6093      	str	r3, [r2, #8]

  // Wait for system clock switch is ready
  while( (RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL )
 800134e:	e000      	b.n	8001352 <SystemInit+0x12a>
  {
    asm volatile("nop");
 8001350:	bf00      	nop
  while( (RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL )
 8001352:	4b0a      	ldr	r3, [pc, #40]	@ (800137c <SystemInit+0x154>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 030c 	and.w	r3, r3, #12
 800135a:	2b0c      	cmp	r3, #12
 800135c:	bf14      	ite	ne
 800135e:	2301      	movne	r3, #1
 8001360:	2300      	moveq	r3, #0
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b00      	cmp	r3, #0
 8001366:	d1f3      	bne.n	8001350 <SystemInit+0x128>


  //<<< Enable HSE or clock, set PLL <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

  // System Control Block
  SCB->VTOR = FLASH_BASE | 0x00; // Vector Table Relocation in Internal FLASH
 8001368:	4b08      	ldr	r3, [pc, #32]	@ (800138c <SystemInit+0x164>)
 800136a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800136e:	609a      	str	r2, [r3, #8]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800
 8001380:	88ffc00c 	.word	0x88ffc00c
 8001384:	40023c00 	.word	0x40023c00
 8001388:	40007000 	.word	0x40007000
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <__cxa_pure_virtual>:

//*******************************************************************
extern "C"
{
  void __cxa_pure_virtual( void )
  {
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
    abort();
 8001394:	f004 fae8 	bl	8005968 <abort>

08001398 <_ZN9EmbSysLib2Hw9PinConfig3setEP12GPIO_TypeDefhmh>:
//-------------------------------------------------------------------
Std::Report PinConfig::report( ReportID_Hw::Module::SYSTEM_PIN_CONFIG );

//-------------------------------------------------------------------
void PinConfig::set( GPIO_TypeDef *gpio, BYTE pinId, DWORD mode, BYTE af )
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08e      	sub	sp, #56	@ 0x38
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	607a      	str	r2, [r7, #4]
 80013a2:	461a      	mov	r2, r3
 80013a4:	460b      	mov	r3, r1
 80013a6:	72fb      	strb	r3, [r7, #11]
 80013a8:	4613      	mov	r3, r2
 80013aa:	72bb      	strb	r3, [r7, #10]
  BYTE pin2 = 2*pinId;
 80013ac:	7afb      	ldrb	r3, [r7, #11]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  BYTE pin3 = pinId>>3;
 80013b4:	7afb      	ldrb	r3, [r7, #11]
 80013b6:	08db      	lsrs	r3, r3, #3
 80013b8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

  MTYPE bitmask1 = ~((MTYPE)0x01 <<     pinId    );
 80013bc:	7afb      	ldrb	r3, [r7, #11]
 80013be:	2201      	movs	r2, #1
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	633b      	str	r3, [r7, #48]	@ 0x30
  MTYPE bitmask2 = ~((MTYPE)0x03 <<     pin2     );
 80013c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80013cc:	2203      	movs	r2, #3
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43db      	mvns	r3, r3
 80013d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MTYPE bitmask3 = ~((MTYPE)0x0F << (4*(pinId%8)));
 80013d6:	7afb      	ldrb	r3, [r7, #11]
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	220f      	movs	r2, #15
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	62bb      	str	r3, [r7, #40]	@ 0x28

  MTYPE moder   = (MTYPE)((mode    )&0x03) << pin2;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f003 0203 	and.w	r2, r3, #3
 80013ee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	627b      	str	r3, [r7, #36]	@ 0x24
  MTYPE pupdr   = (MTYPE)((mode>> 8)&0x03) << pin2;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	0a1b      	lsrs	r3, r3, #8
 80013fc:	f003 0203 	and.w	r2, r3, #3
 8001400:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	623b      	str	r3, [r7, #32]
  MTYPE otyper  = (MTYPE)((mode>> 4)&0x01) << pinId;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	091b      	lsrs	r3, r3, #4
 800140e:	f003 0201 	and.w	r2, r3, #1
 8001412:	7afb      	ldrb	r3, [r7, #11]
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	61fb      	str	r3, [r7, #28]
  MTYPE ospeedr = (MTYPE)((mode>>12)&0x03) << pin2;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	0b1b      	lsrs	r3, r3, #12
 800141e:	f003 0203 	and.w	r2, r3, #3
 8001422:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	61bb      	str	r3, [r7, #24]
  MTYPE afr     = (MTYPE)((af      )&0x0F) << (4*(pinId%8));
 800142c:	7abb      	ldrb	r3, [r7, #10]
 800142e:	f003 020f 	and.w	r2, r3, #15
 8001432:	7afb      	ldrb	r3, [r7, #11]
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	617b      	str	r3, [r7, #20]

  Hw::System::disableInterrupt();
 8001440:	f7ff fe7a 	bl	8001138 <_ZN9EmbSysLib2Hw6System16disableInterruptEv>
  gpio->MODER     = ( gpio->MODER     & bitmask2 ) | moder;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800144a:	401a      	ands	r2, r3
 800144c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800144e:	431a      	orrs	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	601a      	str	r2, [r3, #0]
  gpio->PUPDR     = ( gpio->PUPDR     & bitmask2 ) | pupdr;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	68da      	ldr	r2, [r3, #12]
 8001458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800145a:	401a      	ands	r2, r3
 800145c:	6a3b      	ldr	r3, [r7, #32]
 800145e:	431a      	orrs	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	60da      	str	r2, [r3, #12]
  gpio->OTYPER    = ( gpio->OTYPER    & bitmask1 ) | otyper;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	889b      	ldrh	r3, [r3, #4]
 8001468:	b29a      	uxth	r2, r3
 800146a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800146c:	b29b      	uxth	r3, r3
 800146e:	4013      	ands	r3, r2
 8001470:	b29a      	uxth	r2, r3
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	b29b      	uxth	r3, r3
 8001476:	4313      	orrs	r3, r2
 8001478:	b29a      	uxth	r2, r3
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	809a      	strh	r2, [r3, #4]
  gpio->OSPEEDR   = ( gpio->OSPEEDR   & bitmask2 ) | ospeedr;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001484:	401a      	ands	r2, r3
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	431a      	orrs	r2, r3
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	609a      	str	r2, [r3, #8]
  gpio->AFR[pin3] = ( gpio->AFR[pin3] & bitmask3 ) | afr;
 800148e:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	3208      	adds	r2, #8
 8001496:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800149a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800149c:	ea02 0103 	and.w	r1, r2, r3
 80014a0:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	4319      	orrs	r1, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	3208      	adds	r2, #8
 80014ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  Hw::System::enableInterrupt();
 80014b0:	f7ff fe58 	bl	8001164 <_ZN9EmbSysLib2Hw6System15enableInterruptEv>
}
 80014b4:	bf00      	nop
 80014b6:	3738      	adds	r7, #56	@ 0x38
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>:

//-------------------------------------------------------------------
bool PinConfig::set( Function func, DWORD mode )
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	6039      	str	r1, [r7, #0]
 80014c6:	71fb      	strb	r3, [r7, #7]
  BYTE pin;
  BYTE af;

  GPIO_TypeDef *gpio;

  for( WORD i = 0; table[i] != END_OF_TABLE; i++ )
 80014c8:	2300      	movs	r3, #0
 80014ca:	827b      	strh	r3, [r7, #18]
 80014cc:	e09a      	b.n	8001604 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x148>
  {
    if( (table[i] >> 16) == func )
 80014ce:	8a7b      	ldrh	r3, [r7, #18]
 80014d0:	4a55      	ldr	r2, [pc, #340]	@ (8001628 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x16c>)
 80014d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d6:	141a      	asrs	r2, r3, #16
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	429a      	cmp	r2, r3
 80014dc:	f040 808f 	bne.w	80015fe <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x142>
    {
      port = (table[i]>>12)&0x0F;
 80014e0:	8a7b      	ldrh	r3, [r7, #18]
 80014e2:	4a51      	ldr	r2, [pc, #324]	@ (8001628 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x16c>)
 80014e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e8:	131b      	asrs	r3, r3, #12
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	f003 030f 	and.w	r3, r3, #15
 80014f0:	747b      	strb	r3, [r7, #17]
      pin  = (table[i]>> 4)&0x0F;
 80014f2:	8a7b      	ldrh	r3, [r7, #18]
 80014f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001628 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x16c>)
 80014f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014fa:	111b      	asrs	r3, r3, #4
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	743b      	strb	r3, [r7, #16]
      af   = (table[i]>> 0)&0x0F;
 8001504:	8a7b      	ldrh	r3, [r7, #18]
 8001506:	4a48      	ldr	r2, [pc, #288]	@ (8001628 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x16c>)
 8001508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	73fb      	strb	r3, [r7, #15]

      if( (mode & 0x0F) != ANALOG )
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	f003 030f 	and.w	r3, r3, #15
 800151a:	2b03      	cmp	r3, #3
 800151c:	d003      	beq.n	8001526 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x6a>
      {
        mode |= ALTERNATE_FUNC;
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	f043 0302 	orr.w	r3, r3, #2
 8001524:	603b      	str	r3, [r7, #0]
      }

      switch( port )
 8001526:	7c7b      	ldrb	r3, [r7, #17]
 8001528:	2b07      	cmp	r3, #7
 800152a:	d85b      	bhi.n	80015e4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x128>
 800152c:	a201      	add	r2, pc, #4	@ (adr r2, 8001534 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x78>)
 800152e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001532:	bf00      	nop
 8001534:	08001555 	.word	0x08001555
 8001538:	08001567 	.word	0x08001567
 800153c:	08001579 	.word	0x08001579
 8001540:	0800158b 	.word	0x0800158b
 8001544:	0800159d 	.word	0x0800159d
 8001548:	080015af 	.word	0x080015af
 800154c:	080015c1 	.word	0x080015c1
 8001550:	080015d3 	.word	0x080015d3
      {
        case 0: RCC->AHBENR |= RCC_AHBENR_GPIOAEN; gpio = GPIOA; break;
 8001554:	4b35      	ldr	r3, [pc, #212]	@ (800162c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x170>)
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	4a34      	ldr	r2, [pc, #208]	@ (800162c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x170>)
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	61d3      	str	r3, [r2, #28]
 8001560:	4b33      	ldr	r3, [pc, #204]	@ (8001630 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x174>)
 8001562:	617b      	str	r3, [r7, #20]
 8001564:	e043      	b.n	80015ee <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x132>
        case 1: RCC->AHBENR |= RCC_AHBENR_GPIOBEN; gpio = GPIOB; break;
 8001566:	4b31      	ldr	r3, [pc, #196]	@ (800162c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x170>)
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	4a30      	ldr	r2, [pc, #192]	@ (800162c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x170>)
 800156c:	f043 0302 	orr.w	r3, r3, #2
 8001570:	61d3      	str	r3, [r2, #28]
 8001572:	4b30      	ldr	r3, [pc, #192]	@ (8001634 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x178>)
 8001574:	617b      	str	r3, [r7, #20]
 8001576:	e03a      	b.n	80015ee <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x132>
        case 2: RCC->AHBENR |= RCC_AHBENR_GPIOCEN; gpio = GPIOC; break;
 8001578:	4b2c      	ldr	r3, [pc, #176]	@ (800162c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x170>)
 800157a:	69db      	ldr	r3, [r3, #28]
 800157c:	4a2b      	ldr	r2, [pc, #172]	@ (800162c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x170>)
 800157e:	f043 0304 	orr.w	r3, r3, #4
 8001582:	61d3      	str	r3, [r2, #28]
 8001584:	4b2c      	ldr	r3, [pc, #176]	@ (8001638 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x17c>)
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	e031      	b.n	80015ee <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x132>
        case 3: RCC->AHBENR |= RCC_AHBENR_GPIODEN; gpio = GPIOD; break;
 800158a:	4b28      	ldr	r3, [pc, #160]	@ (800162c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x170>)
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	4a27      	ldr	r2, [pc, #156]	@ (800162c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x170>)
 8001590:	f043 0308 	orr.w	r3, r3, #8
 8001594:	61d3      	str	r3, [r2, #28]
 8001596:	4b29      	ldr	r3, [pc, #164]	@ (800163c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x180>)
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	e028      	b.n	80015ee <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x132>
        case 4: RCC->AHBENR |= RCC_AHBENR_GPIOEEN; gpio = GPIOE; break;
 800159c:	4b23      	ldr	r3, [pc, #140]	@ (800162c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x170>)
 800159e:	69db      	ldr	r3, [r3, #28]
 80015a0:	4a22      	ldr	r2, [pc, #136]	@ (800162c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x170>)
 80015a2:	f043 0310 	orr.w	r3, r3, #16
 80015a6:	61d3      	str	r3, [r2, #28]
 80015a8:	4b25      	ldr	r3, [pc, #148]	@ (8001640 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x184>)
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	e01f      	b.n	80015ee <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x132>
        case 5: RCC->AHBENR |= RCC_AHBENR_GPIOFEN; gpio = GPIOF; break;
 80015ae:	4b1f      	ldr	r3, [pc, #124]	@ (800162c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x170>)
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	4a1e      	ldr	r2, [pc, #120]	@ (800162c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x170>)
 80015b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015b8:	61d3      	str	r3, [r2, #28]
 80015ba:	4b22      	ldr	r3, [pc, #136]	@ (8001644 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x188>)
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	e016      	b.n	80015ee <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x132>
        case 6: RCC->AHBENR |= RCC_AHBENR_GPIOGEN; gpio = GPIOG; break;
 80015c0:	4b1a      	ldr	r3, [pc, #104]	@ (800162c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x170>)
 80015c2:	69db      	ldr	r3, [r3, #28]
 80015c4:	4a19      	ldr	r2, [pc, #100]	@ (800162c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x170>)
 80015c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015ca:	61d3      	str	r3, [r2, #28]
 80015cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001648 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x18c>)
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	e00d      	b.n	80015ee <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x132>
        case 7: RCC->AHBENR |= RCC_AHBENR_GPIOHEN; gpio = GPIOH; break;
 80015d2:	4b16      	ldr	r3, [pc, #88]	@ (800162c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x170>)
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	4a15      	ldr	r2, [pc, #84]	@ (800162c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x170>)
 80015d8:	f043 0320 	orr.w	r3, r3, #32
 80015dc:	61d3      	str	r3, [r2, #28]
 80015de:	4b1b      	ldr	r3, [pc, #108]	@ (800164c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x190>)
 80015e0:	617b      	str	r3, [r7, #20]
 80015e2:	e004      	b.n	80015ee <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x132>
        default:report.error( ReportID_Hw::Event::HARDWARE_NOT_SUPPORTED );
 80015e4:	210d      	movs	r1, #13
 80015e6:	481a      	ldr	r0, [pc, #104]	@ (8001650 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x194>)
 80015e8:	f001 fa1c 	bl	8002a24 <_ZN9EmbSysLib3Std6Report5errorEt>
          break;
 80015ec:	bf00      	nop
      }
      set( gpio, pin, mode, af );
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	7c39      	ldrb	r1, [r7, #16]
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	6978      	ldr	r0, [r7, #20]
 80015f6:	f7ff fecf 	bl	8001398 <_ZN9EmbSysLib2Hw9PinConfig3setEP12GPIO_TypeDefhmh>
      return( true );
 80015fa:	2301      	movs	r3, #1
 80015fc:	e00f      	b.n	800161e <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x162>
  for( WORD i = 0; table[i] != END_OF_TABLE; i++ )
 80015fe:	8a7b      	ldrh	r3, [r7, #18]
 8001600:	3301      	adds	r3, #1
 8001602:	827b      	strh	r3, [r7, #18]
 8001604:	8a7b      	ldrh	r3, [r7, #18]
 8001606:	4a08      	ldr	r2, [pc, #32]	@ (8001628 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x16c>)
 8001608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800160c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001610:	f47f af5d 	bne.w	80014ce <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x12>
    }
  }
  // Error: The table does not contain the func
  report.error( ReportID_Hw::Event::CONFIG_NOT_SUPPORTED );
 8001614:	2104      	movs	r1, #4
 8001616:	480e      	ldr	r0, [pc, #56]	@ (8001650 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x194>)
 8001618:	f001 fa04 	bl	8002a24 <_ZN9EmbSysLib3Std6Report5errorEt>
  return( false );
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000000 	.word	0x20000000
 800162c:	40023800 	.word	0x40023800
 8001630:	40020000 	.word	0x40020000
 8001634:	40020400 	.word	0x40020400
 8001638:	40020800 	.word	0x40020800
 800163c:	40020c00 	.word	0x40020c00
 8001640:	40021000 	.word	0x40021000
 8001644:	40021800 	.word	0x40021800
 8001648:	40021c00 	.word	0x40021c00
 800164c:	40021400 	.word	0x40021400
 8001650:	20000098 	.word	0x20000098

08001654 <_ZN9EmbSysLib2Hw7Adc_McuC1ERNS0_5TimerE>:
//*******************************************************************
//-------------------------------------------------------------------
Adc *Adc_Mcu::adcPtr = 0;

//-------------------------------------------------------------------
Adc_Mcu::Adc_Mcu( Timer &timer )
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]

: Adc( ReportID_Hw::Module::ADC_MCU, 16 /*num of channels*/, timer )
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	2210      	movs	r2, #16
 8001664:	2140      	movs	r1, #64	@ 0x40
 8001666:	f001 fa4f 	bl	8002b08 <_ZN9EmbSysLib2Hw3AdcC1EthRNS0_5TimerE>
 800166a:	4a26      	ldr	r2, [pc, #152]	@ (8001704 <_ZN9EmbSysLib2Hw7Adc_McuC1ERNS0_5TimerE+0xb0>)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	601a      	str	r2, [r3, #0]

{
  adcPtr = this;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a25      	ldr	r2, [pc, #148]	@ (8001708 <_ZN9EmbSysLib2Hw7Adc_McuC1ERNS0_5TimerE+0xb4>)
 8001674:	6013      	str	r3, [r2, #0]

  RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8001676:	4b25      	ldr	r3, [pc, #148]	@ (800170c <_ZN9EmbSysLib2Hw7Adc_McuC1ERNS0_5TimerE+0xb8>)
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	4a24      	ldr	r2, [pc, #144]	@ (800170c <_ZN9EmbSysLib2Hw7Adc_McuC1ERNS0_5TimerE+0xb8>)
 800167c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001680:	6213      	str	r3, [r2, #32]
  
  while( (ADC1->SR & ADC_SR_ADONS) );
 8001682:	bf00      	nop
 8001684:	4b22      	ldr	r3, [pc, #136]	@ (8001710 <_ZN9EmbSysLib2Hw7Adc_McuC1ERNS0_5TimerE+0xbc>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800168c:	2b00      	cmp	r3, #0
 800168e:	bf14      	ite	ne
 8001690:	2301      	movne	r3, #1
 8001692:	2300      	moveq	r3, #0
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f4      	bne.n	8001684 <_ZN9EmbSysLib2Hw7Adc_McuC1ERNS0_5TimerE+0x30>
  
  // Clock control register, ADC needs HSI
  RCC->CR |= RCC_CR_HSION;
 800169a:	4b1c      	ldr	r3, [pc, #112]	@ (800170c <_ZN9EmbSysLib2Hw7Adc_McuC1ERNS0_5TimerE+0xb8>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a1b      	ldr	r2, [pc, #108]	@ (800170c <_ZN9EmbSysLib2Hw7Adc_McuC1ERNS0_5TimerE+0xb8>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6013      	str	r3, [r2, #0]
  while( !(RCC->CR & RCC_CR_HSIRDY) ); // wait for HSI ready
 80016a6:	bf00      	nop
 80016a8:	4b18      	ldr	r3, [pc, #96]	@ (800170c <_ZN9EmbSysLib2Hw7Adc_McuC1ERNS0_5TimerE+0xb8>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	bf0c      	ite	eq
 80016b4:	2301      	moveq	r3, #1
 80016b6:	2300      	movne	r3, #0
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f4      	bne.n	80016a8 <_ZN9EmbSysLib2Hw7Adc_McuC1ERNS0_5TimerE+0x54>

  ADC1->CR2 |=    ADC_CR2_ADON  // A/D Converter: ON
 80016be:	4b14      	ldr	r3, [pc, #80]	@ (8001710 <_ZN9EmbSysLib2Hw7Adc_McuC1ERNS0_5TimerE+0xbc>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	4a13      	ldr	r2, [pc, #76]	@ (8001710 <_ZN9EmbSysLib2Hw7Adc_McuC1ERNS0_5TimerE+0xbc>)
 80016c4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	6093      	str	r3, [r2, #8]
               | !ADC_CR2_CONT  // Continuous Conversion: OFF
               |  ADC_CR2_ALIGN;// Data alignment: left

  ADC1->CR1 |=    ADC_CR1_EOCIE; // End of conversion interrupt: enable
 80016ce:	4b10      	ldr	r3, [pc, #64]	@ (8001710 <_ZN9EmbSysLib2Hw7Adc_McuC1ERNS0_5TimerE+0xbc>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001710 <_ZN9EmbSysLib2Hw7Adc_McuC1ERNS0_5TimerE+0xbc>)
 80016d4:	f043 0320 	orr.w	r3, r3, #32
 80016d8:	6053      	str	r3, [r2, #4]

  while( !(ADC1->SR & ADC_SR_ADONS) );
 80016da:	bf00      	nop
 80016dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001710 <_ZN9EmbSysLib2Hw7Adc_McuC1ERNS0_5TimerE+0xbc>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	bf0c      	ite	eq
 80016e8:	2301      	moveq	r3, #1
 80016ea:	2300      	movne	r3, #0
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f4      	bne.n	80016dc <_ZN9EmbSysLib2Hw7Adc_McuC1ERNS0_5TimerE+0x88>

  NVIC_EnableIRQ( ADC1_IRQn );
 80016f2:	2012      	movs	r0, #18
 80016f4:	f7ff fc46 	bl	8000f84 <__NVIC_EnableIRQ>
}
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4618      	mov	r0, r3
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	0800675c 	.word	0x0800675c
 8001708:	2000009c 	.word	0x2000009c
 800170c:	40023800 	.word	0x40023800
 8001710:	40012400 	.word	0x40012400

08001714 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh>:

//-------------------------------------------------------------------
void Adc_Mcu::configCh( BYTE ch, BYTE para )
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	70fb      	strb	r3, [r7, #3]
 8001720:	4613      	mov	r3, r2
 8001722:	70bb      	strb	r3, [r7, #2]
  switch( ch )
 8001724:	78fb      	ldrb	r3, [r7, #3]
 8001726:	2b0f      	cmp	r3, #15
 8001728:	d822      	bhi.n	8001770 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x5c>
 800172a:	a201      	add	r2, pc, #4	@ (adr r2, 8001730 <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x1c>)
 800172c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001730:	0800177f 	.word	0x0800177f
 8001734:	08001789 	.word	0x08001789
 8001738:	08001793 	.word	0x08001793
 800173c:	0800179d 	.word	0x0800179d
 8001740:	080017a7 	.word	0x080017a7
 8001744:	080017b1 	.word	0x080017b1
 8001748:	080017bb 	.word	0x080017bb
 800174c:	080017c5 	.word	0x080017c5
 8001750:	080017cf 	.word	0x080017cf
 8001754:	080017d9 	.word	0x080017d9
 8001758:	080017e3 	.word	0x080017e3
 800175c:	080017ed 	.word	0x080017ed
 8001760:	080017f7 	.word	0x080017f7
 8001764:	08001801 	.word	0x08001801
 8001768:	0800180b 	.word	0x0800180b
 800176c:	08001815 	.word	0x08001815
  {
    default:
      report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3316      	adds	r3, #22
 8001774:	2108      	movs	r1, #8
 8001776:	4618      	mov	r0, r3
 8001778:	f001 f954 	bl	8002a24 <_ZN9EmbSysLib3Std6Report5errorEt>
      break;
 800177c:	e04f      	b.n	800181e <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x10a>
    case  0: PinConfig::set( PinConfig::ADC12_IN0,  PinConfig::ANALOG ); break;
 800177e:	2103      	movs	r1, #3
 8001780:	2000      	movs	r0, #0
 8001782:	f7ff fe9b 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001786:	e04a      	b.n	800181e <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x10a>
    case  1: PinConfig::set( PinConfig::ADC12_IN1,  PinConfig::ANALOG ); break;
 8001788:	2103      	movs	r1, #3
 800178a:	2001      	movs	r0, #1
 800178c:	f7ff fe96 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001790:	e045      	b.n	800181e <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x10a>
    case  2: PinConfig::set( PinConfig::ADC12_IN2,  PinConfig::ANALOG ); break;
 8001792:	2103      	movs	r1, #3
 8001794:	2008      	movs	r0, #8
 8001796:	f7ff fe91 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 800179a:	e040      	b.n	800181e <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x10a>
    case  3: PinConfig::set( PinConfig::ADC12_IN3,  PinConfig::ANALOG ); break;
 800179c:	2103      	movs	r1, #3
 800179e:	2009      	movs	r0, #9
 80017a0:	f7ff fe8c 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 80017a4:	e03b      	b.n	800181e <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x10a>
    case  4: PinConfig::set( PinConfig::ADC12_IN4,  PinConfig::ANALOG ); break;
 80017a6:	2103      	movs	r1, #3
 80017a8:	200a      	movs	r0, #10
 80017aa:	f7ff fe87 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 80017ae:	e036      	b.n	800181e <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x10a>
    case  5: PinConfig::set( PinConfig::ADC12_IN5,  PinConfig::ANALOG ); break;
 80017b0:	2103      	movs	r1, #3
 80017b2:	200b      	movs	r0, #11
 80017b4:	f7ff fe82 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 80017b8:	e031      	b.n	800181e <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x10a>
    case  6: PinConfig::set( PinConfig::ADC12_IN6,  PinConfig::ANALOG ); break;
 80017ba:	2103      	movs	r1, #3
 80017bc:	200c      	movs	r0, #12
 80017be:	f7ff fe7d 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 80017c2:	e02c      	b.n	800181e <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x10a>
    case  7: PinConfig::set( PinConfig::ADC12_IN7,  PinConfig::ANALOG ); break;
 80017c4:	2103      	movs	r1, #3
 80017c6:	200d      	movs	r0, #13
 80017c8:	f7ff fe78 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 80017cc:	e027      	b.n	800181e <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x10a>
    case  8: PinConfig::set( PinConfig::ADC12_IN8,  PinConfig::ANALOG ); break;
 80017ce:	2103      	movs	r1, #3
 80017d0:	200e      	movs	r0, #14
 80017d2:	f7ff fe73 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 80017d6:	e022      	b.n	800181e <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x10a>
    case  9: PinConfig::set( PinConfig::ADC12_IN9,  PinConfig::ANALOG ); break;
 80017d8:	2103      	movs	r1, #3
 80017da:	200f      	movs	r0, #15
 80017dc:	f7ff fe6e 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 80017e0:	e01d      	b.n	800181e <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x10a>
    case 10: PinConfig::set( PinConfig::ADC12_IN10, PinConfig::ANALOG ); break;
 80017e2:	2103      	movs	r1, #3
 80017e4:	2002      	movs	r0, #2
 80017e6:	f7ff fe69 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 80017ea:	e018      	b.n	800181e <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x10a>
    case 11: PinConfig::set( PinConfig::ADC12_IN11, PinConfig::ANALOG ); break;
 80017ec:	2103      	movs	r1, #3
 80017ee:	2003      	movs	r0, #3
 80017f0:	f7ff fe64 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 80017f4:	e013      	b.n	800181e <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x10a>
    case 12: PinConfig::set( PinConfig::ADC12_IN12, PinConfig::ANALOG ); break;
 80017f6:	2103      	movs	r1, #3
 80017f8:	2004      	movs	r0, #4
 80017fa:	f7ff fe5f 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 80017fe:	e00e      	b.n	800181e <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x10a>
    case 13: PinConfig::set( PinConfig::ADC12_IN13, PinConfig::ANALOG ); break;
 8001800:	2103      	movs	r1, #3
 8001802:	2005      	movs	r0, #5
 8001804:	f7ff fe5a 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001808:	e009      	b.n	800181e <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x10a>
    case 14: PinConfig::set( PinConfig::ADC12_IN14, PinConfig::ANALOG ); break;
 800180a:	2103      	movs	r1, #3
 800180c:	2006      	movs	r0, #6
 800180e:	f7ff fe55 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001812:	e004      	b.n	800181e <_ZN9EmbSysLib2Hw7Adc_Mcu8configChEhh+0x10a>
    case 15: PinConfig::set( PinConfig::ADC12_IN15, PinConfig::ANALOG ); break;
 8001814:	2103      	movs	r1, #3
 8001816:	2007      	movs	r0, #7
 8001818:	f7ff fe50 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 800181c:	bf00      	nop
  }
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop

08001828 <_ZN9EmbSysLib2Hw7Adc_Mcu9getResultEv>:

//-------------------------------------------------------------------
inline WORD Adc_Mcu::getResult( void )
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  return( ADC1->DR & 0xFFFF );
 8001830:	4b03      	ldr	r3, [pc, #12]	@ (8001840 <_ZN9EmbSysLib2Hw7Adc_Mcu9getResultEv+0x18>)
 8001832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001834:	b29b      	uxth	r3, r3
}
 8001836:	4618      	mov	r0, r3
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr
 8001840:	40012400 	.word	0x40012400

08001844 <_ZN9EmbSysLib2Hw7Adc_Mcu7startChEh>:

//-------------------------------------------------------------------
inline void Adc_Mcu::startCh( BYTE ch )
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	70fb      	strb	r3, [r7, #3]
  // select channel
  ADC1->SQR5 = ch & 0x1F;
 8001850:	78fb      	ldrb	r3, [r7, #3]
 8001852:	4a07      	ldr	r2, [pc, #28]	@ (8001870 <_ZN9EmbSysLib2Hw7Adc_Mcu7startChEh+0x2c>)
 8001854:	f003 031f 	and.w	r3, r3, #31
 8001858:	6413      	str	r3, [r2, #64]	@ 0x40

  ADC1->CR2 |= ADC_CR2_SWSTART;
 800185a:	4b05      	ldr	r3, [pc, #20]	@ (8001870 <_ZN9EmbSysLib2Hw7Adc_Mcu7startChEh+0x2c>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	4a04      	ldr	r2, [pc, #16]	@ (8001870 <_ZN9EmbSysLib2Hw7Adc_Mcu7startChEh+0x2c>)
 8001860:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001864:	6093      	str	r3, [r2, #8]
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr
 8001870:	40012400 	.word	0x40012400

08001874 <ADC1_IRQHandler>:

//-------------------------------------------------------------------
extern "C"
{
  void ADC1_IRQHandler(void)
  {
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
    ADC1->SR &= ~ADC_SR_EOC;
 8001878:	4b08      	ldr	r3, [pc, #32]	@ (800189c <ADC1_IRQHandler+0x28>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a07      	ldr	r2, [pc, #28]	@ (800189c <ADC1_IRQHandler+0x28>)
 800187e:	f023 0302 	bic.w	r3, r3, #2
 8001882:	6013      	str	r3, [r2, #0]
    Adc_Mcu::adcPtr->isr();
 8001884:	4b06      	ldr	r3, [pc, #24]	@ (80018a0 <ADC1_IRQHandler+0x2c>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b05      	ldr	r3, [pc, #20]	@ (80018a0 <ADC1_IRQHandler+0x2c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	330c      	adds	r3, #12
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4610      	mov	r0, r2
 8001894:	4798      	blx	r3
  }
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40012400 	.word	0x40012400
 80018a0:	2000009c 	.word	0x2000009c

080018a4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE>:
//
// Port_Mcu
//
//*******************************************************************
//-------------------------------------------------------------------
Port_Mcu::Port_Mcu( PortId portId )
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	70fb      	strb	r3, [r7, #3]
  : Port( ReportID_Hw::Module::PORT_MCU )
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2110      	movs	r1, #16
 80018b4:	4618      	mov	r0, r3
 80018b6:	f001 faaf 	bl	8002e18 <_ZN9EmbSysLib2Hw4PortC1Et>
 80018ba:	4a3a      	ldr	r2, [pc, #232]	@ (80019a4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x100>)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	601a      	str	r2, [r3, #0]
{
  switch( portId )
 80018c0:	78fb      	ldrb	r3, [r7, #3]
 80018c2:	2b07      	cmp	r3, #7
 80018c4:	d862      	bhi.n	800198c <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0xe8>
 80018c6:	a201      	add	r2, pc, #4	@ (adr r2, 80018cc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x28>)
 80018c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018cc:	080018ed 	.word	0x080018ed
 80018d0:	08001901 	.word	0x08001901
 80018d4:	08001915 	.word	0x08001915
 80018d8:	08001929 	.word	0x08001929
 80018dc:	0800193d 	.word	0x0800193d
 80018e0:	08001951 	.word	0x08001951
 80018e4:	08001965 	.word	0x08001965
 80018e8:	08001979 	.word	0x08001979
  {
    case PA: gpio = GPIOA; RCC->AHBENR |= RCC_AHBENR_GPIOAEN; break;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a2e      	ldr	r2, [pc, #184]	@ (80019a8 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x104>)
 80018f0:	609a      	str	r2, [r3, #8]
 80018f2:	4b2e      	ldr	r3, [pc, #184]	@ (80019ac <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x108>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	4a2d      	ldr	r2, [pc, #180]	@ (80019ac <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x108>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	61d3      	str	r3, [r2, #28]
 80018fe:	e04c      	b.n	800199a <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0xf6>
    case PB: gpio = GPIOB; RCC->AHBENR |= RCC_AHBENR_GPIOBEN; break;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a2b      	ldr	r2, [pc, #172]	@ (80019b0 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x10c>)
 8001904:	609a      	str	r2, [r3, #8]
 8001906:	4b29      	ldr	r3, [pc, #164]	@ (80019ac <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x108>)
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	4a28      	ldr	r2, [pc, #160]	@ (80019ac <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x108>)
 800190c:	f043 0302 	orr.w	r3, r3, #2
 8001910:	61d3      	str	r3, [r2, #28]
 8001912:	e042      	b.n	800199a <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0xf6>
    case PC: gpio = GPIOC; RCC->AHBENR |= RCC_AHBENR_GPIOCEN; break;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a27      	ldr	r2, [pc, #156]	@ (80019b4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x110>)
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	4b24      	ldr	r3, [pc, #144]	@ (80019ac <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x108>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	4a23      	ldr	r2, [pc, #140]	@ (80019ac <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x108>)
 8001920:	f043 0304 	orr.w	r3, r3, #4
 8001924:	61d3      	str	r3, [r2, #28]
 8001926:	e038      	b.n	800199a <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0xf6>
    case PD: gpio = GPIOD; RCC->AHBENR |= RCC_AHBENR_GPIODEN; break;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a23      	ldr	r2, [pc, #140]	@ (80019b8 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x114>)
 800192c:	609a      	str	r2, [r3, #8]
 800192e:	4b1f      	ldr	r3, [pc, #124]	@ (80019ac <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x108>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	4a1e      	ldr	r2, [pc, #120]	@ (80019ac <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x108>)
 8001934:	f043 0308 	orr.w	r3, r3, #8
 8001938:	61d3      	str	r3, [r2, #28]
 800193a:	e02e      	b.n	800199a <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0xf6>
    case PE: gpio = GPIOE; RCC->AHBENR |= RCC_AHBENR_GPIOEEN; break;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a1f      	ldr	r2, [pc, #124]	@ (80019bc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x118>)
 8001940:	609a      	str	r2, [r3, #8]
 8001942:	4b1a      	ldr	r3, [pc, #104]	@ (80019ac <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x108>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	4a19      	ldr	r2, [pc, #100]	@ (80019ac <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x108>)
 8001948:	f043 0310 	orr.w	r3, r3, #16
 800194c:	61d3      	str	r3, [r2, #28]
 800194e:	e024      	b.n	800199a <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0xf6>
    case PF: gpio = GPIOF; RCC->AHBENR |= RCC_AHBENR_GPIOFEN; break;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a1b      	ldr	r2, [pc, #108]	@ (80019c0 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x11c>)
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	4b15      	ldr	r3, [pc, #84]	@ (80019ac <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x108>)
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	4a14      	ldr	r2, [pc, #80]	@ (80019ac <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x108>)
 800195c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001960:	61d3      	str	r3, [r2, #28]
 8001962:	e01a      	b.n	800199a <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0xf6>
    case PG: gpio = GPIOG; RCC->AHBENR |= RCC_AHBENR_GPIOGEN; break;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a17      	ldr	r2, [pc, #92]	@ (80019c4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x120>)
 8001968:	609a      	str	r2, [r3, #8]
 800196a:	4b10      	ldr	r3, [pc, #64]	@ (80019ac <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x108>)
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	4a0f      	ldr	r2, [pc, #60]	@ (80019ac <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x108>)
 8001970:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001974:	61d3      	str	r3, [r2, #28]
 8001976:	e010      	b.n	800199a <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0xf6>
    case PH: gpio = GPIOH; RCC->AHBENR |= RCC_AHBENR_GPIOHEN; break;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a13      	ldr	r2, [pc, #76]	@ (80019c8 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x124>)
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	4b0b      	ldr	r3, [pc, #44]	@ (80019ac <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x108>)
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	4a0a      	ldr	r2, [pc, #40]	@ (80019ac <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x108>)
 8001984:	f043 0320 	orr.w	r3, r3, #32
 8001988:	61d3      	str	r3, [r2, #28]
 800198a:	e006      	b.n	800199a <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0xf6>
    default:
      report.error( ReportID_Hw::Event::WRONG_ID );
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3304      	adds	r3, #4
 8001990:	2107      	movs	r1, #7
 8001992:	4618      	mov	r0, r3
 8001994:	f001 f846 	bl	8002a24 <_ZN9EmbSysLib3Std6Report5errorEt>
      break;
 8001998:	bf00      	nop
  }
}
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4618      	mov	r0, r3
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	08006700 	.word	0x08006700
 80019a8:	40020000 	.word	0x40020000
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40020400 	.word	0x40020400
 80019b4:	40020800 	.word	0x40020800
 80019b8:	40020c00 	.word	0x40020c00
 80019bc:	40021000 	.word	0x40021000
 80019c0:	40021800 	.word	0x40021800
 80019c4:	40021c00 	.word	0x40021c00
 80019c8:	40021400 	.word	0x40021400

080019cc <_ZN9EmbSysLib2Hw8Port_Mcu7setModeEmNS0_4Port4ModeE>:

//-------------------------------------------------------------------
void Port_Mcu::setMode( MTYPE mask, Mode mode )
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	4613      	mov	r3, r2
 80019d8:	71fb      	strb	r3, [r7, #7]
  for( BYTE i = 0; i < 16; i++, mask >>= 1 )
 80019da:	2300      	movs	r3, #0
 80019dc:	75fb      	strb	r3, [r7, #23]
 80019de:	e012      	b.n	8001a06 <_ZN9EmbSysLib2Hw8Port_Mcu7setModeEmNS0_4Port4ModeE+0x3a>
  {
    if( mask & 0x01 )
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d007      	beq.n	80019fa <_ZN9EmbSysLib2Hw8Port_Mcu7setModeEmNS0_4Port4ModeE+0x2e>
    {
      setPinMode( i, mode );
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	3304      	adds	r3, #4
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	79fa      	ldrb	r2, [r7, #7]
 80019f4:	7df9      	ldrb	r1, [r7, #23]
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	4798      	blx	r3
  for( BYTE i = 0; i < 16; i++, mask >>= 1 )
 80019fa:	7dfb      	ldrb	r3, [r7, #23]
 80019fc:	3301      	adds	r3, #1
 80019fe:	75fb      	strb	r3, [r7, #23]
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	085b      	lsrs	r3, r3, #1
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	7dfb      	ldrb	r3, [r7, #23]
 8001a08:	2b0f      	cmp	r3, #15
 8001a0a:	d9e9      	bls.n	80019e0 <_ZN9EmbSysLib2Hw8Port_Mcu7setModeEmNS0_4Port4ModeE+0x14>
    }
  }
}
 8001a0c:	bf00      	nop
 8001a0e:	bf00      	nop
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <_ZN9EmbSysLib2Hw8Port_Mcu10setPinModeEhNS0_4Port4ModeE>:

//-------------------------------------------------------------------
void Port_Mcu::setPinMode( BYTE pinId, Mode mode )
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b084      	sub	sp, #16
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
 8001a1e:	460b      	mov	r3, r1
 8001a20:	70fb      	strb	r3, [r7, #3]
 8001a22:	4613      	mov	r3, r2
 8001a24:	70bb      	strb	r3, [r7, #2]
  DWORD config = 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]

  if( mode & Port::Out ) config |= PinConfig::OUTPUT;
 8001a2a:	78bb      	ldrb	r3, [r7, #2]
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <_ZN9EmbSysLib2Hw8Port_Mcu10setPinModeEhNS0_4Port4ModeE+0x26>
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	60fb      	str	r3, [r7, #12]
  if( mode & Port::PU  ) config |= PinConfig::PULL_UP;
 8001a3c:	78bb      	ldrb	r3, [r7, #2]
 8001a3e:	f003 0304 	and.w	r3, r3, #4
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <_ZN9EmbSysLib2Hw8Port_Mcu10setPinModeEhNS0_4Port4ModeE+0x38>
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a4c:	60fb      	str	r3, [r7, #12]
  if( mode & Port::PD  ) config |= PinConfig::PULL_DOWN;
 8001a4e:	78bb      	ldrb	r3, [r7, #2]
 8001a50:	f003 0308 	and.w	r3, r3, #8
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <_ZN9EmbSysLib2Hw8Port_Mcu10setPinModeEhNS0_4Port4ModeE+0x4a>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a5e:	60fb      	str	r3, [r7, #12]
  if( mode & Port::OD  ) config |= PinConfig::OPEN_DRAIN;
 8001a60:	78bb      	ldrb	r3, [r7, #2]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <_ZN9EmbSysLib2Hw8Port_Mcu10setPinModeEhNS0_4Port4ModeE+0x5c>
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f043 0310 	orr.w	r3, r3, #16
 8001a70:	60fb      	str	r3, [r7, #12]

  PinConfig::set( gpio, pinId, config );
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6898      	ldr	r0, [r3, #8]
 8001a76:	78f9      	ldrb	r1, [r7, #3]
 8001a78:	2300      	movs	r3, #0
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	f7ff fc8c 	bl	8001398 <_ZN9EmbSysLib2Hw9PinConfig3setEP12GPIO_TypeDefhmh>
}
 8001a80:	bf00      	nop
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <_ZN9EmbSysLib2Hw8Port_Mcu3setEm>:

//-------------------------------------------------------------------
inline void Port_Mcu::set( MTYPE mask )
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  gpio->BSRRL = mask;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	b292      	uxth	r2, r2
 8001a9a:	831a      	strh	r2, [r3, #24]
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr

08001aa6 <_ZN9EmbSysLib2Hw8Port_Mcu3setEmm>:

//-------------------------------------------------------------------
inline void Port_Mcu::set( MTYPE mask, MTYPE value )
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b085      	sub	sp, #20
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	60f8      	str	r0, [r7, #12]
 8001aae:	60b9      	str	r1, [r7, #8]
 8001ab0:	607a      	str	r2, [r7, #4]
  gpio->BSRRL = mask &  value;
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	b299      	uxth	r1, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	400a      	ands	r2, r1
 8001ac0:	b292      	uxth	r2, r2
 8001ac2:	831a      	strh	r2, [r3, #24]
  gpio->BSRRH = mask & ~value;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	b299      	uxth	r1, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	400a      	ands	r2, r1
 8001ad6:	b292      	uxth	r2, r2
 8001ad8:	835a      	strh	r2, [r3, #26]
}
 8001ada:	bf00      	nop
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr

08001ae4 <_ZN9EmbSysLib2Hw8Port_Mcu3clrEm>:

//-------------------------------------------------------------------
inline void Port_Mcu::clr( MTYPE mask )
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  gpio->BSRRH = mask;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	b292      	uxth	r2, r2
 8001af6:	835a      	strh	r2, [r3, #26]
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr

08001b02 <_ZN9EmbSysLib2Hw8Port_Mcu3getEv>:

//-------------------------------------------------------------------
inline MTYPE Port_Mcu::get( void )
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  return( gpio->IDR );
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	8a1b      	ldrh	r3, [r3, #16]
 8001b10:	b29b      	uxth	r3, r3
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr

08001b1c <SysTick_Handler>:

//-------------------------------------------------------------------
extern "C"
{
  void SysTick_Handler( void )
  {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
    static volatile DWORD stackPointer = 0;
    
    stackPointer = save_context();
 8001b20:	f7fe fb38 	bl	8000194 <save_context>
 8001b24:	4603      	mov	r3, r0
 8001b26:	4a0d      	ldr	r2, [pc, #52]	@ (8001b5c <SysTick_Handler+0x40>)
 8001b28:	6013      	str	r3, [r2, #0]
    Rtos_Mcu::sysTic++;
 8001b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b60 <SysTick_Handler+0x44>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	4a0b      	ldr	r2, [pc, #44]	@ (8001b60 <SysTick_Handler+0x44>)
 8001b32:	6013      	str	r3, [r2, #0]
    stackPointer = (DWORD)Rtos_Mcu::schedule( (Rtos_Mcu::TaskHandle)stackPointer, true );
 8001b34:	4b0b      	ldr	r3, [pc, #44]	@ (8001b64 <SysTick_Handler+0x48>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a08      	ldr	r2, [pc, #32]	@ (8001b5c <SysTick_Handler+0x40>)
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	4610      	mov	r0, r2
 8001b40:	4798      	blx	r3
 8001b42:	4603      	mov	r3, r0
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b05      	ldr	r3, [pc, #20]	@ (8001b5c <SysTick_Handler+0x40>)
 8001b48:	601a      	str	r2, [r3, #0]
    load_context( stackPointer );
 8001b4a:	4b04      	ldr	r3, [pc, #16]	@ (8001b5c <SysTick_Handler+0x40>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fb27 	bl	80001a2 <load_context>
    asm("NOP");  // Workaround: armclang optimizes in a way, that load_context and POP is erroneously reordered
 8001b54:	bf00      	nop
  }
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	200000ac 	.word	0x200000ac
 8001b60:	200000a4 	.word	0x200000a4
 8001b64:	200000a0 	.word	0x200000a0

08001b68 <PendSV_Handler>:

//-------------------------------------------------------------------
extern "C"
{
  void PendSV_Handler( void )
  {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
    static volatile DWORD stackPointer = 0;

    stackPointer = save_context();
 8001b6c:	f7fe fb12 	bl	8000194 <save_context>
 8001b70:	4603      	mov	r3, r0
 8001b72:	4a0a      	ldr	r2, [pc, #40]	@ (8001b9c <PendSV_Handler+0x34>)
 8001b74:	6013      	str	r3, [r2, #0]
    stackPointer = (DWORD)Rtos_Mcu::schedule( (Rtos_Mcu::TaskHandle)stackPointer, false );
 8001b76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba0 <PendSV_Handler+0x38>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a08      	ldr	r2, [pc, #32]	@ (8001b9c <PendSV_Handler+0x34>)
 8001b7c:	6812      	ldr	r2, [r2, #0]
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4610      	mov	r0, r2
 8001b82:	4798      	blx	r3
 8001b84:	4603      	mov	r3, r0
 8001b86:	461a      	mov	r2, r3
 8001b88:	4b04      	ldr	r3, [pc, #16]	@ (8001b9c <PendSV_Handler+0x34>)
 8001b8a:	601a      	str	r2, [r3, #0]
    load_context( stackPointer );
 8001b8c:	4b03      	ldr	r3, [pc, #12]	@ (8001b9c <PendSV_Handler+0x34>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fb06 	bl	80001a2 <load_context>
    asm("NOP");  // Workaround: armclang optimizes in a way, that load_context and POP is erroneously reordered
 8001b96:	bf00      	nop
  }
 8001b98:	bf00      	nop
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	200000b0 	.word	0x200000b0
 8001ba0:	200000a0 	.word	0x200000a0

08001ba4 <_ZN9EmbSysLib2Hw13SPImaster_McuC1ENS1_6SPI_IDENS1_12SPI_BaudrateENS0_9SPImaster11ClockPolPhaE>:
#if ( system_PCLK_SPI != 32000000 )
  #error "system_PCLK_SPI not defined or wrong value"
#endif

//-------------------------------------------------------------------
SPImaster_Mcu::SPImaster_Mcu( SPI_ID         id, 
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	4608      	mov	r0, r1
 8001bae:	4611      	mov	r1, r2
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	70fb      	strb	r3, [r7, #3]
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	70bb      	strb	r3, [r7, #2]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	707b      	strb	r3, [r7, #1]
                                SPI_Baudrate baudrate,
                                ClockPolPha  clockPolPha )

: SPImaster() 
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f001 f9db 	bl	8002f7c <_ZN9EmbSysLib2Hw9SPImasterC1Ev>
 8001bc6:	4a5d      	ldr	r2, [pc, #372]	@ (8001d3c <_ZN9EmbSysLib2Hw13SPImaster_McuC1ENS1_6SPI_IDENS1_12SPI_BaudrateENS0_9SPImaster11ClockPolPhaE+0x198>)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	601a      	str	r2, [r3, #0]

{
  switch( id )
 8001bcc:	78fb      	ldrb	r3, [r7, #3]
 8001bce:	2b03      	cmp	r3, #3
 8001bd0:	d03c      	beq.n	8001c4c <_ZN9EmbSysLib2Hw13SPImaster_McuC1ENS1_6SPI_IDENS1_12SPI_BaudrateENS0_9SPImaster11ClockPolPhaE+0xa8>
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	dc55      	bgt.n	8001c82 <_ZN9EmbSysLib2Hw13SPImaster_McuC1ENS1_6SPI_IDENS1_12SPI_BaudrateENS0_9SPImaster11ClockPolPhaE+0xde>
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d002      	beq.n	8001be0 <_ZN9EmbSysLib2Hw13SPImaster_McuC1ENS1_6SPI_IDENS1_12SPI_BaudrateENS0_9SPImaster11ClockPolPhaE+0x3c>
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d01b      	beq.n	8001c16 <_ZN9EmbSysLib2Hw13SPImaster_McuC1ENS1_6SPI_IDENS1_12SPI_BaudrateENS0_9SPImaster11ClockPolPhaE+0x72>
  {
    default:
      // error!
      break;
 8001bde:	e050      	b.n	8001c82 <_ZN9EmbSysLib2Hw13SPImaster_McuC1ENS1_6SPI_IDENS1_12SPI_BaudrateENS0_9SPImaster11ClockPolPhaE+0xde>
      
    case SPI_1:
      ptr           = SPI1;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a57      	ldr	r2, [pc, #348]	@ (8001d40 <_ZN9EmbSysLib2Hw13SPImaster_McuC1ENS1_6SPI_IDENS1_12SPI_BaudrateENS0_9SPImaster11ClockPolPhaE+0x19c>)
 8001be4:	605a      	str	r2, [r3, #4]
      RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8001be6:	4b57      	ldr	r3, [pc, #348]	@ (8001d44 <_ZN9EmbSysLib2Hw13SPImaster_McuC1ENS1_6SPI_IDENS1_12SPI_BaudrateENS0_9SPImaster11ClockPolPhaE+0x1a0>)
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	4a56      	ldr	r2, [pc, #344]	@ (8001d44 <_ZN9EmbSysLib2Hw13SPImaster_McuC1ENS1_6SPI_IDENS1_12SPI_BaudrateENS0_9SPImaster11ClockPolPhaE+0x1a0>)
 8001bec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bf0:	6213      	str	r3, [r2, #32]
      PinConfig::set( PinConfig::SPI1_SCK,  PinConfig::MEDIUM_SPEED );
 8001bf2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001bf6:	2056      	movs	r0, #86	@ 0x56
 8001bf8:	f7ff fc60 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::SPI1_MISO );
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	2053      	movs	r0, #83	@ 0x53
 8001c00:	f7ff fc5c 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::SPI1_MOSI );
 8001c04:	2100      	movs	r1, #0
 8001c06:	2054      	movs	r0, #84	@ 0x54
 8001c08:	f7ff fc58 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::SPI1_NSS  );
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	2055      	movs	r0, #85	@ 0x55
 8001c10:	f7ff fc54 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      break;
 8001c14:	e036      	b.n	8001c84 <_ZN9EmbSysLib2Hw13SPImaster_McuC1ENS1_6SPI_IDENS1_12SPI_BaudrateENS0_9SPImaster11ClockPolPhaE+0xe0>

    case SPI_2:
      ptr           = SPI2;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a4b      	ldr	r2, [pc, #300]	@ (8001d48 <_ZN9EmbSysLib2Hw13SPImaster_McuC1ENS1_6SPI_IDENS1_12SPI_BaudrateENS0_9SPImaster11ClockPolPhaE+0x1a4>)
 8001c1a:	605a      	str	r2, [r3, #4]
      RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8001c1c:	4b49      	ldr	r3, [pc, #292]	@ (8001d44 <_ZN9EmbSysLib2Hw13SPImaster_McuC1ENS1_6SPI_IDENS1_12SPI_BaudrateENS0_9SPImaster11ClockPolPhaE+0x1a0>)
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c20:	4a48      	ldr	r2, [pc, #288]	@ (8001d44 <_ZN9EmbSysLib2Hw13SPImaster_McuC1ENS1_6SPI_IDENS1_12SPI_BaudrateENS0_9SPImaster11ClockPolPhaE+0x1a0>)
 8001c22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c26:	6253      	str	r3, [r2, #36]	@ 0x24
      PinConfig::set( PinConfig::SPI2_SCK,  PinConfig::MEDIUM_SPEED  );
 8001c28:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c2c:	205a      	movs	r0, #90	@ 0x5a
 8001c2e:	f7ff fc45 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::SPI2_MISO );
 8001c32:	2100      	movs	r1, #0
 8001c34:	2057      	movs	r0, #87	@ 0x57
 8001c36:	f7ff fc41 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::SPI2_MOSI );
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	2058      	movs	r0, #88	@ 0x58
 8001c3e:	f7ff fc3d 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::SPI2_NSS  );
 8001c42:	2100      	movs	r1, #0
 8001c44:	2059      	movs	r0, #89	@ 0x59
 8001c46:	f7ff fc39 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      break;
 8001c4a:	e01b      	b.n	8001c84 <_ZN9EmbSysLib2Hw13SPImaster_McuC1ENS1_6SPI_IDENS1_12SPI_BaudrateENS0_9SPImaster11ClockPolPhaE+0xe0>

    case SPI_3:
      ptr           = SPI3;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a3f      	ldr	r2, [pc, #252]	@ (8001d4c <_ZN9EmbSysLib2Hw13SPImaster_McuC1ENS1_6SPI_IDENS1_12SPI_BaudrateENS0_9SPImaster11ClockPolPhaE+0x1a8>)
 8001c50:	605a      	str	r2, [r3, #4]
      RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 8001c52:	4b3c      	ldr	r3, [pc, #240]	@ (8001d44 <_ZN9EmbSysLib2Hw13SPImaster_McuC1ENS1_6SPI_IDENS1_12SPI_BaudrateENS0_9SPImaster11ClockPolPhaE+0x1a0>)
 8001c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c56:	4a3b      	ldr	r2, [pc, #236]	@ (8001d44 <_ZN9EmbSysLib2Hw13SPImaster_McuC1ENS1_6SPI_IDENS1_12SPI_BaudrateENS0_9SPImaster11ClockPolPhaE+0x1a0>)
 8001c58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c5c:	6253      	str	r3, [r2, #36]	@ 0x24
      PinConfig::set( PinConfig::SPI3_SCK,  PinConfig::MEDIUM_SPEED  );
 8001c5e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c62:	205e      	movs	r0, #94	@ 0x5e
 8001c64:	f7ff fc2a 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::SPI3_MISO );
 8001c68:	2100      	movs	r1, #0
 8001c6a:	205b      	movs	r0, #91	@ 0x5b
 8001c6c:	f7ff fc26 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::SPI3_MOSI );
 8001c70:	2100      	movs	r1, #0
 8001c72:	205c      	movs	r0, #92	@ 0x5c
 8001c74:	f7ff fc22 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::SPI3_NSS  );
 8001c78:	2100      	movs	r1, #0
 8001c7a:	205d      	movs	r0, #93	@ 0x5d
 8001c7c:	f7ff fc1e 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      break;
 8001c80:	e000      	b.n	8001c84 <_ZN9EmbSysLib2Hw13SPImaster_McuC1ENS1_6SPI_IDENS1_12SPI_BaudrateENS0_9SPImaster11ClockPolPhaE+0xe0>
      break;
 8001c82:	bf00      	nop
  }

  WORD br;
  
  switch( baudrate )
 8001c84:	78bb      	ldrb	r3, [r7, #2]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	2b04      	cmp	r3, #4
 8001c8a:	d80d      	bhi.n	8001ca8 <_ZN9EmbSysLib2Hw13SPImaster_McuC1ENS1_6SPI_IDENS1_12SPI_BaudrateENS0_9SPImaster11ClockPolPhaE+0x104>
 8001c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8001c94 <_ZN9EmbSysLib2Hw13SPImaster_McuC1ENS1_6SPI_IDENS1_12SPI_BaudrateENS0_9SPImaster11ClockPolPhaE+0xf0>)
 8001c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c92:	bf00      	nop
 8001c94:	08001caf 	.word	0x08001caf
 8001c98:	08001cb5 	.word	0x08001cb5
 8001c9c:	08001cbb 	.word	0x08001cbb
 8001ca0:	08001cc1 	.word	0x08001cc1
 8001ca4:	08001cc7 	.word	0x08001cc7
  {
    default:
    // Baud rate control, prescaler: clock rate = PCLK_SPI / 2^(br+1)
    // Valid for PCLK_SPI = 32MHz
    case CR_250kHz:  br = 6; /* 32MHz/128 */ break;
 8001ca8:	2306      	movs	r3, #6
 8001caa:	81fb      	strh	r3, [r7, #14]
 8001cac:	e00e      	b.n	8001ccc <_ZN9EmbSysLib2Hw13SPImaster_McuC1ENS1_6SPI_IDENS1_12SPI_BaudrateENS0_9SPImaster11ClockPolPhaE+0x128>
    case CR_500kHz:  br = 5; /* 32MHz/64  */ break;
 8001cae:	2305      	movs	r3, #5
 8001cb0:	81fb      	strh	r3, [r7, #14]
 8001cb2:	e00b      	b.n	8001ccc <_ZN9EmbSysLib2Hw13SPImaster_McuC1ENS1_6SPI_IDENS1_12SPI_BaudrateENS0_9SPImaster11ClockPolPhaE+0x128>
    case CR_1000kHz: br = 4; /* 32MHz/32  */ break;
 8001cb4:	2304      	movs	r3, #4
 8001cb6:	81fb      	strh	r3, [r7, #14]
 8001cb8:	e008      	b.n	8001ccc <_ZN9EmbSysLib2Hw13SPImaster_McuC1ENS1_6SPI_IDENS1_12SPI_BaudrateENS0_9SPImaster11ClockPolPhaE+0x128>
    case CR_2000kHz: br = 3; /* 32MHz/16  */ break;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	81fb      	strh	r3, [r7, #14]
 8001cbe:	e005      	b.n	8001ccc <_ZN9EmbSysLib2Hw13SPImaster_McuC1ENS1_6SPI_IDENS1_12SPI_BaudrateENS0_9SPImaster11ClockPolPhaE+0x128>
    case CR_4000kHz: br = 2; /* 32MHz/8   */ break;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	81fb      	strh	r3, [r7, #14]
 8001cc4:	e002      	b.n	8001ccc <_ZN9EmbSysLib2Hw13SPImaster_McuC1ENS1_6SPI_IDENS1_12SPI_BaudrateENS0_9SPImaster11ClockPolPhaE+0x128>
    case CR_8000kHz: br = 1; /* 32MHz/4   */ break;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	81fb      	strh	r3, [r7, #14]
 8001cca:	bf00      	nop
  } 

  ptr->CR2 |=  !SPI_CR2_FRF       // Frame format: Motorola
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	889b      	ldrh	r3, [r3, #4]
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f042 0204 	orr.w	r2, r2, #4
 8001cdc:	b292      	uxth	r2, r2
 8001cde:	809a      	strh	r2, [r3, #4]
  ptr->CR1  =  !SPI_CR1_DFF       // Data frame format: 8-bit
             | !SPI_CR1_SSM       // Slave management: SW
             |  SPI_CR1_SSI       //
             |  SPI_CR1_LSBFIRST  // LSB first: disable
             | !SPI_CR1_SPE       // SPI disable
             |  (br<<3)           // Baud rate
 8001ce0:	89fb      	ldrh	r3, [r7, #14]
 8001ce2:	00db      	lsls	r3, r3, #3
             |  SPI_CR1_MSTR      // Master mode
 8001ce4:	b21b      	sxth	r3, r3
 8001ce6:	f443 73c2 	orr.w	r3, r3, #388	@ 0x184
 8001cea:	b21a      	sxth	r2, r3
             |  ((clockPolPha & 0x01)?SPI_CR1_CPOL:0)
 8001cec:	787b      	ldrb	r3, [r7, #1]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	b21b      	sxth	r3, r3
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	b21b      	sxth	r3, r3
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	b21a      	sxth	r2, r3
             |  ((clockPolPha & 0x10)?SPI_CR1_CPHA:0);
 8001cfc:	787b      	ldrb	r3, [r7, #1]
 8001cfe:	111b      	asrs	r3, r3, #4
 8001d00:	b21b      	sxth	r3, r3
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	b21b      	sxth	r3, r3
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	b21a      	sxth	r2, r3
  ptr->CR1  =  !SPI_CR1_DFF       // Data frame format: 8-bit
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
             |  ((clockPolPha & 0x10)?SPI_CR1_CPHA:0);
 8001d10:	b292      	uxth	r2, r2
  ptr->CR1  =  !SPI_CR1_DFF       // Data frame format: 8-bit
 8001d12:	801a      	strh	r2, [r3, #0]

  ptr->CR1 |= SPI_CR1_SPE;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	881b      	ldrh	r3, [r3, #0]
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d24:	b292      	uxth	r2, r2
 8001d26:	801a      	strh	r2, [r3, #0]

  // Dummy-Read to push SCK to high
  transceiveByte( 0x00 );
 8001d28:	2100      	movs	r1, #0
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f810 	bl	8001d50 <_ZN9EmbSysLib2Hw13SPImaster_Mcu14transceiveByteEh>
}
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	080066e8 	.word	0x080066e8
 8001d40:	40013000 	.word	0x40013000
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40003800 	.word	0x40003800
 8001d4c:	40003c00 	.word	0x40003c00

08001d50 <_ZN9EmbSysLib2Hw13SPImaster_Mcu14transceiveByteEh>:

//-------------------------------------------------------------------
BYTE SPImaster_Mcu::transceiveByte( BYTE data )
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	70fb      	strb	r3, [r7, #3]
  volatile BYTE x=0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	73fb      	strb	r3, [r7, #15]
  volatile BYTE ret=0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	73bb      	strb	r3, [r7, #14]

  // wait until transmission buffer empty
  while( !(ptr->SR & SPI_SR_TXE) )
 8001d64:	e000      	b.n	8001d68 <_ZN9EmbSysLib2Hw13SPImaster_Mcu14transceiveByteEh+0x18>
  {
    asm("NOP");
 8001d66:	bf00      	nop
  while( !(ptr->SR & SPI_SR_TXE) )
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	891b      	ldrh	r3, [r3, #8]
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	bf0c      	ite	eq
 8001d78:	2301      	moveq	r3, #1
 8001d7a:	2300      	movne	r3, #0
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f1      	bne.n	8001d66 <_ZN9EmbSysLib2Hw13SPImaster_Mcu14transceiveByteEh+0x16>
  };

  // start transmission
  ptr->DR = data;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	78fa      	ldrb	r2, [r7, #3]
 8001d88:	b292      	uxth	r2, r2
 8001d8a:	819a      	strh	r2, [r3, #12]

  // wait until transmission completed
  while( !(ptr->SR & SPI_SR_RXNE))
 8001d8c:	e000      	b.n	8001d90 <_ZN9EmbSysLib2Hw13SPImaster_Mcu14transceiveByteEh+0x40>
  {
    asm("NOP");
 8001d8e:	bf00      	nop
  while( !(ptr->SR & SPI_SR_RXNE))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	891b      	ldrh	r3, [r3, #8]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	bf0c      	ite	eq
 8001da0:	2301      	moveq	r3, #1
 8001da2:	2300      	movne	r3, #0
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1f1      	bne.n	8001d8e <_ZN9EmbSysLib2Hw13SPImaster_Mcu14transceiveByteEh+0x3e>
  };

  ret = ptr->DR;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	899b      	ldrh	r3, [r3, #12]
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	73bb      	strb	r3, [r7, #14]
  // wait until data received
  while( (ptr->SR & SPI_SR_RXNE) )
 8001db6:	e005      	b.n	8001dc4 <_ZN9EmbSysLib2Hw13SPImaster_Mcu14transceiveByteEh+0x74>
  {
     x = ptr->DR; // dummy read
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	899b      	ldrh	r3, [r3, #12]
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	73fb      	strb	r3, [r7, #15]
  while( (ptr->SR & SPI_SR_RXNE) )
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	891b      	ldrh	r3, [r3, #8]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	bf14      	ite	ne
 8001dd4:	2301      	movne	r3, #1
 8001dd6:	2300      	moveq	r3, #0
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1ec      	bne.n	8001db8 <_ZN9EmbSysLib2Hw13SPImaster_Mcu14transceiveByteEh+0x68>
  }

  return( ret );
 8001dde:	7bbb      	ldrb	r3, [r7, #14]
 8001de0:	b2db      	uxtb	r3, r3
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr
 8001dec:	0000      	movs	r0, r0
	...

08001df0 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm>:
Timer_Mcu *Timer_Mcu::timerPtr_9  = 0;
Timer_Mcu *Timer_Mcu::timerPtr_10 = 0;
Timer_Mcu *Timer_Mcu::timerPtr_11 = 0;

//-------------------------------------------------------------------
Timer_Mcu::Timer_Mcu( TimerId timerIdIn,
 8001df0:	b5b0      	push	{r4, r5, r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	607a      	str	r2, [r7, #4]
 8001dfc:	72fb      	strb	r3, [r7, #11]
                      DWORD   cycleTimeIn )

: Timer( ReportID_Hw::Module::TIMER_MCU )
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2130      	movs	r1, #48	@ 0x30
 8001e02:	4618      	mov	r0, r3
 8001e04:	f001 f8f6 	bl	8002ff4 <_ZN9EmbSysLib2Hw5TimerC1Et>
 8001e08:	4a99      	ldr	r2, [pc, #612]	@ (8002070 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x280>)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	601a      	str	r2, [r3, #0]

{
  timerId = timerIdIn;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	7afa      	ldrb	r2, [r7, #11]
 8001e12:	751a      	strb	r2, [r3, #20]

  switch( timerId )
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	7d1b      	ldrb	r3, [r3, #20]
 8001e18:	2b08      	cmp	r3, #8
 8001e1a:	f200 80a6 	bhi.w	8001f6a <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x17a>
 8001e1e:	a201      	add	r2, pc, #4	@ (adr r2, 8001e24 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x34>)
 8001e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e24:	08001e49 	.word	0x08001e49
 8001e28:	08001e6b 	.word	0x08001e6b
 8001e2c:	08001e8b 	.word	0x08001e8b
 8001e30:	08001eab 	.word	0x08001eab
 8001e34:	08001ecb 	.word	0x08001ecb
 8001e38:	08001eeb 	.word	0x08001eeb
 8001e3c:	08001f0b 	.word	0x08001f0b
 8001e40:	08001f2b 	.word	0x08001f2b
 8001e44:	08001f4b 	.word	0x08001f4b
  {
    case TIM_2:
      ptr           = (TIM_TypeDef*)TIM2_BASE;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e4e:	619a      	str	r2, [r3, #24]
      timerPtr_2    = this;
 8001e50:	4a88      	ldr	r2, [pc, #544]	@ (8002074 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x284>)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001e56:	4b88      	ldr	r3, [pc, #544]	@ (8002078 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x288>)
 8001e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5a:	4a87      	ldr	r2, [pc, #540]	@ (8002078 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x288>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	6253      	str	r3, [r2, #36]	@ 0x24
      NVIC_EnableIRQ( TIM2_IRQn );
 8001e62:	201c      	movs	r0, #28
 8001e64:	f7ff f88e 	bl	8000f84 <__NVIC_EnableIRQ>
      break;
 8001e68:	e086      	b.n	8001f78 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x188>

    case TIM_3:
      ptr           = (TIM_TypeDef*)TIM3_BASE;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	4a83      	ldr	r2, [pc, #524]	@ (800207c <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x28c>)
 8001e6e:	619a      	str	r2, [r3, #24]
      timerPtr_3    = this;
 8001e70:	4a83      	ldr	r2, [pc, #524]	@ (8002080 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x290>)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001e76:	4b80      	ldr	r3, [pc, #512]	@ (8002078 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x288>)
 8001e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7a:	4a7f      	ldr	r2, [pc, #508]	@ (8002078 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x288>)
 8001e7c:	f043 0302 	orr.w	r3, r3, #2
 8001e80:	6253      	str	r3, [r2, #36]	@ 0x24
      NVIC_EnableIRQ( TIM3_IRQn );
 8001e82:	201d      	movs	r0, #29
 8001e84:	f7ff f87e 	bl	8000f84 <__NVIC_EnableIRQ>
      break;
 8001e88:	e076      	b.n	8001f78 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x188>

    case TIM_4:
      ptr           = (TIM_TypeDef*)TIM4_BASE;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	4a7d      	ldr	r2, [pc, #500]	@ (8002084 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x294>)
 8001e8e:	619a      	str	r2, [r3, #24]
      timerPtr_4    = this;
 8001e90:	4a7d      	ldr	r2, [pc, #500]	@ (8002088 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x298>)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8001e96:	4b78      	ldr	r3, [pc, #480]	@ (8002078 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x288>)
 8001e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9a:	4a77      	ldr	r2, [pc, #476]	@ (8002078 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x288>)
 8001e9c:	f043 0304 	orr.w	r3, r3, #4
 8001ea0:	6253      	str	r3, [r2, #36]	@ 0x24
      NVIC_EnableIRQ( TIM4_IRQn );
 8001ea2:	201e      	movs	r0, #30
 8001ea4:	f7ff f86e 	bl	8000f84 <__NVIC_EnableIRQ>
      break;
 8001ea8:	e066      	b.n	8001f78 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x188>

    case TIM_5:
      ptr           = (TIM_TypeDef*)TIM5_BASE;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	4a77      	ldr	r2, [pc, #476]	@ (800208c <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x29c>)
 8001eae:	619a      	str	r2, [r3, #24]
      timerPtr_5    = this;
 8001eb0:	4a77      	ldr	r2, [pc, #476]	@ (8002090 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2a0>)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8001eb6:	4b70      	ldr	r3, [pc, #448]	@ (8002078 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x288>)
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eba:	4a6f      	ldr	r2, [pc, #444]	@ (8002078 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x288>)
 8001ebc:	f043 0308 	orr.w	r3, r3, #8
 8001ec0:	6253      	str	r3, [r2, #36]	@ 0x24
      NVIC_EnableIRQ( TIM5_IRQn );
 8001ec2:	202e      	movs	r0, #46	@ 0x2e
 8001ec4:	f7ff f85e 	bl	8000f84 <__NVIC_EnableIRQ>
      break;
 8001ec8:	e056      	b.n	8001f78 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x188>

    case TIM_6:
      ptr           = (TIM_TypeDef*)TIM6_BASE;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	4a71      	ldr	r2, [pc, #452]	@ (8002094 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2a4>)
 8001ece:	619a      	str	r2, [r3, #24]
      timerPtr_6    = this;
 8001ed0:	4a71      	ldr	r2, [pc, #452]	@ (8002098 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2a8>)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 8001ed6:	4b68      	ldr	r3, [pc, #416]	@ (8002078 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x288>)
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eda:	4a67      	ldr	r2, [pc, #412]	@ (8002078 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x288>)
 8001edc:	f043 0310 	orr.w	r3, r3, #16
 8001ee0:	6253      	str	r3, [r2, #36]	@ 0x24
      NVIC_EnableIRQ( TIM6_IRQn );
 8001ee2:	202b      	movs	r0, #43	@ 0x2b
 8001ee4:	f7ff f84e 	bl	8000f84 <__NVIC_EnableIRQ>
      break;
 8001ee8:	e046      	b.n	8001f78 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x188>

    case TIM_7:
      ptr           = (TIM_TypeDef*)TIM7_BASE;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	4a6b      	ldr	r2, [pc, #428]	@ (800209c <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2ac>)
 8001eee:	619a      	str	r2, [r3, #24]
      timerPtr_7    = this;
 8001ef0:	4a6b      	ldr	r2, [pc, #428]	@ (80020a0 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2b0>)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_TIM7EN;
 8001ef6:	4b60      	ldr	r3, [pc, #384]	@ (8002078 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x288>)
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efa:	4a5f      	ldr	r2, [pc, #380]	@ (8002078 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x288>)
 8001efc:	f043 0320 	orr.w	r3, r3, #32
 8001f00:	6253      	str	r3, [r2, #36]	@ 0x24
      NVIC_EnableIRQ( TIM7_IRQn );
 8001f02:	202c      	movs	r0, #44	@ 0x2c
 8001f04:	f7ff f83e 	bl	8000f84 <__NVIC_EnableIRQ>
      break;
 8001f08:	e036      	b.n	8001f78 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x188>

    case TIM_9:
      ptr           = (TIM_TypeDef*)TIM9_BASE;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	4a65      	ldr	r2, [pc, #404]	@ (80020a4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2b4>)
 8001f0e:	619a      	str	r2, [r3, #24]
      timerPtr_9    = this;
 8001f10:	4a65      	ldr	r2, [pc, #404]	@ (80020a8 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2b8>)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6013      	str	r3, [r2, #0]
      RCC->APB2ENR |= RCC_APB2ENR_TIM9EN;
 8001f16:	4b58      	ldr	r3, [pc, #352]	@ (8002078 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x288>)
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	4a57      	ldr	r2, [pc, #348]	@ (8002078 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x288>)
 8001f1c:	f043 0304 	orr.w	r3, r3, #4
 8001f20:	6213      	str	r3, [r2, #32]
      NVIC_EnableIRQ( TIM9_IRQn );
 8001f22:	2019      	movs	r0, #25
 8001f24:	f7ff f82e 	bl	8000f84 <__NVIC_EnableIRQ>
      break;
 8001f28:	e026      	b.n	8001f78 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x188>

    case TIM_10:
      ptr           = (TIM_TypeDef*)TIM10_BASE;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	4a5f      	ldr	r2, [pc, #380]	@ (80020ac <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2bc>)
 8001f2e:	619a      	str	r2, [r3, #24]
      timerPtr_10   = this;
 8001f30:	4a5f      	ldr	r2, [pc, #380]	@ (80020b0 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2c0>)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6013      	str	r3, [r2, #0]
      RCC->APB2ENR |= RCC_APB2ENR_TIM10EN;
 8001f36:	4b50      	ldr	r3, [pc, #320]	@ (8002078 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x288>)
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	4a4f      	ldr	r2, [pc, #316]	@ (8002078 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x288>)
 8001f3c:	f043 0308 	orr.w	r3, r3, #8
 8001f40:	6213      	str	r3, [r2, #32]
      NVIC_EnableIRQ( TIM10_IRQn );
 8001f42:	201a      	movs	r0, #26
 8001f44:	f7ff f81e 	bl	8000f84 <__NVIC_EnableIRQ>
      break;
 8001f48:	e016      	b.n	8001f78 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x188>

    case TIM_11:
      ptr           = (TIM_TypeDef*)TIM11_BASE;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	4a59      	ldr	r2, [pc, #356]	@ (80020b4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2c4>)
 8001f4e:	619a      	str	r2, [r3, #24]
      timerPtr_11    = this;
 8001f50:	4a59      	ldr	r2, [pc, #356]	@ (80020b8 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2c8>)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6013      	str	r3, [r2, #0]
      RCC->APB2ENR |= RCC_APB2ENR_TIM11EN;
 8001f56:	4b48      	ldr	r3, [pc, #288]	@ (8002078 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x288>)
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	4a47      	ldr	r2, [pc, #284]	@ (8002078 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x288>)
 8001f5c:	f043 0310 	orr.w	r3, r3, #16
 8001f60:	6213      	str	r3, [r2, #32]
      NVIC_EnableIRQ( TIM11_IRQn );
 8001f62:	201b      	movs	r0, #27
 8001f64:	f7ff f80e 	bl	8000f84 <__NVIC_EnableIRQ>
      break;
 8001f68:	e006      	b.n	8001f78 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x188>

    default:
      report.error( ReportID_Hw::Event::WRONG_ID );
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	330c      	adds	r3, #12
 8001f6e:	2107      	movs	r1, #7
 8001f70:	4618      	mov	r0, r3
 8001f72:	f000 fd57 	bl	8002a24 <_ZN9EmbSysLib3Std6Report5errorEt>
      break;
 8001f76:	bf00      	nop
  }

  // calculate tics and prescaler
  float rawTics = (float)system_PCLK_TIM * cycleTimeIn * 1E-6f;
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7fe fdc5 	bl	8000b08 <__aeabi_ui2f>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	494e      	ldr	r1, [pc, #312]	@ (80020bc <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe fe18 	bl	8000bb8 <__aeabi_fmul>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	494d      	ldr	r1, [pc, #308]	@ (80020c0 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2d0>)
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7fe fe13 	bl	8000bb8 <__aeabi_fmul>
 8001f92:	4603      	mov	r3, r0
 8001f94:	617b      	str	r3, [r7, #20]
  DWORD ps      = 1;
 8001f96:	2301      	movs	r3, #1
 8001f98:	613b      	str	r3, [r7, #16]
  while( rawTics > 0x10000 ) // tics must be < 16Bits
 8001f9a:	e00b      	b.n	8001fb4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x1c4>
  {
    ps      *= 10;
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	613b      	str	r3, [r7, #16]
    rawTics /= 10;
 8001fa8:	4946      	ldr	r1, [pc, #280]	@ (80020c4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2d4>)
 8001faa:	6978      	ldr	r0, [r7, #20]
 8001fac:	f7fe feb8 	bl	8000d20 <__aeabi_fdiv>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	617b      	str	r3, [r7, #20]
  while( rawTics > 0x10000 ) // tics must be < 16Bits
 8001fb4:	f04f 418f 	mov.w	r1, #1199570944	@ 0x47800000
 8001fb8:	6978      	ldr	r0, [r7, #20]
 8001fba:	f7fe ffb9 	bl	8000f30 <__aeabi_fcmpgt>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1eb      	bne.n	8001f9c <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x1ac>
  }

  tics      = (DWORD)rawTics;
 8001fc4:	6978      	ldr	r0, [r7, #20]
 8001fc6:	f7fe ffbd 	bl	8000f44 <__aeabi_f2uiz>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	611a      	str	r2, [r3, #16]
  cycleTime = (DWORD)(1E6 * tics * ps / (float)system_PCLK_TIM);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe fa35 	bl	8000444 <__aeabi_ui2d>
 8001fda:	a321      	add	r3, pc, #132	@ (adr r3, 8002060 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x270>)
 8001fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe0:	f7fe faaa 	bl	8000538 <__aeabi_dmul>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4614      	mov	r4, r2
 8001fea:	461d      	mov	r5, r3
 8001fec:	6938      	ldr	r0, [r7, #16]
 8001fee:	f7fe fa29 	bl	8000444 <__aeabi_ui2d>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	4620      	mov	r0, r4
 8001ff8:	4629      	mov	r1, r5
 8001ffa:	f7fe fa9d 	bl	8000538 <__aeabi_dmul>
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4610      	mov	r0, r2
 8002004:	4619      	mov	r1, r3
 8002006:	a318      	add	r3, pc, #96	@ (adr r3, 8002068 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x278>)
 8002008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200c:	f7fe fbbe 	bl	800078c <__aeabi_ddiv>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	4610      	mov	r0, r2
 8002016:	4619      	mov	r1, r3
 8002018:	f7fe fca0 	bl	800095c <__aeabi_d2uiz>
 800201c:	4602      	mov	r2, r0
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	605a      	str	r2, [r3, #4]

  ptr->CR1  = TIM_CR1_CEN;  // counter enable
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	2201      	movs	r2, #1
 8002028:	801a      	strh	r2, [r3, #0]
  ptr->DIER = TIM_DIER_UIE; // update interrupt enable
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	2201      	movs	r2, #1
 8002030:	819a      	strh	r2, [r3, #12]
  ptr->EGR  = TIM_EGR_UG;   // re-initialize timer
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	2201      	movs	r2, #1
 8002038:	829a      	strh	r2, [r3, #20]
  ptr->PSC  = ps   - 1;
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	b29a      	uxth	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	3a01      	subs	r2, #1
 8002044:	b292      	uxth	r2, r2
 8002046:	851a      	strh	r2, [r3, #40]	@ 0x28
  ptr->ARR  = tics - 1;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	691a      	ldr	r2, [r3, #16]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	3a01      	subs	r2, #1
 8002052:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4618      	mov	r0, r3
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bdb0      	pop	{r4, r5, r7, pc}
 800205e:	bf00      	nop
 8002060:	00000000 	.word	0x00000000
 8002064:	412e8480 	.word	0x412e8480
 8002068:	00000000 	.word	0x00000000
 800206c:	417e8480 	.word	0x417e8480
 8002070:	080066cc 	.word	0x080066cc
 8002074:	200000b4 	.word	0x200000b4
 8002078:	40023800 	.word	0x40023800
 800207c:	40000400 	.word	0x40000400
 8002080:	200000b8 	.word	0x200000b8
 8002084:	40000800 	.word	0x40000800
 8002088:	200000bc 	.word	0x200000bc
 800208c:	40000c00 	.word	0x40000c00
 8002090:	200000c0 	.word	0x200000c0
 8002094:	40001000 	.word	0x40001000
 8002098:	200000c4 	.word	0x200000c4
 800209c:	40001400 	.word	0x40001400
 80020a0:	200000c8 	.word	0x200000c8
 80020a4:	40010800 	.word	0x40010800
 80020a8:	200000cc 	.word	0x200000cc
 80020ac:	40010c00 	.word	0x40010c00
 80020b0:	200000d0 	.word	0x200000d0
 80020b4:	40011000 	.word	0x40011000
 80020b8:	200000d4 	.word	0x200000d4
 80020bc:	4bf42400 	.word	0x4bf42400
 80020c0:	358637bd 	.word	0x358637bd
 80020c4:	41200000 	.word	0x41200000

080020c8 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE>:

//-------------------------------------------------------------------
void Timer_Mcu::enablePWM( BYTE channel, Mode polarity )
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	460b      	mov	r3, r1
 80020d2:	70fb      	strb	r3, [r7, #3]
 80020d4:	4613      	mov	r3, r2
 80020d6:	70bb      	strb	r3, [r7, #2]
  switch( timerId )
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	7d1b      	ldrb	r3, [r3, #20]
 80020dc:	2b08      	cmp	r3, #8
 80020de:	f200 80e0 	bhi.w	80022a2 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x1da>
 80020e2:	a201      	add	r2, pc, #4	@ (adr r2, 80020e8 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x20>)
 80020e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e8:	0800210d 	.word	0x0800210d
 80020ec:	08002161 	.word	0x08002161
 80020f0:	080021b5 	.word	0x080021b5
 80020f4:	08002209 	.word	0x08002209
 80020f8:	08002217 	.word	0x08002217
 80020fc:	08002225 	.word	0x08002225
 8002100:	08002233 	.word	0x08002233
 8002104:	08002263 	.word	0x08002263
 8002108:	08002283 	.word	0x08002283
  {
    case TIM_2:
      switch( channel )
 800210c:	78fb      	ldrb	r3, [r7, #3]
 800210e:	2b03      	cmp	r3, #3
 8002110:	d81e      	bhi.n	8002150 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x88>
 8002112:	a201      	add	r2, pc, #4	@ (adr r2, 8002118 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x50>)
 8002114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002118:	08002129 	.word	0x08002129
 800211c:	08002133 	.word	0x08002133
 8002120:	0800213d 	.word	0x0800213d
 8002124:	08002147 	.word	0x08002147
      {
        case 0: PinConfig::set( PinConfig::TIM2_CH1 ); break;
 8002128:	2100      	movs	r1, #0
 800212a:	2068      	movs	r0, #104	@ 0x68
 800212c:	f7ff f9c6 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8002130:	e015      	b.n	800215e <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x96>
        case 1: PinConfig::set( PinConfig::TIM2_CH2 ); break;
 8002132:	2100      	movs	r1, #0
 8002134:	2069      	movs	r0, #105	@ 0x69
 8002136:	f7ff f9c1 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 800213a:	e010      	b.n	800215e <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x96>
        case 2: PinConfig::set( PinConfig::TIM2_CH3 ); break;
 800213c:	2100      	movs	r1, #0
 800213e:	206a      	movs	r0, #106	@ 0x6a
 8002140:	f7ff f9bc 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8002144:	e00b      	b.n	800215e <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x96>
        case 3: PinConfig::set( PinConfig::TIM2_CH4 ); break;
 8002146:	2100      	movs	r1, #0
 8002148:	206b      	movs	r0, #107	@ 0x6b
 800214a:	f7ff f9b7 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 800214e:	e006      	b.n	800215e <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x96>
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	330c      	adds	r3, #12
 8002154:	2108      	movs	r1, #8
 8002156:	4618      	mov	r0, r3
 8002158:	f000 fc64 	bl	8002a24 <_ZN9EmbSysLib3Std6Report5errorEt>
      }
      break;
 800215c:	e0a8      	b.n	80022b0 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x1e8>
 800215e:	e0a7      	b.n	80022b0 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x1e8>

    case TIM_3:
      switch( channel )
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	2b03      	cmp	r3, #3
 8002164:	d81e      	bhi.n	80021a4 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0xdc>
 8002166:	a201      	add	r2, pc, #4	@ (adr r2, 800216c <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0xa4>)
 8002168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800216c:	0800217d 	.word	0x0800217d
 8002170:	08002187 	.word	0x08002187
 8002174:	08002191 	.word	0x08002191
 8002178:	0800219b 	.word	0x0800219b
      {
        case 0: PinConfig::set( PinConfig::TIM3_CH1 ); break;
 800217c:	2100      	movs	r1, #0
 800217e:	206c      	movs	r0, #108	@ 0x6c
 8002180:	f7ff f99c 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8002184:	e015      	b.n	80021b2 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0xea>
        case 1: PinConfig::set( PinConfig::TIM3_CH2 ); break;
 8002186:	2100      	movs	r1, #0
 8002188:	206d      	movs	r0, #109	@ 0x6d
 800218a:	f7ff f997 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 800218e:	e010      	b.n	80021b2 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0xea>
        case 2: PinConfig::set( PinConfig::TIM3_CH3 ); break;
 8002190:	2100      	movs	r1, #0
 8002192:	206e      	movs	r0, #110	@ 0x6e
 8002194:	f7ff f992 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8002198:	e00b      	b.n	80021b2 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0xea>
        case 3: PinConfig::set( PinConfig::TIM3_CH4 ); break;
 800219a:	2100      	movs	r1, #0
 800219c:	206f      	movs	r0, #111	@ 0x6f
 800219e:	f7ff f98d 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 80021a2:	e006      	b.n	80021b2 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0xea>
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	330c      	adds	r3, #12
 80021a8:	2108      	movs	r1, #8
 80021aa:	4618      	mov	r0, r3
 80021ac:	f000 fc3a 	bl	8002a24 <_ZN9EmbSysLib3Std6Report5errorEt>
      }
      break;
 80021b0:	e07e      	b.n	80022b0 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x1e8>
 80021b2:	e07d      	b.n	80022b0 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x1e8>

    case TIM_4:
      switch( channel )
 80021b4:	78fb      	ldrb	r3, [r7, #3]
 80021b6:	2b03      	cmp	r3, #3
 80021b8:	d81e      	bhi.n	80021f8 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x130>
 80021ba:	a201      	add	r2, pc, #4	@ (adr r2, 80021c0 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0xf8>)
 80021bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c0:	080021d1 	.word	0x080021d1
 80021c4:	080021db 	.word	0x080021db
 80021c8:	080021e5 	.word	0x080021e5
 80021cc:	080021ef 	.word	0x080021ef
      {
        case 0: PinConfig::set( PinConfig::TIM4_CH1 ); break;
 80021d0:	2100      	movs	r1, #0
 80021d2:	2071      	movs	r0, #113	@ 0x71
 80021d4:	f7ff f972 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 80021d8:	e015      	b.n	8002206 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x13e>
        case 1: PinConfig::set( PinConfig::TIM4_CH2 ); break;
 80021da:	2100      	movs	r1, #0
 80021dc:	2072      	movs	r0, #114	@ 0x72
 80021de:	f7ff f96d 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 80021e2:	e010      	b.n	8002206 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x13e>
        case 2: PinConfig::set( PinConfig::TIM4_CH3 ); break;
 80021e4:	2100      	movs	r1, #0
 80021e6:	2073      	movs	r0, #115	@ 0x73
 80021e8:	f7ff f968 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 80021ec:	e00b      	b.n	8002206 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x13e>
        case 3: PinConfig::set( PinConfig::TIM4_CH4 ); break;
 80021ee:	2100      	movs	r1, #0
 80021f0:	2074      	movs	r0, #116	@ 0x74
 80021f2:	f7ff f963 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 80021f6:	e006      	b.n	8002206 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x13e>
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	330c      	adds	r3, #12
 80021fc:	2108      	movs	r1, #8
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 fc10 	bl	8002a24 <_ZN9EmbSysLib3Std6Report5errorEt>
      }
      break;
 8002204:	e054      	b.n	80022b0 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x1e8>
 8002206:	e053      	b.n	80022b0 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x1e8>

    case TIM_5:
      report.error( ReportID_Hw::Event::FUNCTION_NOT_EXECUTED );
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	330c      	adds	r3, #12
 800220c:	2103      	movs	r1, #3
 800220e:	4618      	mov	r0, r3
 8002210:	f000 fc08 	bl	8002a24 <_ZN9EmbSysLib3Std6Report5errorEt>
      break;
 8002214:	e04c      	b.n	80022b0 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x1e8>

    case TIM_6:
      report.error( ReportID_Hw::Event::FUNCTION_NOT_EXECUTED );
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	330c      	adds	r3, #12
 800221a:	2103      	movs	r1, #3
 800221c:	4618      	mov	r0, r3
 800221e:	f000 fc01 	bl	8002a24 <_ZN9EmbSysLib3Std6Report5errorEt>
      break;
 8002222:	e045      	b.n	80022b0 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x1e8>

    case TIM_7:
      report.error( ReportID_Hw::Event::FUNCTION_NOT_EXECUTED );
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	330c      	adds	r3, #12
 8002228:	2103      	movs	r1, #3
 800222a:	4618      	mov	r0, r3
 800222c:	f000 fbfa 	bl	8002a24 <_ZN9EmbSysLib3Std6Report5errorEt>
      break;
 8002230:	e03e      	b.n	80022b0 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x1e8>

    case TIM_9:
      switch( channel )
 8002232:	78fb      	ldrb	r3, [r7, #3]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d002      	beq.n	800223e <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x176>
 8002238:	2b01      	cmp	r3, #1
 800223a:	d005      	beq.n	8002248 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x180>
 800223c:	e009      	b.n	8002252 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x18a>
      {
        case 0: PinConfig::set( PinConfig::TIM9_CH1 ); break;
 800223e:	2100      	movs	r1, #0
 8002240:	2075      	movs	r0, #117	@ 0x75
 8002242:	f7ff f93b 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8002246:	e00b      	b.n	8002260 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x198>
        case 1: PinConfig::set( PinConfig::TIM9_CH2 ); break;
 8002248:	2100      	movs	r1, #0
 800224a:	2076      	movs	r0, #118	@ 0x76
 800224c:	f7ff f936 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8002250:	e006      	b.n	8002260 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x198>
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	330c      	adds	r3, #12
 8002256:	2108      	movs	r1, #8
 8002258:	4618      	mov	r0, r3
 800225a:	f000 fbe3 	bl	8002a24 <_ZN9EmbSysLib3Std6Report5errorEt>
      }
      break;
 800225e:	e027      	b.n	80022b0 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x1e8>
 8002260:	e026      	b.n	80022b0 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x1e8>

    case TIM_10:
      switch( channel )
 8002262:	78fb      	ldrb	r3, [r7, #3]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d105      	bne.n	8002274 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x1ac>
      {
        case 0: PinConfig::set( PinConfig::TIM10_CH1 ); break;
 8002268:	2100      	movs	r1, #0
 800226a:	2066      	movs	r0, #102	@ 0x66
 800226c:	f7ff f926 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8002270:	bf00      	nop
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
      }
      break;
 8002272:	e01d      	b.n	80022b0 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x1e8>
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	330c      	adds	r3, #12
 8002278:	2108      	movs	r1, #8
 800227a:	4618      	mov	r0, r3
 800227c:	f000 fbd2 	bl	8002a24 <_ZN9EmbSysLib3Std6Report5errorEt>
      break;
 8002280:	e016      	b.n	80022b0 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x1e8>

    case TIM_11:
      switch( channel )
 8002282:	78fb      	ldrb	r3, [r7, #3]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d105      	bne.n	8002294 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x1cc>
      {
        case 0: PinConfig::set( PinConfig::TIM11_CH1 ); break;
 8002288:	2100      	movs	r1, #0
 800228a:	2067      	movs	r0, #103	@ 0x67
 800228c:	f7ff f916 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8002290:	bf00      	nop
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
      }
      break;
 8002292:	e00d      	b.n	80022b0 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x1e8>
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	330c      	adds	r3, #12
 8002298:	2108      	movs	r1, #8
 800229a:	4618      	mov	r0, r3
 800229c:	f000 fbc2 	bl	8002a24 <_ZN9EmbSysLib3Std6Report5errorEt>
      break;
 80022a0:	e006      	b.n	80022b0 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x1e8>

    default:
      report.error( ReportID_Hw::Event::WRONG_ID );
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	330c      	adds	r3, #12
 80022a6:	2107      	movs	r1, #7
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 fbbb 	bl	8002a24 <_ZN9EmbSysLib3Std6Report5errorEt>
      break;
 80022ae:	bf00      	nop
  }

  WORD ccmr =  (7<<4)  // OCxM: PWM-mode 2
 80022b0:	2370      	movs	r3, #112	@ 0x70
 80022b2:	81fb      	strh	r3, [r7, #14]
              |(0<<3); // OCxPE: preload enable

  WORD ccer =  (1<<0)             // CCxE: enable
 80022b4:	78bb      	ldrb	r3, [r7, #2]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x1f6>
 80022ba:	2303      	movs	r3, #3
 80022bc:	e000      	b.n	80022c0 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x1f8>
 80022be:	2301      	movs	r3, #1
 80022c0:	81bb      	strh	r3, [r7, #12]
              |(((polarity==NORMAL)?1:0)<<1);
                                  // CCxP: polarity
                                  //       invers: active high
                                  //       normal: active low

  switch( channel )
 80022c2:	78fb      	ldrb	r3, [r7, #3]
 80022c4:	2b03      	cmp	r3, #3
 80022c6:	d873      	bhi.n	80023b0 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x2e8>
 80022c8:	a201      	add	r2, pc, #4	@ (adr r2, 80022d0 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x208>)
 80022ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ce:	bf00      	nop
 80022d0:	080022e1 	.word	0x080022e1
 80022d4:	0800230b 	.word	0x0800230b
 80022d8:	08002345 	.word	0x08002345
 80022dc:	08002377 	.word	0x08002377
  {
    case 0:
      ptr->CCMR1 |= ccmr;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	8b1b      	ldrh	r3, [r3, #24]
 80022e6:	b299      	uxth	r1, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	89fa      	ldrh	r2, [r7, #14]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	b292      	uxth	r2, r2
 80022f2:	831a      	strh	r2, [r3, #24]
      ptr->CCER  |= ccer;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	8c1b      	ldrh	r3, [r3, #32]
 80022fa:	b299      	uxth	r1, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	89ba      	ldrh	r2, [r7, #12]
 8002302:	430a      	orrs	r2, r1
 8002304:	b292      	uxth	r2, r2
 8002306:	841a      	strh	r2, [r3, #32]
      break;
 8002308:	e059      	b.n	80023be <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x2f6>

    case 1:
      ptr->CCMR1 |= ccmr<<8;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	8b1b      	ldrh	r3, [r3, #24]
 8002310:	b29b      	uxth	r3, r3
 8002312:	b21a      	sxth	r2, r3
 8002314:	89fb      	ldrh	r3, [r7, #14]
 8002316:	021b      	lsls	r3, r3, #8
 8002318:	b21b      	sxth	r3, r3
 800231a:	4313      	orrs	r3, r2
 800231c:	b21a      	sxth	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	b292      	uxth	r2, r2
 8002324:	831a      	strh	r2, [r3, #24]
      ptr->CCER  |= ccer<<4;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	8c1b      	ldrh	r3, [r3, #32]
 800232c:	b29b      	uxth	r3, r3
 800232e:	b21a      	sxth	r2, r3
 8002330:	89bb      	ldrh	r3, [r7, #12]
 8002332:	011b      	lsls	r3, r3, #4
 8002334:	b21b      	sxth	r3, r3
 8002336:	4313      	orrs	r3, r2
 8002338:	b21a      	sxth	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	b292      	uxth	r2, r2
 8002340:	841a      	strh	r2, [r3, #32]
      break;
 8002342:	e03c      	b.n	80023be <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x2f6>

    case 2:
      ptr->CCMR2 |= ccmr;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	8b9b      	ldrh	r3, [r3, #28]
 800234a:	b299      	uxth	r1, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	89fa      	ldrh	r2, [r7, #14]
 8002352:	430a      	orrs	r2, r1
 8002354:	b292      	uxth	r2, r2
 8002356:	839a      	strh	r2, [r3, #28]
      ptr->CCER  |= ccer<<8;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	8c1b      	ldrh	r3, [r3, #32]
 800235e:	b29b      	uxth	r3, r3
 8002360:	b21a      	sxth	r2, r3
 8002362:	89bb      	ldrh	r3, [r7, #12]
 8002364:	021b      	lsls	r3, r3, #8
 8002366:	b21b      	sxth	r3, r3
 8002368:	4313      	orrs	r3, r2
 800236a:	b21a      	sxth	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	b292      	uxth	r2, r2
 8002372:	841a      	strh	r2, [r3, #32]
      break;
 8002374:	e023      	b.n	80023be <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x2f6>

    case 3:
      ptr->CCMR2 |= ccmr<<8;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	8b9b      	ldrh	r3, [r3, #28]
 800237c:	b29b      	uxth	r3, r3
 800237e:	b21a      	sxth	r2, r3
 8002380:	89fb      	ldrh	r3, [r7, #14]
 8002382:	021b      	lsls	r3, r3, #8
 8002384:	b21b      	sxth	r3, r3
 8002386:	4313      	orrs	r3, r2
 8002388:	b21a      	sxth	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	b292      	uxth	r2, r2
 8002390:	839a      	strh	r2, [r3, #28]
      ptr->CCER  |= ccer<<12;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	8c1b      	ldrh	r3, [r3, #32]
 8002398:	b29b      	uxth	r3, r3
 800239a:	b21a      	sxth	r2, r3
 800239c:	89bb      	ldrh	r3, [r7, #12]
 800239e:	031b      	lsls	r3, r3, #12
 80023a0:	b21b      	sxth	r3, r3
 80023a2:	4313      	orrs	r3, r2
 80023a4:	b21a      	sxth	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	b292      	uxth	r2, r2
 80023ac:	841a      	strh	r2, [r3, #32]
      break;
 80023ae:	e006      	b.n	80023be <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x2f6>

    default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	330c      	adds	r3, #12
 80023b4:	2108      	movs	r1, #8
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 fb34 	bl	8002a24 <_ZN9EmbSysLib3Std6Report5errorEt>
      break;
 80023bc:	bf00      	nop
  }
}
 80023be:	bf00      	nop
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop

080023c8 <_ZN9EmbSysLib2Hw9Timer_Mcu6setPWMEht>:

//-------------------------------------------------------------------
void Timer_Mcu::setPWM( BYTE ch, WORD value )
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	70fb      	strb	r3, [r7, #3]
 80023d4:	4613      	mov	r3, r2
 80023d6:	803b      	strh	r3, [r7, #0]
  value = (WORD)((DWORD)value*tics >> 16);
 80023d8:	883b      	ldrh	r3, [r7, #0]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6912      	ldr	r2, [r2, #16]
 80023de:	fb02 f303 	mul.w	r3, r2, r3
 80023e2:	0c1b      	lsrs	r3, r3, #16
 80023e4:	803b      	strh	r3, [r7, #0]

  switch( ch )
 80023e6:	78fb      	ldrb	r3, [r7, #3]
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d81f      	bhi.n	800242c <_ZN9EmbSysLib2Hw9Timer_Mcu6setPWMEht+0x64>
 80023ec:	a201      	add	r2, pc, #4	@ (adr r2, 80023f4 <_ZN9EmbSysLib2Hw9Timer_Mcu6setPWMEht+0x2c>)
 80023ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f2:	bf00      	nop
 80023f4:	08002405 	.word	0x08002405
 80023f8:	0800240f 	.word	0x0800240f
 80023fc:	08002419 	.word	0x08002419
 8002400:	08002423 	.word	0x08002423
  {
    case 0: ptr->CCR1 = value; break;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	883a      	ldrh	r2, [r7, #0]
 800240a:	635a      	str	r2, [r3, #52]	@ 0x34
 800240c:	e015      	b.n	800243a <_ZN9EmbSysLib2Hw9Timer_Mcu6setPWMEht+0x72>
    case 1: ptr->CCR2 = value; break;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	883a      	ldrh	r2, [r7, #0]
 8002414:	639a      	str	r2, [r3, #56]	@ 0x38
 8002416:	e010      	b.n	800243a <_ZN9EmbSysLib2Hw9Timer_Mcu6setPWMEht+0x72>
    case 2: ptr->CCR3 = value; break;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	883a      	ldrh	r2, [r7, #0]
 800241e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002420:	e00b      	b.n	800243a <_ZN9EmbSysLib2Hw9Timer_Mcu6setPWMEht+0x72>
    case 3: ptr->CCR4 = value; break;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	883a      	ldrh	r2, [r7, #0]
 8002428:	641a      	str	r2, [r3, #64]	@ 0x40
 800242a:	e006      	b.n	800243a <_ZN9EmbSysLib2Hw9Timer_Mcu6setPWMEht+0x72>
    default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	330c      	adds	r3, #12
 8002430:	2108      	movs	r1, #8
 8002432:	4618      	mov	r0, r3
 8002434:	f000 faf6 	bl	8002a24 <_ZN9EmbSysLib3Std6Report5errorEt>
      break;
 8002438:	bf00      	nop
  }
}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop

08002444 <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>:

//-------------------------------------------------------------------
void Timer_Mcu::isr(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  ptr->SR = !TIM_SR_TIF;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	2200      	movs	r2, #0
 8002452:	821a      	strh	r2, [r3, #16]
  isrHandler();
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	3310      	adds	r3, #16
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4610      	mov	r0, r2
 8002460:	4798      	blx	r3
}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <TIM2_IRQHandler>:

//-------------------------------------------------------------------
extern "C" {
  void TIM2_IRQHandler(void)
  {
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
    Timer_Mcu::timerPtr_2->isr();
 8002470:	4b03      	ldr	r3, [pc, #12]	@ (8002480 <TIM2_IRQHandler+0x14>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff ffe5 	bl	8002444 <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>
  }
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	200000b4 	.word	0x200000b4

08002484 <TIM3_IRQHandler>:
}

//-------------------------------------------------------------------
extern "C" {
  void TIM3_IRQHandler(void)
  {
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
    Timer_Mcu::timerPtr_3->isr();
 8002488:	4b03      	ldr	r3, [pc, #12]	@ (8002498 <TIM3_IRQHandler+0x14>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff ffd9 	bl	8002444 <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>
  }
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	200000b8 	.word	0x200000b8

0800249c <TIM4_IRQHandler>:
}

//-------------------------------------------------------------------
extern "C" {
  void TIM4_IRQHandler(void)
  {
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
    Timer_Mcu::timerPtr_4->isr();
 80024a0:	4b03      	ldr	r3, [pc, #12]	@ (80024b0 <TIM4_IRQHandler+0x14>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff ffcd 	bl	8002444 <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>
  }
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	200000bc 	.word	0x200000bc

080024b4 <TIM6_IRQHandler>:
}

//-------------------------------------------------------------------
extern "C" {
  void TIM6_IRQHandler(void)
  {
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
    Timer_Mcu::timerPtr_6->isr();
 80024b8:	4b03      	ldr	r3, [pc, #12]	@ (80024c8 <TIM6_IRQHandler+0x14>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff ffc1 	bl	8002444 <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>
  }
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	200000c4 	.word	0x200000c4

080024cc <TIM7_IRQHandler>:
}

//-------------------------------------------------------------------
extern "C" {
  void TIM7_IRQHandler(void)
  {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
    Timer_Mcu::timerPtr_7->isr();
 80024d0:	4b03      	ldr	r3, [pc, #12]	@ (80024e0 <TIM7_IRQHandler+0x14>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff ffb5 	bl	8002444 <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>
  }
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	200000c8 	.word	0x200000c8

080024e4 <TIM9_IRQHandler>:
}

//-------------------------------------------------------------------
extern "C" {
  void TIM9_IRQHandler(void)
  {
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
    Timer_Mcu::timerPtr_9->isr();
 80024e8:	4b03      	ldr	r3, [pc, #12]	@ (80024f8 <TIM9_IRQHandler+0x14>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff ffa9 	bl	8002444 <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>
  }
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	200000cc 	.word	0x200000cc

080024fc <TIM10_IRQHandler>:
}

//-------------------------------------------------------------------
extern "C" {
  void TIM10_IRQHandler(void)
  {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
    Timer_Mcu::timerPtr_10->isr();
 8002500:	4b03      	ldr	r3, [pc, #12]	@ (8002510 <TIM10_IRQHandler+0x14>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff ff9d 	bl	8002444 <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>
  }
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	200000d0 	.word	0x200000d0

08002514 <TIM11_IRQHandler>:
}

//-------------------------------------------------------------------
extern "C" {
  void TIM11_IRQHandler(void)
  {
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
    Timer_Mcu::timerPtr_11->isr();
 8002518:	4b03      	ldr	r3, [pc, #12]	@ (8002528 <TIM11_IRQHandler+0x14>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff ff91 	bl	8002444 <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>
  }
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	200000d4 	.word	0x200000d4

0800252c <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmtt>:
Uart_Mcu *Uart_Mcu::uartPtr_1 = 0;
Uart_Mcu *Uart_Mcu::uartPtr_2 = 0;
Uart_Mcu *Uart_Mcu::uartPtr_3 = 0;

//-------------------------------------------------------------------
Uart_Mcu::Uart_Mcu( USART_Id id,
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	607a      	str	r2, [r7, #4]
 8002536:	461a      	mov	r2, r3
 8002538:	460b      	mov	r3, r1
 800253a:	72fb      	strb	r3, [r7, #11]
 800253c:	4613      	mov	r3, r2
 800253e:	813b      	strh	r3, [r7, #8]
                    DWORD    baud,
                    WORD     sizeRxBuf,
                    WORD     sizeTxBuf )

: Uart( ReportID_Hw::Module::UART_MCU, sizeRxBuf, sizeTxBuf )
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	8b3b      	ldrh	r3, [r7, #24]
 8002544:	893a      	ldrh	r2, [r7, #8]
 8002546:	2120      	movs	r1, #32
 8002548:	f000 fda8 	bl	800309c <_ZN9EmbSysLib2Hw4UartC1Ettt>
 800254c:	4a44      	ldr	r2, [pc, #272]	@ (8002660 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmtt+0x134>)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	601a      	str	r2, [r3, #0]
{
  switch( id )
 8002552:	7afb      	ldrb	r3, [r7, #11]
 8002554:	2b03      	cmp	r3, #3
 8002556:	d036      	beq.n	80025c6 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmtt+0x9a>
 8002558:	2b03      	cmp	r3, #3
 800255a:	dc4c      	bgt.n	80025f6 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmtt+0xca>
 800255c:	2b01      	cmp	r3, #1
 800255e:	d002      	beq.n	8002566 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmtt+0x3a>
 8002560:	2b02      	cmp	r3, #2
 8002562:	d018      	beq.n	8002596 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmtt+0x6a>
 8002564:	e047      	b.n	80025f6 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmtt+0xca>
  {
    case USART_1:
      ptr           = (USART_TypeDef*)USART1_BASE;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	4a3e      	ldr	r2, [pc, #248]	@ (8002664 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmtt+0x138>)
 800256a:	625a      	str	r2, [r3, #36]	@ 0x24
      uartPtr_1     = this;
 800256c:	4a3e      	ldr	r2, [pc, #248]	@ (8002668 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmtt+0x13c>)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6013      	str	r3, [r2, #0]
      RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8002572:	4b3e      	ldr	r3, [pc, #248]	@ (800266c <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmtt+0x140>)
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	4a3d      	ldr	r2, [pc, #244]	@ (800266c <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmtt+0x140>)
 8002578:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800257c:	6213      	str	r3, [r2, #32]
      PinConfig::set( PinConfig::USART1_RX, PinConfig::ALTERNATE_FUNC);
 800257e:	2102      	movs	r1, #2
 8002580:	207e      	movs	r0, #126	@ 0x7e
 8002582:	f7fe ff9b 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::USART1_TX, PinConfig::ALTERNATE_FUNC);
 8002586:	2102      	movs	r1, #2
 8002588:	207f      	movs	r0, #127	@ 0x7f
 800258a:	f7fe ff97 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      NVIC_EnableIRQ( USART1_IRQn );
 800258e:	2025      	movs	r0, #37	@ 0x25
 8002590:	f7fe fcf8 	bl	8000f84 <__NVIC_EnableIRQ>
      break;
 8002594:	e036      	b.n	8002604 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmtt+0xd8>

    case USART_2:
      ptr           = (USART_TypeDef*)USART2_BASE;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	4a35      	ldr	r2, [pc, #212]	@ (8002670 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmtt+0x144>)
 800259a:	625a      	str	r2, [r3, #36]	@ 0x24
      uartPtr_2     = this;
 800259c:	4a35      	ldr	r2, [pc, #212]	@ (8002674 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmtt+0x148>)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80025a2:	4b32      	ldr	r3, [pc, #200]	@ (800266c <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmtt+0x140>)
 80025a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a6:	4a31      	ldr	r2, [pc, #196]	@ (800266c <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmtt+0x140>)
 80025a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025ac:	6253      	str	r3, [r2, #36]	@ 0x24
      PinConfig::set( PinConfig::USART2_RX, PinConfig::ALTERNATE_FUNC);
 80025ae:	2102      	movs	r1, #2
 80025b0:	2083      	movs	r0, #131	@ 0x83
 80025b2:	f7fe ff83 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::USART2_TX, PinConfig::ALTERNATE_FUNC);
 80025b6:	2102      	movs	r1, #2
 80025b8:	2084      	movs	r0, #132	@ 0x84
 80025ba:	f7fe ff7f 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      NVIC_EnableIRQ( USART2_IRQn );
 80025be:	2026      	movs	r0, #38	@ 0x26
 80025c0:	f7fe fce0 	bl	8000f84 <__NVIC_EnableIRQ>
      break;
 80025c4:	e01e      	b.n	8002604 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmtt+0xd8>

    case USART_3:
      ptr           = (USART_TypeDef*)USART3_BASE;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	4a2b      	ldr	r2, [pc, #172]	@ (8002678 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmtt+0x14c>)
 80025ca:	625a      	str	r2, [r3, #36]	@ 0x24
      uartPtr_3     = this;
 80025cc:	4a2b      	ldr	r2, [pc, #172]	@ (800267c <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmtt+0x150>)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 80025d2:	4b26      	ldr	r3, [pc, #152]	@ (800266c <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmtt+0x140>)
 80025d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d6:	4a25      	ldr	r2, [pc, #148]	@ (800266c <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmtt+0x140>)
 80025d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025dc:	6253      	str	r3, [r2, #36]	@ 0x24
      PinConfig::set( PinConfig::USART3_RX, PinConfig::ALTERNATE_FUNC);
 80025de:	2102      	movs	r1, #2
 80025e0:	2088      	movs	r0, #136	@ 0x88
 80025e2:	f7fe ff6b 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::USART3_TX, PinConfig::ALTERNATE_FUNC);
 80025e6:	2102      	movs	r1, #2
 80025e8:	2089      	movs	r0, #137	@ 0x89
 80025ea:	f7fe ff67 	bl	80014bc <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      NVIC_EnableIRQ( USART3_IRQn );
 80025ee:	2027      	movs	r0, #39	@ 0x27
 80025f0:	f7fe fcc8 	bl	8000f84 <__NVIC_EnableIRQ>
      break;
 80025f4:	e006      	b.n	8002604 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmtt+0xd8>

    default:
      report.error( ReportID_Hw::Event::WRONG_ID );
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	331e      	adds	r3, #30
 80025fa:	2107      	movs	r1, #7
 80025fc:	4618      	mov	r0, r3
 80025fe:	f000 fa11 	bl	8002a24 <_ZN9EmbSysLib3Std6Report5errorEt>
      break;
 8002602:	bf00      	nop
  }

  ptr->CR2 |=  ((MTYPE)0<<12); // 0: 1 stop bit
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800260c:	8a12      	ldrh	r2, [r2, #16]
 800260e:	b292      	uxth	r2, r2
 8002610:	821a      	strh	r2, [r3, #16]

  ptr->CR1 |=  (  !USART_CR1_M    // 8 Bit
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002616:	899b      	ldrh	r3, [r3, #12]
 8002618:	b29a      	uxth	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261e:	f042 020c 	orr.w	r2, r2, #12
 8002622:	b292      	uxth	r2, r2
 8002624:	819a      	strh	r2, [r3, #12]
                | !USART_CR1_PCE  // no parity
                |  USART_CR1_RE   // RX mode
                |  USART_CR1_TE );// TX mode

  ptr->CR3 |=  (  !USART_CR3_RTSE
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262e:	8a92      	ldrh	r2, [r2, #20]
 8002630:	b292      	uxth	r2, r2
 8002632:	829a      	strh	r2, [r3, #20]
                | !USART_CR3_CTSE ); // no hardware flow control

  setBaudrate( baud );
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 f842 	bl	80026c0 <_ZN9EmbSysLib2Hw8Uart_Mcu11setBaudrateEm>

  ptr->CR1 |= (  USART_CR1_UE       // Enable USART
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002640:	899b      	ldrh	r3, [r3, #12]
 8002642:	b29b      	uxth	r3, r3
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002648:	f443 5301 	orr.w	r3, r3, #8256	@ 0x2040
 800264c:	f043 0320 	orr.w	r3, r3, #32
 8002650:	b29b      	uxth	r3, r3
 8002652:	8193      	strh	r3, [r2, #12]
               | USART_CR1_TCIE     // Transm. complete interr. enable
               | USART_CR1_RXNEIE );// Receive reg. not empty interr. enable
}
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	08006658 	.word	0x08006658
 8002664:	40013800 	.word	0x40013800
 8002668:	200000d8 	.word	0x200000d8
 800266c:	40023800 	.word	0x40023800
 8002670:	40004400 	.word	0x40004400
 8002674:	200000dc 	.word	0x200000dc
 8002678:	40004800 	.word	0x40004800
 800267c:	200000e0 	.word	0x200000e0

08002680 <_ZN9EmbSysLib2Hw8Uart_Mcu7getByteEv>:

//-------------------------------------------------------------------
inline BYTE Uart_Mcu::getByte( void )
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  return( ptr->DR );
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800268c:	889b      	ldrh	r3, [r3, #4]
 800268e:	b29b      	uxth	r3, r3
 8002690:	b2db      	uxtb	r3, r3
}
 8002692:	4618      	mov	r0, r3
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr

0800269c <_ZN9EmbSysLib2Hw8Uart_Mcu7setByteEh>:

//-------------------------------------------------------------------
inline void Uart_Mcu::setByte( BYTE c )
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	460b      	mov	r3, r1
 80026a6:	70fb      	strb	r3, [r7, #3]
  ptr->DR = c;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ac:	78fa      	ldrb	r2, [r7, #3]
 80026ae:	b292      	uxth	r2, r2
 80026b0:	809a      	strh	r2, [r3, #4]
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr
 80026bc:	0000      	movs	r0, r0
	...

080026c0 <_ZN9EmbSysLib2Hw8Uart_Mcu11setBaudrateEm>:
//            fck                         fck
//   div = ---------  =>  BRR = 16*div = ------
//         16 x baud                      baud
//
void Uart_Mcu::setBaudrate( DWORD baud )
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  if( baud > 1500)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d92f      	bls.n	8002734 <_ZN9EmbSysLib2Hw8Uart_Mcu11setBaudrateEm+0x74>
  {
    DWORD brr = (WORD)(2.0*system_PCLK_UART / baud);
 80026d4:	6838      	ldr	r0, [r7, #0]
 80026d6:	f7fd feb5 	bl	8000444 <__aeabi_ui2d>
 80026da:	4602      	mov	r2, r0
 80026dc:	460b      	mov	r3, r1
 80026de:	a122      	add	r1, pc, #136	@ (adr r1, 8002768 <_ZN9EmbSysLib2Hw8Uart_Mcu11setBaudrateEm+0xa8>)
 80026e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026e4:	f7fe f852 	bl	800078c <__aeabi_ddiv>
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	4610      	mov	r0, r2
 80026ee:	4619      	mov	r1, r3
 80026f0:	f7fe f934 	bl	800095c <__aeabi_d2uiz>
 80026f4:	4603      	mov	r3, r0
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	60bb      	str	r3, [r7, #8]
    ptr->BRR  = (brr&0XFFF0) | ((brr>>1)&0x0007);
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	f023 030f 	bic.w	r3, r3, #15
 8002702:	b299      	uxth	r1, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	085b      	lsrs	r3, r3, #1
 8002708:	b29b      	uxth	r3, r3
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	b29a      	uxth	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002714:	430a      	orrs	r2, r1
 8002716:	b292      	uxth	r2, r2
 8002718:	811a      	strh	r2, [r3, #8]
    ptr->CR1 |= USART_CR1_OVER8;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271e:	899b      	ldrh	r3, [r3, #12]
 8002720:	b29b      	uxth	r3, r3
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002726:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800272a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800272e:	b29b      	uxth	r3, r3
 8002730:	8193      	strh	r3, [r2, #12]
  {
    DWORD brr = (WORD)(system_PCLK_UART / baud);
    ptr->BRR  = brr;
    ptr->CR1 &= ~USART_CR1_OVER8;
  }
}
 8002732:	e014      	b.n	800275e <_ZN9EmbSysLib2Hw8Uart_Mcu11setBaudrateEm+0x9e>
    DWORD brr = (WORD)(system_PCLK_UART / baud);
 8002734:	4a0e      	ldr	r2, [pc, #56]	@ (8002770 <_ZN9EmbSysLib2Hw8Uart_Mcu11setBaudrateEm+0xb0>)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	fbb2 f3f3 	udiv	r3, r2, r3
 800273c:	b29b      	uxth	r3, r3
 800273e:	60fb      	str	r3, [r7, #12]
    ptr->BRR  = brr;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	b292      	uxth	r2, r2
 8002748:	811a      	strh	r2, [r3, #8]
    ptr->CR1 &= ~USART_CR1_OVER8;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274e:	899b      	ldrh	r3, [r3, #12]
 8002750:	b29a      	uxth	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002756:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800275a:	b292      	uxth	r2, r2
 800275c:	819a      	strh	r2, [r3, #12]
}
 800275e:	bf00      	nop
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	00000000 	.word	0x00000000
 800276c:	418e8480 	.word	0x418e8480
 8002770:	01e84800 	.word	0x01e84800

08002774 <_ZN9EmbSysLib2Hw8Uart_Mcu3isrEv>:

//-------------------------------------------------------------------
void Uart_Mcu::isr( void )
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  if( ptr->SR & USART_SR_RXNE ) // Read data register not empty?
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	b29b      	uxth	r3, r3
 8002784:	f003 0320 	and.w	r3, r3, #32
 8002788:	2b00      	cmp	r3, #0
 800278a:	bf14      	ite	ne
 800278c:	2301      	movne	r3, #1
 800278e:	2300      	moveq	r3, #0
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d006      	beq.n	80027a4 <_ZN9EmbSysLib2Hw8Uart_Mcu3isrEv+0x30>
  {
    isrRx();
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	331c      	adds	r3, #28
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4610      	mov	r0, r2
 80027a2:	4798      	blx	r3
  }
  if( ptr->SR & USART_SR_TC ) // Transmission Complete?
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	bf14      	ite	ne
 80027b4:	2301      	movne	r3, #1
 80027b6:	2300      	moveq	r3, #0
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00b      	beq.n	80027d6 <_ZN9EmbSysLib2Hw8Uart_Mcu3isrEv+0x62>
  {
    ptr->SR = ~(USART_SR_TC);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c2:	f64f 72bf 	movw	r2, #65471	@ 0xffbf
 80027c6:	801a      	strh	r2, [r3, #0]
    isrTx();
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	3320      	adds	r3, #32
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4610      	mov	r0, r2
 80027d4:	4798      	blx	r3
  }
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <USART1_IRQHandler>:

//-------------------------------------------------------------------
extern "C"
{
  void USART1_IRQHandler(void)
  {
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
    Uart_Mcu::uartPtr_1->isr();
 80027e4:	4b03      	ldr	r3, [pc, #12]	@ (80027f4 <USART1_IRQHandler+0x14>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff ffc3 	bl	8002774 <_ZN9EmbSysLib2Hw8Uart_Mcu3isrEv>
  }
 80027ee:	bf00      	nop
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	200000d8 	.word	0x200000d8

080027f8 <USART2_IRQHandler>:

//-------------------------------------------------------------------
extern "C"
{
  void USART2_IRQHandler(void)
  {
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
    Uart_Mcu::uartPtr_2->isr();
 80027fc:	4b03      	ldr	r3, [pc, #12]	@ (800280c <USART2_IRQHandler+0x14>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff ffb7 	bl	8002774 <_ZN9EmbSysLib2Hw8Uart_Mcu3isrEv>
  }
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	200000dc 	.word	0x200000dc

08002810 <USART3_IRQHandler>:

//-------------------------------------------------------------------
extern "C"
{
  void USART3_IRQHandler(void)
  {
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
    Uart_Mcu::uartPtr_3->isr();
 8002814:	4b03      	ldr	r3, [pc, #12]	@ (8002824 <USART3_IRQHandler+0x14>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff ffab 	bl	8002774 <_ZN9EmbSysLib2Hw8Uart_Mcu3isrEv>
  }
 800281e:	bf00      	nop
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	200000e0 	.word	0x200000e0

08002828 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv>:
  usbPtr = this;
}

//-------------------------------------------------------------------
inline void USBdevice_Mcu::isr(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  volatile DWORD istr = USB->ISTR;
 8002830:	4b4b      	ldr	r3, [pc, #300]	@ (8002960 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x138>)
 8002832:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002834:	60bb      	str	r3, [r7, #8]

  if( istr & USB_ISTR_RESET )
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800283c:	2b00      	cmp	r3, #0
 800283e:	bf14      	ite	ne
 8002840:	2301      	movne	r3, #1
 8002842:	2300      	moveq	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d009      	beq.n	800285e <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x36>
  {
    reset();
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	330c      	adds	r3, #12
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	4798      	blx	r3
    USB->ISTR = ~USB_ISTR_RESET;
 8002856:	4b42      	ldr	r3, [pc, #264]	@ (8002960 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x138>)
 8002858:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800285c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if( istr & USB_ISTR_SUSP )
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002864:	2b00      	cmp	r3, #0
 8002866:	bf14      	ite	ne
 8002868:	2301      	movne	r3, #1
 800286a:	2300      	moveq	r3, #0
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d010      	beq.n	8002894 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x6c>
  {
    suspend();
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	3304      	adds	r3, #4
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4610      	mov	r0, r2
 800287e:	4798      	blx	r3
    USB->CNTR |= USB_CNTR_FSUSP;
 8002880:	4b37      	ldr	r3, [pc, #220]	@ (8002960 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x138>)
 8002882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002884:	4a36      	ldr	r2, [pc, #216]	@ (8002960 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x138>)
 8002886:	f043 0308 	orr.w	r3, r3, #8
 800288a:	6413      	str	r3, [r2, #64]	@ 0x40
    USB->ISTR = ~USB_ISTR_SUSP;
 800288c:	4b34      	ldr	r3, [pc, #208]	@ (8002960 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x138>)
 800288e:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002892:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if( istr & USB_ISTR_CTR )
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800289a:	2b00      	cmp	r3, #0
 800289c:	bf14      	ite	ne
 800289e:	2301      	movne	r3, #1
 80028a0:	2300      	moveq	r3, #0
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d057      	beq.n	8002958 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x130>
  {
    for( BYTE num=0; num<8;num++) //<! \todo: use ISTR, EP_ID bits?
 80028a8:	2300      	movs	r3, #0
 80028aa:	73fb      	strb	r3, [r7, #15]
 80028ac:	e04d      	b.n	800294a <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x122>
    {
      if( USB->EP[num]&USB_EP0R_CTR_RX )
 80028ae:	4a2c      	ldr	r2, [pc, #176]	@ (8002960 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x138>)
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
 80028b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	bf14      	ite	ne
 80028be:	2301      	movne	r3, #1
 80028c0:	2300      	moveq	r3, #0
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d01b      	beq.n	8002900 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0xd8>
      {
        EP[num].clrCTR_RX();
 80028c8:	7bfa      	ldrb	r2, [r7, #15]
 80028ca:	4613      	mov	r3, r2
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	4413      	add	r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	3350      	adds	r3, #80	@ 0x50
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	4413      	add	r3, r2
 80028d8:	4618      	mov	r0, r3
 80028da:	f000 f843 	bl	8002964 <_ZN9EmbSysLib2Hw13USBdevice_Mcu8EPconfig9clrCTR_RXEv>
        eventHandler( num|0x00,                                   // calc EP address
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
                      (USB->EP[num]&USB_EP0R_SETUP)?true:false ); // Setup?
 80028e6:	491e      	ldr	r1, [pc, #120]	@ (8002960 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x138>)
 80028e8:	7bfa      	ldrb	r2, [r7, #15]
 80028ea:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80028ee:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80028f2:	2a00      	cmp	r2, #0
 80028f4:	bf14      	ite	ne
 80028f6:	2201      	movne	r2, #1
 80028f8:	2200      	moveq	r2, #0
 80028fa:	b2d2      	uxtb	r2, r2
        eventHandler( num|0x00,                                   // calc EP address
 80028fc:	7bf9      	ldrb	r1, [r7, #15]
 80028fe:	4798      	blx	r3
     }

      if( USB->EP[num]&USB_EP0R_CTR_TX )
 8002900:	4a17      	ldr	r2, [pc, #92]	@ (8002960 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x138>)
 8002902:	7bfb      	ldrb	r3, [r7, #15]
 8002904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002908:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800290c:	2b00      	cmp	r3, #0
 800290e:	bf14      	ite	ne
 8002910:	2301      	movne	r3, #1
 8002912:	2300      	moveq	r3, #0
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d014      	beq.n	8002944 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x11c>
      {
        EP[num].clrCTR_TX();
 800291a:	7bfa      	ldrb	r2, [r7, #15]
 800291c:	4613      	mov	r3, r2
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	4413      	add	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	3350      	adds	r3, #80	@ 0x50
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	4413      	add	r3, r2
 800292a:	4618      	mov	r0, r3
 800292c:	f000 f82a 	bl	8002984 <_ZN9EmbSysLib2Hw13USBdevice_Mcu8EPconfig9clrCTR_TXEv>
        eventHandler( num|0x80,  // calc EP address
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	7bfa      	ldrb	r2, [r7, #15]
 800293a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800293e:	b2d1      	uxtb	r1, r2
 8002940:	2200      	movs	r2, #0
 8002942:	4798      	blx	r3
    for( BYTE num=0; num<8;num++) //<! \todo: use ISTR, EP_ID bits?
 8002944:	7bfb      	ldrb	r3, [r7, #15]
 8002946:	3301      	adds	r3, #1
 8002948:	73fb      	strb	r3, [r7, #15]
 800294a:	7bfb      	ldrb	r3, [r7, #15]
 800294c:	2b07      	cmp	r3, #7
 800294e:	d9ae      	bls.n	80028ae <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x86>
                      false );   // no Setup
       }
    }
    USB->ISTR = ~USB_ISTR_CTR;
 8002950:	4b03      	ldr	r3, [pc, #12]	@ (8002960 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x138>)
 8002952:	f46f 4200 	mvn.w	r2, #32768	@ 0x8000
 8002956:	645a      	str	r2, [r3, #68]	@ 0x44
  }
}
 8002958:	bf00      	nop
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40005c00 	.word	0x40005c00

08002964 <_ZN9EmbSysLib2Hw13USBdevice_Mcu8EPconfig9clrCTR_RXEv>:
  *regPtr = config;
}

//-------------------------------------------------------------------
void USBdevice_Mcu::EPconfig::clrCTR_RX( void )
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  *regPtr = config & ~(1<<15);//tmp;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002978:	601a      	str	r2, [r3, #0]
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr

08002984 <_ZN9EmbSysLib2Hw13USBdevice_Mcu8EPconfig9clrCTR_TXEv>:

//-------------------------------------------------------------------
void USBdevice_Mcu::EPconfig::clrCTR_TX( void )
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  *regPtr = config & ~(1<<7);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002998:	601a      	str	r2, [r3, #0]
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr

080029a4 <USB_LP_IRQHandler>:
//*******************************************************************
//-------------------------------------------------------------------
extern "C"
{
  void USB_LP_IRQHandler( void )
  {
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
    USBdevice_Mcu::usbPtr->isr();
 80029a8:	4b03      	ldr	r3, [pc, #12]	@ (80029b8 <USB_LP_IRQHandler+0x14>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff ff3b 	bl	8002828 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv>
  }
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	200000e4 	.word	0x200000e4

080029bc <_ZN9EmbSysLib3Std6ReportC1Et>:
Report::Handler *Report::msgHandler   = 0;
WORD             Report::globalCode   = 0;
WORD             Report::globalModule = 0;

//-------------------------------------------------------------------
Report::Report( WORD moduleId_In )
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	460b      	mov	r3, r1
 80029c6:	807b      	strh	r3, [r7, #2]
{
  moduleId  = moduleId_In;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	887a      	ldrh	r2, [r7, #2]
 80029cc:	805a      	strh	r2, [r3, #2]
  localCode = 0;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	801a      	strh	r2, [r3, #0]
}
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4618      	mov	r0, r3
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr

080029e0 <_ZN9EmbSysLib3Std6Report5storeEt>:

//-------------------------------------------------------------------
void Report::store( const WORD code )
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	807b      	strh	r3, [r7, #2]
  if( localCode == 0 )
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d102      	bne.n	80029fa <_ZN9EmbSysLib3Std6Report5storeEt+0x1a>
  {
    localCode = code;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	887a      	ldrh	r2, [r7, #2]
 80029f8:	801a      	strh	r2, [r3, #0]
  }
  if( globalCode == 0 )
 80029fa:	4b08      	ldr	r3, [pc, #32]	@ (8002a1c <_ZN9EmbSysLib3Std6Report5storeEt+0x3c>)
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d106      	bne.n	8002a10 <_ZN9EmbSysLib3Std6Report5storeEt+0x30>
  {
    globalCode = code;
 8002a02:	4a06      	ldr	r2, [pc, #24]	@ (8002a1c <_ZN9EmbSysLib3Std6Report5storeEt+0x3c>)
 8002a04:	887b      	ldrh	r3, [r7, #2]
 8002a06:	8013      	strh	r3, [r2, #0]
    globalModule = moduleId;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	885a      	ldrh	r2, [r3, #2]
 8002a0c:	4b04      	ldr	r3, [pc, #16]	@ (8002a20 <_ZN9EmbSysLib3Std6Report5storeEt+0x40>)
 8002a0e:	801a      	strh	r2, [r3, #0]
  }
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	200000ec 	.word	0x200000ec
 8002a20:	200000ee 	.word	0x200000ee

08002a24 <_ZN9EmbSysLib3Std6Report5errorEt>:

//-------------------------------------------------------------------
void Report::error( const WORD code )
{
 8002a24:	b590      	push	{r4, r7, lr}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	807b      	strh	r3, [r7, #2]
  store( code );
 8002a30:	887b      	ldrh	r3, [r7, #2]
 8002a32:	4619      	mov	r1, r3
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7ff ffd3 	bl	80029e0 <_ZN9EmbSysLib3Std6Report5storeEt>
  if( msgHandler )
 8002a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a68 <_ZN9EmbSysLib3Std6Report5errorEt+0x44>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00b      	beq.n	8002a5a <_ZN9EmbSysLib3Std6Report5errorEt+0x36>
  {
    msgHandler->onReport( code, moduleId, true );
 8002a42:	4b09      	ldr	r3, [pc, #36]	@ (8002a68 <_ZN9EmbSysLib3Std6Report5errorEt+0x44>)
 8002a44:	6818      	ldr	r0, [r3, #0]
 8002a46:	4b08      	ldr	r3, [pc, #32]	@ (8002a68 <_ZN9EmbSysLib3Std6Report5errorEt+0x44>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681c      	ldr	r4, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	885a      	ldrh	r2, [r3, #2]
 8002a52:	8879      	ldrh	r1, [r7, #2]
 8002a54:	2301      	movs	r3, #1
 8002a56:	47a0      	blx	r4
  }
  else
  {
    Hw::System::reset();
  }
}
 8002a58:	e001      	b.n	8002a5e <_ZN9EmbSysLib3Std6Report5errorEt+0x3a>
    Hw::System::reset();
 8002a5a:	f7fe fbdb 	bl	8001214 <_ZN9EmbSysLib2Hw6System5resetEv>
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd90      	pop	{r4, r7, pc}
 8002a66:	bf00      	nop
 8002a68:	200000e8 	.word	0x200000e8

08002a6c <_ZN9EmbSysLib3Std6Report5alertEt>:

//-------------------------------------------------------------------
void Report::alert( const WORD code )
{
 8002a6c:	b590      	push	{r4, r7, lr}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	460b      	mov	r3, r1
 8002a76:	807b      	strh	r3, [r7, #2]
  store( code );
 8002a78:	887b      	ldrh	r3, [r7, #2]
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7ff ffaf 	bl	80029e0 <_ZN9EmbSysLib3Std6Report5storeEt>
  if( msgHandler )
 8002a82:	4b09      	ldr	r3, [pc, #36]	@ (8002aa8 <_ZN9EmbSysLib3Std6Report5alertEt+0x3c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00a      	beq.n	8002aa0 <_ZN9EmbSysLib3Std6Report5alertEt+0x34>
  {
    msgHandler->onReport( code, moduleId, false );
 8002a8a:	4b07      	ldr	r3, [pc, #28]	@ (8002aa8 <_ZN9EmbSysLib3Std6Report5alertEt+0x3c>)
 8002a8c:	6818      	ldr	r0, [r3, #0]
 8002a8e:	4b06      	ldr	r3, [pc, #24]	@ (8002aa8 <_ZN9EmbSysLib3Std6Report5alertEt+0x3c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681c      	ldr	r4, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	885a      	ldrh	r2, [r3, #2]
 8002a9a:	8879      	ldrh	r1, [r7, #2]
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	47a0      	blx	r4
  }
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd90      	pop	{r4, r7, pc}
 8002aa8:	200000e8 	.word	0x200000e8

08002aac <_ZN9EmbSysLib3Std6Report7HandlerC1Ev>:
//
// Report::Handler
//
//*******************************************************************
//-------------------------------------------------------------------
Report::Handler::Handler()
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	4a05      	ldr	r2, [pc, #20]	@ (8002acc <_ZN9EmbSysLib3Std6Report7HandlerC1Ev+0x20>)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	601a      	str	r2, [r3, #0]
{
  Report::msgHandler = this;
 8002aba:	4a05      	ldr	r2, [pc, #20]	@ (8002ad0 <_ZN9EmbSysLib3Std6Report7HandlerC1Ev+0x24>)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6013      	str	r3, [r2, #0]
}
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr
 8002acc:	080067cc 	.word	0x080067cc
 8002ad0:	200000e8 	.word	0x200000e8

08002ad4 <_ZN9EmbSysLib3Std6Report7HandlerD1Ev>:

//-------------------------------------------------------------------
Report::Handler::~Handler()
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	4a08      	ldr	r2, [pc, #32]	@ (8002b00 <_ZN9EmbSysLib3Std6Report7HandlerD1Ev+0x2c>)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	601a      	str	r2, [r3, #0]
{
  if( this == Report::msgHandler )
 8002ae2:	4b08      	ldr	r3, [pc, #32]	@ (8002b04 <_ZN9EmbSysLib3Std6Report7HandlerD1Ev+0x30>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d102      	bne.n	8002af2 <_ZN9EmbSysLib3Std6Report7HandlerD1Ev+0x1e>
  {
    Report::msgHandler = 0;
 8002aec:	4b05      	ldr	r3, [pc, #20]	@ (8002b04 <_ZN9EmbSysLib3Std6Report7HandlerD1Ev+0x30>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
  }
}
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4618      	mov	r0, r3
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	080067cc 	.word	0x080067cc
 8002b04:	200000e8 	.word	0x200000e8

08002b08 <_ZN9EmbSysLib2Hw3AdcC1EthRNS0_5TimerE>:
//
// Adc
//
//*******************************************************************
//-------------------------------------------------------------------
Adc::Adc( WORD moduleId, BYTE num, Timer &timer )
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	607b      	str	r3, [r7, #4]
 8002b12:	460b      	mov	r3, r1
 8002b14:	817b      	strh	r3, [r7, #10]
 8002b16:	4613      	mov	r3, r2
 8002b18:	727b      	strb	r3, [r7, #9]
: report( moduleId ) 
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fe fa67 	bl	8000ff0 <_ZN9EmbSysLib2Hw5Timer4TaskC1Ev>
 8002b22:	4a25      	ldr	r2, [pc, #148]	@ (8002bb8 <_ZN9EmbSysLib2Hw3AdcC1EthRNS0_5TimerE+0xb0>)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	3316      	adds	r3, #22
 8002b2c:	897a      	ldrh	r2, [r7, #10]
 8002b2e:	4611      	mov	r1, r2
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff ff43 	bl	80029bc <_ZN9EmbSysLib3Std6ReportC1Et>
{
  currentCh      = 0;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	749a      	strb	r2, [r3, #18]
  currentId      = 0;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	74da      	strb	r2, [r3, #19]
  numActivatedCh = 0;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	745a      	strb	r2, [r3, #17]
  numOfChannels  = num;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	7a7a      	ldrb	r2, [r7, #9]
 8002b4c:	741a      	strb	r2, [r3, #16]
  result         = new WORD[num];
 8002b4e:	7a7b      	ldrb	r3, [r7, #9]
 8002b50:	4a1a      	ldr	r2, [pc, #104]	@ (8002bbc <_ZN9EmbSysLib2Hw3AdcC1EthRNS0_5TimerE+0xb4>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d801      	bhi.n	8002b5a <_ZN9EmbSysLib2Hw3AdcC1EthRNS0_5TimerE+0x52>
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	e001      	b.n	8002b5e <_ZN9EmbSysLib2Hw3AdcC1EthRNS0_5TimerE+0x56>
 8002b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f002 fef6 	bl	8005950 <_Znaj>
 8002b64:	4603      	mov	r3, r0
 8002b66:	461a      	mov	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	609a      	str	r2, [r3, #8]
  chList         = new BYTE[num];
 8002b6c:	7a7b      	ldrb	r3, [r7, #9]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f002 feee 	bl	8005950 <_Znaj>
 8002b74:	4603      	mov	r3, r0
 8002b76:	461a      	mov	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	60da      	str	r2, [r3, #12]
  isRunning      = false;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	751a      	strb	r2, [r3, #20]

  if( !result || !chList )
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <_ZN9EmbSysLib2Hw3AdcC1EthRNS0_5TimerE+0x8a>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d105      	bne.n	8002b9e <_ZN9EmbSysLib2Hw3AdcC1EthRNS0_5TimerE+0x96>
  {
    report.error( ReportID_Hw::Event::MEMORY_ALLOCTION_ERROR );
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	3316      	adds	r3, #22
 8002b96:	2105      	movs	r1, #5
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff ff43 	bl	8002a24 <_ZN9EmbSysLib3Std6Report5errorEt>
  }

  timer.add( this ); // add to update list
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	3304      	adds	r3, #4
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	4611      	mov	r1, r2
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	4798      	blx	r3
}
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	08006780 	.word	0x08006780
 8002bbc:	3ffffffc 	.word	0x3ffffffc

08002bc0 <_ZN9EmbSysLib2Hw3Adc6enableEhh>:

//-------------------------------------------------------------------
void Adc::enable( BYTE ch, BYTE para )
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	70fb      	strb	r3, [r7, #3]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	70bb      	strb	r3, [r7, #2]
  if( ch >= numOfChannels )  // is requested channel supported?
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	7c1b      	ldrb	r3, [r3, #16]
 8002bd4:	78fa      	ldrb	r2, [r7, #3]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d306      	bcc.n	8002be8 <_ZN9EmbSysLib2Hw3Adc6enableEhh+0x28>
  {
    report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	3316      	adds	r3, #22
 8002bde:	2108      	movs	r1, #8
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff ff1f 	bl	8002a24 <_ZN9EmbSysLib3Std6Report5errorEt>
    return;
 8002be6:	e03c      	b.n	8002c62 <_ZN9EmbSysLib2Hw3Adc6enableEhh+0xa2>
  }

  for( int i = 0; i < numActivatedCh; i++ )  // check, if ch in chList
 8002be8:	2300      	movs	r3, #0
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	e013      	b.n	8002c16 <_ZN9EmbSysLib2Hw3Adc6enableEhh+0x56>
  {
    if( chList[i]  == ch )
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68da      	ldr	r2, [r3, #12]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	78fa      	ldrb	r2, [r7, #3]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d108      	bne.n	8002c10 <_ZN9EmbSysLib2Hw3Adc6enableEhh+0x50>
    {
      configCh( ch, para );
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	3318      	adds	r3, #24
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	78ba      	ldrb	r2, [r7, #2]
 8002c08:	78f9      	ldrb	r1, [r7, #3]
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	4798      	blx	r3
      return;
 8002c0e:	e028      	b.n	8002c62 <_ZN9EmbSysLib2Hw3Adc6enableEhh+0xa2>
  for( int i = 0; i < numActivatedCh; i++ )  // check, if ch in chList
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	3301      	adds	r3, #1
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	7c5b      	ldrb	r3, [r3, #17]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	dbe5      	blt.n	8002bee <_ZN9EmbSysLib2Hw3Adc6enableEhh+0x2e>
    }
  }

  if( numActivatedCh < numOfChannels )  // add ch to chList if possible
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	7c5a      	ldrb	r2, [r3, #17]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	7c1b      	ldrb	r3, [r3, #16]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d219      	bcs.n	8002c62 <_ZN9EmbSysLib2Hw3Adc6enableEhh+0xa2>
  {
    result[ch] = 0;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	78fb      	ldrb	r3, [r7, #3]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	4413      	add	r3, r2
 8002c38:	2200      	movs	r2, #0
 8002c3a:	801a      	strh	r2, [r3, #0]
    chList[numActivatedCh++] = ch;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68da      	ldr	r2, [r3, #12]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	7c5b      	ldrb	r3, [r3, #17]
 8002c44:	1c59      	adds	r1, r3, #1
 8002c46:	b2c8      	uxtb	r0, r1
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	7448      	strb	r0, [r1, #17]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	78fa      	ldrb	r2, [r7, #3]
 8002c50:	701a      	strb	r2, [r3, #0]
    configCh( ch, para );               // call hardware configuration
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	3318      	adds	r3, #24
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	78ba      	ldrb	r2, [r7, #2]
 8002c5c:	78f9      	ldrb	r1, [r7, #3]
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	4798      	blx	r3
  }
}
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <_ZN9EmbSysLib2Hw3Adc3getEh>:

//-------------------------------------------------------------------
inline WORD Adc::get( BYTE ch )
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	460b      	mov	r3, r1
 8002c72:	70fb      	strb	r3, [r7, #3]
  return( result[ch] ); // get result of this ch
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	78fb      	ldrb	r3, [r7, #3]
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	4413      	add	r3, r2
 8002c7e:	881b      	ldrh	r3, [r3, #0]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bc80      	pop	{r7}
 8002c88:	4770      	bx	lr

08002c8a <_ZN9EmbSysLib2Hw3Adc6updateEv>:

//-------------------------------------------------------------------
inline void Adc::update( void )
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b082      	sub	sp, #8
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  if( numActivatedCh && !isRunning ) // while sampling is running, we
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	7c5b      	ldrb	r3, [r3, #17]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d01d      	beq.n	8002cd6 <_ZN9EmbSysLib2Hw3Adc6updateEv+0x4c>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	7d1b      	ldrb	r3, [r3, #20]
 8002c9e:	f083 0301 	eor.w	r3, r3, #1
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d016      	beq.n	8002cd6 <_ZN9EmbSysLib2Hw3Adc6updateEv+0x4c>
                                     // must not update. Otherwise it
                                     // stops actual scan
  {
    currentId = 0;                   // start with first one
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	74da      	strb	r2, [r3, #19]
    currentCh = chList[currentId];   // get channel from list
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	7cd2      	ldrb	r2, [r2, #19]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	781a      	ldrb	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	749a      	strb	r2, [r3, #18]
    isRunning = true;                // set flag ...
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	751a      	strb	r2, [r3, #20]
    startCh( currentCh );            // ... and start with sampling
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	3314      	adds	r3, #20
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	7c92      	ldrb	r2, [r2, #18]
 8002cd0:	4611      	mov	r1, r2
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	4798      	blx	r3
  }
}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <_ZN9EmbSysLib2Hw3Adc3isrEv>:

//-------------------------------------------------------------------
inline void Adc::isr( void )
{
 8002cde:	b590      	push	{r4, r7, lr}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  result[currentCh] = getResult(); // get Result from HW and
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	3310      	adds	r3, #16
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6891      	ldr	r1, [r2, #8]
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	7c92      	ldrb	r2, [r2, #18]
 8002cf6:	0052      	lsls	r2, r2, #1
 8002cf8:	188c      	adds	r4, r1, r2
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	4798      	blx	r3
 8002cfe:	4603      	mov	r3, r0
 8002d00:	8023      	strh	r3, [r4, #0]
                                   // store it in result buffer
  currentId++;                     // next channel
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	7cdb      	ldrb	r3, [r3, #19]
 8002d06:	3301      	adds	r3, #1
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	74da      	strb	r2, [r3, #19]

  if( currentId < numActivatedCh ) // is there a next one?
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	7cda      	ldrb	r2, [r3, #19]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	7c5b      	ldrb	r3, [r3, #17]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d211      	bcs.n	8002d3e <_ZN9EmbSysLib2Hw3Adc3isrEv+0x60>
  {
    currentCh = chList[currentId]; // get next ch from list
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	7cd2      	ldrb	r2, [r2, #19]
 8002d22:	4413      	add	r3, r2
 8002d24:	781a      	ldrb	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	749a      	strb	r2, [r3, #18]
    startCh( currentCh );          // start with sampling
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	3314      	adds	r3, #20
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	7c92      	ldrb	r2, [r2, #18]
 8002d36:	4611      	mov	r1, r2
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	4798      	blx	r3
  {
    currentId = 0;
    currentCh = chList[currentId];
    isRunning = false;
  }
}
 8002d3c:	e00d      	b.n	8002d5a <_ZN9EmbSysLib2Hw3Adc3isrEv+0x7c>
    currentId = 0;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	74da      	strb	r2, [r3, #19]
    currentCh = chList[currentId];
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	7cd2      	ldrb	r2, [r2, #19]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	781a      	ldrb	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	749a      	strb	r2, [r3, #18]
    isRunning = false;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	751a      	strb	r2, [r3, #20]
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd90      	pop	{r4, r7, pc}
	...

08002d64 <_ZN9EmbSysLib2Hw11DisplayCharC1Ethh>:
//
// DisplayChar
//
//*******************************************************************
//-------------------------------------------------------------------
DisplayChar::DisplayChar( WORD moduleId,
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	4608      	mov	r0, r1
 8002d6e:	4611      	mov	r1, r2
 8002d70:	461a      	mov	r2, r3
 8002d72:	4603      	mov	r3, r0
 8002d74:	807b      	strh	r3, [r7, #2]
 8002d76:	460b      	mov	r3, r1
 8002d78:	707b      	strb	r3, [r7, #1]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	703b      	strb	r3, [r7, #0]
	                        BYTE numberOfLines,
                          BYTE numberOfColumns )
: report( moduleId ) 
 8002d7e:	4a0b      	ldr	r2, [pc, #44]	@ (8002dac <_ZN9EmbSysLib2Hw11DisplayCharC1Ethh+0x48>)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3308      	adds	r3, #8
 8002d88:	887a      	ldrh	r2, [r7, #2]
 8002d8a:	4611      	mov	r1, r2
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff fe15 	bl	80029bc <_ZN9EmbSysLib3Std6ReportC1Et>
{
  this->numberOfLines   = numberOfLines;
 8002d92:	787b      	ldrb	r3, [r7, #1]
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	809a      	strh	r2, [r3, #4]
  this->numberOfColumns = numberOfColumns;
 8002d9a:	783b      	ldrb	r3, [r7, #0]
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	80da      	strh	r2, [r3, #6]
}
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4618      	mov	r0, r3
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	08006634 	.word	0x08006634

08002db0 <_ZN9EmbSysLib2Hw11DisplayChar16getNumberOfLinesEv>:

//-------------------------------------------------------------------
inline BYTE DisplayChar::getNumberOfLines( void )
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  return( numberOfLines );
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	889b      	ldrh	r3, [r3, #4]
 8002dbc:	b2db      	uxtb	r3, r3
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr

08002dc8 <_ZN9EmbSysLib2Hw11DisplayChar18getNumberOfColumnsEv>:

//-------------------------------------------------------------------
inline BYTE DisplayChar::getNumberOfColumns( void )
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  return( numberOfColumns );
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	88db      	ldrh	r3, [r3, #6]
 8002dd4:	b2db      	uxtb	r3, r3
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr

08002de0 <_ZN9EmbSysLib2Hw11DisplayChar9putStringEPKc>:

//-------------------------------------------------------------------
void DisplayChar::putString( const char *str )
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  while( *str != 0 )
 8002dea:	e00b      	b.n	8002e04 <_ZN9EmbSysLib2Hw11DisplayChar9putStringEPKc+0x24>
  {
    putChar( *str );
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	330c      	adds	r3, #12
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	7812      	ldrb	r2, [r2, #0]
 8002df8:	4611      	mov	r1, r2
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	4798      	blx	r3
    str++;
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	3301      	adds	r3, #1
 8002e02:	603b      	str	r3, [r7, #0]
  while( *str != 0 )
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1ef      	bne.n	8002dec <_ZN9EmbSysLib2Hw11DisplayChar9putStringEPKc+0xc>
  }
}
 8002e0c:	bf00      	nop
 8002e0e:	bf00      	nop
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
	...

08002e18 <_ZN9EmbSysLib2Hw4PortC1Et>:
//
// Port
//
//*******************************************************************
//-------------------------------------------------------------------
Port::Port( WORD moduleId )
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	460b      	mov	r3, r1
 8002e22:	807b      	strh	r3, [r7, #2]
: report( moduleId )
 8002e24:	4a07      	ldr	r2, [pc, #28]	@ (8002e44 <_ZN9EmbSysLib2Hw4PortC1Et+0x2c>)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	887a      	ldrh	r2, [r7, #2]
 8002e30:	4611      	mov	r1, r2
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff fdc2 	bl	80029bc <_ZN9EmbSysLib3Std6ReportC1Et>
{
}
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	08006720 	.word	0x08006720

08002e48 <_ZN9EmbSysLib2Hw4Port3PinC1ERS1_h>:
//
// Port::Pin
//
//*******************************************************************
//-------------------------------------------------------------------
Port::Pin::Pin( Port &port, BYTE pinId )
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	4613      	mov	r3, r2
 8002e54:	71fb      	strb	r3, [r7, #7]
: pinId  ( pinId    )
, pinMask( 1<<pinId )
, port   ( port     )
 8002e56:	4a0b      	ldr	r2, [pc, #44]	@ (8002e84 <_ZN9EmbSysLib2Hw4Port3PinC1ERS1_h+0x3c>)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	601a      	str	r2, [r3, #0]
: pinId  ( pinId    )
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	79fa      	ldrb	r2, [r7, #7]
 8002e60:	711a      	strb	r2, [r3, #4]
, pinMask( 1<<pinId )
 8002e62:	79fb      	ldrb	r3, [r7, #7]
 8002e64:	2201      	movs	r2, #1
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	609a      	str	r2, [r3, #8]
, port   ( port     )
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	60da      	str	r2, [r3, #12]
{
}
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3714      	adds	r7, #20
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	08006740 	.word	0x08006740

08002e88 <_ZN9EmbSysLib2Hw4Port3Pin7setModeENS1_4ModeE>:
  port.setPinMode( pinId, mode );
}

//-------------------------------------------------------------------
inline void Port::Pin::setMode( Mode mode )
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	70fb      	strb	r3, [r7, #3]
  port.setPinMode( pinId, mode );
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68d8      	ldr	r0, [r3, #12]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	3304      	adds	r3, #4
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	7911      	ldrb	r1, [r2, #4]
 8002ea6:	78fa      	ldrb	r2, [r7, #3]
 8002ea8:	4798      	blx	r3
}
 8002eaa:	bf00      	nop
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <_ZN9EmbSysLib2Hw4Port3Pin3setEv>:

//-------------------------------------------------------------------
inline void Port::Pin::set( void )
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b082      	sub	sp, #8
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  port.set( pinMask );
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68d8      	ldr	r0, [r3, #12]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	3308      	adds	r3, #8
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6892      	ldr	r2, [r2, #8]
 8002ecc:	4611      	mov	r1, r2
 8002ece:	4798      	blx	r3
}
 8002ed0:	bf00      	nop
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <_ZN9EmbSysLib2Hw4Port3Pin3setEb>:

//-------------------------------------------------------------------
inline void Port::Pin::set( bool value )
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	70fb      	strb	r3, [r7, #3]
  if( value )  port.set( pinMask );
 8002ee4:	78fb      	ldrb	r3, [r7, #3]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00b      	beq.n	8002f02 <_ZN9EmbSysLib2Hw4Port3Pin3setEb+0x2a>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68d8      	ldr	r0, [r3, #12]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	3308      	adds	r3, #8
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6892      	ldr	r2, [r2, #8]
 8002efc:	4611      	mov	r1, r2
 8002efe:	4798      	blx	r3
  else         port.clr( pinMask );
}
 8002f00:	e00a      	b.n	8002f18 <_ZN9EmbSysLib2Hw4Port3Pin3setEb+0x40>
  else         port.clr( pinMask );
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68d8      	ldr	r0, [r3, #12]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	3310      	adds	r3, #16
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6892      	ldr	r2, [r2, #8]
 8002f14:	4611      	mov	r1, r2
 8002f16:	4798      	blx	r3
}
 8002f18:	bf00      	nop
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <_ZN9EmbSysLib2Hw4Port3Pin3clrEv>:

//-------------------------------------------------------------------
inline void Port::Pin::clr( void )
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  port.clr( pinMask );
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68d8      	ldr	r0, [r3, #12]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	3310      	adds	r3, #16
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	6892      	ldr	r2, [r2, #8]
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	4798      	blx	r3
}
 8002f3e:	bf00      	nop
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <_ZN9EmbSysLib2Hw4Port3Pin3getEv>:

//-------------------------------------------------------------------
inline bool Port::Pin::get( void )
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b082      	sub	sp, #8
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  return( (port.get() & pinMask) != 0 );
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	3314      	adds	r3, #20
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4610      	mov	r0, r2
 8002f5e:	4798      	blx	r3
 8002f60:	4602      	mov	r2, r0
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	4013      	ands	r3, r2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	bf14      	ite	ne
 8002f6c:	2301      	movne	r3, #1
 8002f6e:	2300      	moveq	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <_ZN9EmbSysLib2Hw9SPImasterC1Ev>:
// 
// cHwSPImaster
//
//*******************************************************************
//-------------------------------------------------------------------
SPImaster::SPImaster( void )
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	4a04      	ldr	r2, [pc, #16]	@ (8002f98 <_ZN9EmbSysLib2Hw9SPImasterC1Ev+0x1c>)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	601a      	str	r2, [r3, #0]
{
  // nothing to do ...
}
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bc80      	pop	{r7}
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	080066f4 	.word	0x080066f4

08002f9c <_ZN9EmbSysLib2Hw9SPImaster6Device10transceiveEPht>:
}

//-------------------------------------------------------------------
void SPImaster::Device::transceive( BYTE *data, 
                                    WORD  size )
{
 8002f9c:	b5b0      	push	{r4, r5, r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	80fb      	strh	r3, [r7, #6]
  start();
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f7fe f806 	bl	8000fbc <_ZN9EmbSysLib2Hw9SPImaster6Device5startEv>
  for( WORD i = 0; i < size; i++ )
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	82fb      	strh	r3, [r7, #22]
 8002fb4:	e013      	b.n	8002fde <_ZN9EmbSysLib2Hw9SPImaster6Device10transceiveEPht+0x42>
  {
    data[i] = spi.transceiveByte(data[i]);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6818      	ldr	r0, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	8afa      	ldrh	r2, [r7, #22]
 8002fc4:	68b9      	ldr	r1, [r7, #8]
 8002fc6:	440a      	add	r2, r1
 8002fc8:	7815      	ldrb	r5, [r2, #0]
 8002fca:	8afa      	ldrh	r2, [r7, #22]
 8002fcc:	68b9      	ldr	r1, [r7, #8]
 8002fce:	188c      	adds	r4, r1, r2
 8002fd0:	4629      	mov	r1, r5
 8002fd2:	4798      	blx	r3
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	7023      	strb	r3, [r4, #0]
  for( WORD i = 0; i < size; i++ )
 8002fd8:	8afb      	ldrh	r3, [r7, #22]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	82fb      	strh	r3, [r7, #22]
 8002fde:	8afa      	ldrh	r2, [r7, #22]
 8002fe0:	88fb      	ldrh	r3, [r7, #6]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d3e7      	bcc.n	8002fb6 <_ZN9EmbSysLib2Hw9SPImaster6Device10transceiveEPht+0x1a>
  }
  stop();
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f7fd fff5 	bl	8000fd6 <_ZN9EmbSysLib2Hw9SPImaster6Device4stopEv>
}
 8002fec:	bf00      	nop
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bdb0      	pop	{r4, r5, r7, pc}

08002ff4 <_ZN9EmbSysLib2Hw5TimerC1Et>:
//
// Timer
//
//*******************************************************************
//-------------------------------------------------------------------
Timer::Timer( WORD moduleId )
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	807b      	strh	r3, [r7, #2]
: report( moduleId )
 8003000:	4a09      	ldr	r2, [pc, #36]	@ (8003028 <_ZN9EmbSysLib2Hw5TimerC1Et+0x34>)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	3308      	adds	r3, #8
 800300a:	4618      	mov	r0, r3
 800300c:	f000 fd4c 	bl	8003aa8 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEEC1Ev>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	330c      	adds	r3, #12
 8003014:	887a      	ldrh	r2, [r7, #2]
 8003016:	4611      	mov	r1, r2
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff fccf 	bl	80029bc <_ZN9EmbSysLib3Std6ReportC1Et>
{
}
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4618      	mov	r0, r3
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	080067a4 	.word	0x080067a4

0800302c <_ZN9EmbSysLib2Hw5Timer12getCycleTimeEv>:

//-------------------------------------------------------------------
DWORD Timer::getCycleTime( void )
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  return( cycleTime );
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
}
 8003038:	4618      	mov	r0, r3
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	bc80      	pop	{r7}
 8003040:	4770      	bx	lr

08003042 <_ZN9EmbSysLib2Hw5Timer3addEPNS1_4TaskE>:

//-------------------------------------------------------------------
void Timer::add( Timer::Task *ptr )
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b082      	sub	sp, #8
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
 800304a:	6039      	str	r1, [r7, #0]
  isrSeq.add( ptr );
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3308      	adds	r3, #8
 8003050:	6839      	ldr	r1, [r7, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f000 fd35 	bl	8003ac2 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_>
}
 8003058:	bf00      	nop
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <_ZN9EmbSysLib2Hw5Timer10isrHandlerEv>:

//-------------------------------------------------------------------
inline void Timer::isrHandler( void )
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  Task *ptr = isrSeq.getFirst();
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3308      	adds	r3, #8
 800306c:	4618      	mov	r0, r3
 800306e:	f000 fd53 	bl	8003b18 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE8getFirstEv>
 8003072:	60f8      	str	r0, [r7, #12]
  while( ptr )
 8003074:	e00a      	b.n	800308c <_ZN9EmbSysLib2Hw5Timer10isrHandlerEv+0x2c>
  {
    ptr->update();
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	4798      	blx	r3
    ptr = ptr->getNext();
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	3304      	adds	r3, #4
 8003084:	4618      	mov	r0, r3
 8003086:	f000 fd52 	bl	8003b2e <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE4Item7getNextEv>
 800308a:	60f8      	str	r0, [r7, #12]
  while( ptr )
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f1      	bne.n	8003076 <_ZN9EmbSysLib2Hw5Timer10isrHandlerEv+0x16>
  }
}
 8003092:	bf00      	nop
 8003094:	bf00      	nop
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <_ZN9EmbSysLib2Hw4UartC1Ettt>:
//
// Uart
//
//*******************************************************************
//-------------------------------------------------------------------
Uart::Uart( WORD moduleId, WORD sizeRxBuf, WORD sizeTxBuf )
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	4608      	mov	r0, r1
 80030a6:	4611      	mov	r1, r2
 80030a8:	461a      	mov	r2, r3
 80030aa:	4603      	mov	r3, r0
 80030ac:	817b      	strh	r3, [r7, #10]
 80030ae:	460b      	mov	r3, r1
 80030b0:	813b      	strh	r3, [r7, #8]
 80030b2:	4613      	mov	r3, r2
 80030b4:	80fb      	strh	r3, [r7, #6]

: dataRxBuf( sizeRxBuf ) // initialize both FIFOs
, dataTxBuf( sizeTxBuf )
, report( moduleId )
 80030b6:	4a1f      	ldr	r2, [pc, #124]	@ (8003134 <_ZN9EmbSysLib2Hw4UartC1Ettt+0x98>)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	601a      	str	r2, [r3, #0]
: dataRxBuf( sizeRxBuf ) // initialize both FIFOs
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	3304      	adds	r3, #4
 80030c0:	893a      	ldrh	r2, [r7, #8]
 80030c2:	4611      	mov	r1, r2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f000 fd3d 	bl	8003b44 <_ZN9EmbSysLib3Std4FifoIhEC1Et>
, dataTxBuf( sizeTxBuf )
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	3310      	adds	r3, #16
 80030ce:	88fa      	ldrh	r2, [r7, #6]
 80030d0:	4611      	mov	r1, r2
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 fd36 	bl	8003b44 <_ZN9EmbSysLib3Std4FifoIhEC1Et>
, report( moduleId )
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	331e      	adds	r3, #30
 80030dc:	897a      	ldrh	r2, [r7, #10]
 80030de:	4611      	mov	r1, r2
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff fc6b 	bl	80029bc <_ZN9EmbSysLib3Std6ReportC1Et>
{
  if(   dataRxBuf.getSize() != sizeRxBuf
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	3304      	adds	r3, #4
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 fd55 	bl	8003b9a <_ZN9EmbSysLib3Std4FifoIhE7getSizeEv>
 80030f0:	4603      	mov	r3, r0
 80030f2:	461a      	mov	r2, r3
     || dataTxBuf.getSize() != sizeTxBuf )
 80030f4:	893b      	ldrh	r3, [r7, #8]
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d109      	bne.n	800310e <_ZN9EmbSysLib2Hw4UartC1Ettt+0x72>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	3310      	adds	r3, #16
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 fd4b 	bl	8003b9a <_ZN9EmbSysLib3Std4FifoIhE7getSizeEv>
 8003104:	4603      	mov	r3, r0
 8003106:	461a      	mov	r2, r3
 8003108:	88fb      	ldrh	r3, [r7, #6]
 800310a:	4293      	cmp	r3, r2
 800310c:	d001      	beq.n	8003112 <_ZN9EmbSysLib2Hw4UartC1Ettt+0x76>
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <_ZN9EmbSysLib2Hw4UartC1Ettt+0x78>
 8003112:	2300      	movs	r3, #0
  if(   dataRxBuf.getSize() != sizeRxBuf
 8003114:	2b00      	cmp	r3, #0
 8003116:	d005      	beq.n	8003124 <_ZN9EmbSysLib2Hw4UartC1Ettt+0x88>
  {
    report.error( ReportID_Hw::Event::MEMORY_ALLOCTION_ERROR );
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	331e      	adds	r3, #30
 800311c:	2105      	movs	r1, #5
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff fc80 	bl	8002a24 <_ZN9EmbSysLib3Std6Report5errorEt>
  }
  txReady = true;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2201      	movs	r2, #1
 8003128:	771a      	strb	r2, [r3, #28]
}
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	4618      	mov	r0, r3
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	08006694 	.word	0x08006694

08003138 <_ZN9EmbSysLib2Hw4Uart5isrRxEv>:

//-------------------------------------------------------------------
void Uart::isrRx( void )
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  BYTE data = getByte(); // read data from hardware
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	332c      	adds	r3, #44	@ 0x2c
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	4798      	blx	r3
 800314c:	4603      	mov	r3, r0
 800314e:	73fb      	strb	r3, [r7, #15]

  dataRxBuf << data;     // pipe data into FIFO
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3304      	adds	r3, #4
 8003154:	f107 020f 	add.w	r2, r7, #15
 8003158:	4611      	mov	r1, r2
 800315a:	4618      	mov	r0, r3
 800315c:	f000 fd28 	bl	8003bb0 <_ZN9EmbSysLib3Std4FifoIhElsERKh>
}
 8003160:	bf00      	nop
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <_ZN9EmbSysLib2Hw4Uart5isrTxEv>:

//-------------------------------------------------------------------
inline void Uart::isrTx( void )
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  BYTE data = 0;
 8003170:	2300      	movs	r3, #0
 8003172:	73fb      	strb	r3, [r7, #15]

  if( !dataTxBuf.isEmpty() ) // data to been sent?
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3310      	adds	r3, #16
 8003178:	4618      	mov	r0, r3
 800317a:	f000 fd4f 	bl	8003c1c <_ZN9EmbSysLib3Std4FifoIhE7isEmptyEv>
 800317e:	4603      	mov	r3, r0
 8003180:	f083 0301 	eor.w	r3, r3, #1
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d013      	beq.n	80031b2 <_ZN9EmbSysLib2Hw4Uart5isrTxEv+0x4a>
  {
    dataTxBuf >> data;       // read data from FIFO
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	3310      	adds	r3, #16
 800318e:	f107 020f 	add.w	r2, r7, #15
 8003192:	4611      	mov	r1, r2
 8003194:	4618      	mov	r0, r3
 8003196:	f000 fd55 	bl	8003c44 <_ZN9EmbSysLib3Std4FifoIhErsERh>
    txReady = false;         // set flag before setByte() because
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	771a      	strb	r2, [r3, #28]
                             // some hardware doesn't support
                             // interrupts and isrTx is called recursiv
    setByte( data );         // write data to hardware
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	3328      	adds	r3, #40	@ 0x28
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	7bfa      	ldrb	r2, [r7, #15]
 80031aa:	4611      	mov	r1, r2
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	4798      	blx	r3
  }
  else
  {
    txReady = true;          // we are ready
  }
}
 80031b0:	e002      	b.n	80031b8 <_ZN9EmbSysLib2Hw4Uart5isrTxEv+0x50>
    txReady = true;          // we are ready
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	771a      	strb	r2, [r3, #28]
}
 80031b8:	bf00      	nop
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <_ZN9EmbSysLib2Hw4Uart12transmitByteEh>:

//-------------------------------------------------------------------
void Uart::transmitByte( BYTE data )
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	460b      	mov	r3, r1
 80031ca:	70fb      	strb	r3, [r7, #3]
  while( dataTxBuf.isFull() ) // wait until FIFO is ready
 80031cc:	e00a      	b.n	80031e4 <_ZN9EmbSysLib2Hw4Uart12transmitByteEh+0x24>
  {
    if( txReady )             // this case is an error:
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	7f1b      	ldrb	r3, [r3, #28]
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d005      	beq.n	80031e4 <_ZN9EmbSysLib2Hw4Uart12transmitByteEh+0x24>
                              //   FIFO is full,
                              //   but isrTx is not running
    {
      isrTx();                // call isrTx explicit
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	3320      	adds	r3, #32
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	4798      	blx	r3
  while( dataTxBuf.isFull() ) // wait until FIFO is ready
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3310      	adds	r3, #16
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 fd5f 	bl	8003cac <_ZN9EmbSysLib3Std4FifoIhE6isFullEv>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1ec      	bne.n	80031ce <_ZN9EmbSysLib2Hw4Uart12transmitByteEh+0xe>
    }
                              // else: Data transfer is running,
                              //       we have to wait until complete
  }

  dataTxBuf << data;          // pipe data into FIFO
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3310      	adds	r3, #16
 80031f8:	1cfa      	adds	r2, r7, #3
 80031fa:	4611      	mov	r1, r2
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 fcd7 	bl	8003bb0 <_ZN9EmbSysLib3Std4FifoIhElsERKh>

  if( txReady )               // at first time, isrTx has to be
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	7f1b      	ldrb	r3, [r3, #28]
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d005      	beq.n	8003218 <_ZN9EmbSysLib2Hw4Uart12transmitByteEh+0x58>
                              // called explicit without interrupt
  {
    isrTx();
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	3320      	adds	r3, #32
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	4798      	blx	r3
  }
}
 8003218:	bf00      	nop
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <_ZN9EmbSysLib2Hw4Uart3setEh>:

//-------------------------------------------------------------------
void Uart::set( BYTE data )
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	460b      	mov	r3, r1
 800322a:	70fb      	strb	r3, [r7, #3]
  transmitByte( data );
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	3324      	adds	r3, #36	@ 0x24
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	78fa      	ldrb	r2, [r7, #3]
 8003236:	4611      	mov	r1, r2
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	4798      	blx	r3
}
 800323c:	bf00      	nop
 800323e:	3708      	adds	r7, #8
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <_ZN9EmbSysLib2Hw4Uart3setEPKht>:

//-------------------------------------------------------------------
void Uart::set( const BYTE *data, WORD length )
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	4613      	mov	r3, r2
 8003250:	80fb      	strh	r3, [r7, #6]
  while( length-- )
 8003252:	e00a      	b.n	800326a <_ZN9EmbSysLib2Hw4Uart3setEPKht+0x26>
  {
    transmitByte( *(data++ ) ); // put a character and set pointer to next
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	3324      	adds	r3, #36	@ 0x24
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	1c59      	adds	r1, r3, #1
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	4619      	mov	r1, r3
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	4790      	blx	r2
  while( length-- )
 800326a:	88fb      	ldrh	r3, [r7, #6]
 800326c:	1e5a      	subs	r2, r3, #1
 800326e:	80fa      	strh	r2, [r7, #6]
 8003270:	2b00      	cmp	r3, #0
 8003272:	bf14      	ite	ne
 8003274:	2301      	movne	r3, #1
 8003276:	2300      	moveq	r3, #0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1ea      	bne.n	8003254 <_ZN9EmbSysLib2Hw4Uart3setEPKht+0x10>
  }
}
 800327e:	bf00      	nop
 8003280:	bf00      	nop
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <_ZN9EmbSysLib2Hw4Uart3setEPKc>:

//-------------------------------------------------------------------
void Uart::set( const char *str )
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  while( *str )                // until end of null terminated string
 8003292:	e00a      	b.n	80032aa <_ZN9EmbSysLib2Hw4Uart3setEPKc+0x22>
  {
    transmitByte( *(str++ ) ); // put a character and set pointer to next
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	3324      	adds	r3, #36	@ 0x24
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	1c59      	adds	r1, r3, #1
 80032a0:	6039      	str	r1, [r7, #0]
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	4619      	mov	r1, r3
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	4790      	blx	r2
  while( *str )                // until end of null terminated string
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1f0      	bne.n	8003294 <_ZN9EmbSysLib2Hw4Uart3setEPKc+0xc>
  }
}
 80032b2:	bf00      	nop
 80032b4:	bf00      	nop
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <_ZN9EmbSysLib2Hw4Uart14isTxBufferFullEv>:

//-------------------------------------------------------------------
inline bool Uart::isTxBufferFull( void )
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  return( dataTxBuf.isFull() );
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3310      	adds	r3, #16
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 fcef 	bl	8003cac <_ZN9EmbSysLib3Std4FifoIhE6isFullEv>
 80032ce:	4603      	mov	r3, r0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <_ZN9EmbSysLib2Hw4Uart20getFifoRemainingSizeEv>:

//-------------------------------------------------------------------
inline WORD Uart::getFifoRemainingSize( void )
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  return( dataTxBuf.getFree() );
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3310      	adds	r3, #16
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 fcf7 	bl	8003cd8 <_ZN9EmbSysLib3Std4FifoIhE7getFreeEv>
 80032ea:	4603      	mov	r3, r0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <_ZN9EmbSysLib2Hw4Uart3getERh>:

//-------------------------------------------------------------------
bool Uart::get( BYTE &data )
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  BYTE tmp = 0;
 80032fe:	2300      	movs	r3, #0
 8003300:	73fb      	strb	r3, [r7, #15]

  if( dataRxBuf >> tmp )   // is there a data byte in the FIFO?
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	3304      	adds	r3, #4
 8003306:	f107 020f 	add.w	r2, r7, #15
 800330a:	4611      	mov	r1, r2
 800330c:	4618      	mov	r0, r3
 800330e:	f000 fc99 	bl	8003c44 <_ZN9EmbSysLib3Std4FifoIhErsERh>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d004      	beq.n	8003322 <_ZN9EmbSysLib2Hw4Uart3getERh+0x2e>
  {
    data = tmp;            // copy data byte to pointer
 8003318:	7bfa      	ldrb	r2, [r7, #15]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	701a      	strb	r2, [r3, #0]
    return( true );        // yes, we received a data byte
 800331e:	2301      	movs	r3, #1
 8003320:	e000      	b.n	8003324 <_ZN9EmbSysLib2Hw4Uart3getERh+0x30>
  }
  else
  {
    return( false );       // no data byte received
 8003322:	2300      	movs	r3, #0
  }
}
 8003324:	4618      	mov	r0, r3
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <_ZN9EmbSysLib2Hw4Uart3getEv>:

//-------------------------------------------------------------------
BYTE Uart::get( void )
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  BYTE tmp = 0;
 8003334:	2300      	movs	r3, #0
 8003336:	73fb      	strb	r3, [r7, #15]

  if( get(tmp) )    // is there a data byte in the FIFO?
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	3314      	adds	r3, #20
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f107 020f 	add.w	r2, r7, #15
 8003344:	4611      	mov	r1, r2
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	4798      	blx	r3
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <_ZN9EmbSysLib2Hw4Uart3getEv+0x28>
  {
    return( tmp );  // yes, we received a data byte
 8003350:	7bfb      	ldrb	r3, [r7, #15]
 8003352:	e000      	b.n	8003356 <_ZN9EmbSysLib2Hw4Uart3getEv+0x2a>
  }
  else
  {
    return( 0 );    // no data byte received
 8003354:	2300      	movs	r3, #0
  }
}
 8003356:	4618      	mov	r0, r3
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <_ZN9EmbSysLib3Dev6AnalogC1Ehff>:
//
// Analog
//
//*******************************************************************
//-------------------------------------------------------------------
Analog::Analog( BYTE  channelIn,
 800335e:	b480      	push	{r7}
 8003360:	b085      	sub	sp, #20
 8003362:	af00      	add	r7, sp, #0
 8003364:	60f8      	str	r0, [r7, #12]
 8003366:	607a      	str	r2, [r7, #4]
 8003368:	603b      	str	r3, [r7, #0]
 800336a:	460b      	mov	r3, r1
 800336c:	72fb      	strb	r3, [r7, #11]
                float gainIn,
                float offsetIn )
{
  channel = channelIn;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	7afa      	ldrb	r2, [r7, #11]
 8003372:	701a      	strb	r2, [r3, #0]
  gain    = gainIn;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	605a      	str	r2, [r3, #4]
  offs    = offsetIn;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	609a      	str	r2, [r3, #8]
}
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4618      	mov	r0, r3
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr

0800338c <_ZN9EmbSysLib3Dev8AnalogInC1Ehff>:
//
// AnalogIn
//
//*******************************************************************
//-------------------------------------------------------------------
AnalogIn::AnalogIn( BYTE  channel,
 800338c:	b590      	push	{r4, r7, lr}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	607a      	str	r2, [r7, #4]
 8003396:	603b      	str	r3, [r7, #0]
 8003398:	460b      	mov	r3, r1
 800339a:	72fb      	strb	r3, [r7, #11]
                    float max,
                    float min )

: Analog( channel,
          (max-min)/(float)0xFFFF,
          min )
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	1d1c      	adds	r4, r3, #4
          (max-min)/(float)0xFFFF,
 80033a0:	6839      	ldr	r1, [r7, #0]
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7fd fafe 	bl	80009a4 <__aeabi_fsub>
 80033a8:	4603      	mov	r3, r0
          min )
 80033aa:	4909      	ldr	r1, [pc, #36]	@ (80033d0 <_ZN9EmbSysLib3Dev8AnalogInC1Ehff+0x44>)
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7fd fcb7 	bl	8000d20 <__aeabi_fdiv>
 80033b2:	4603      	mov	r3, r0
 80033b4:	461a      	mov	r2, r3
 80033b6:	7af9      	ldrb	r1, [r7, #11]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	4620      	mov	r0, r4
 80033bc:	f7ff ffcf 	bl	800335e <_ZN9EmbSysLib3Dev6AnalogC1Ehff>
 80033c0:	4a04      	ldr	r2, [pc, #16]	@ (80033d4 <_ZN9EmbSysLib3Dev8AnalogInC1Ehff+0x48>)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	601a      	str	r2, [r3, #0]
{
}
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4618      	mov	r0, r3
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd90      	pop	{r4, r7, pc}
 80033d0:	477fff00 	.word	0x477fff00
 80033d4:	0800661c 	.word	0x0800661c

080033d8 <_ZN9EmbSysLib3Dev8AnalogIn3getEv>:

//-------------------------------------------------------------------
inline float AnalogIn::get( void )
{
 80033d8:	b590      	push	{r4, r7, lr}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  return( gain*getRaw() + offs );
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689c      	ldr	r4, [r3, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	3308      	adds	r3, #8
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	4798      	blx	r3
 80033f0:	4603      	mov	r3, r0
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fd fb8c 	bl	8000b10 <__aeabi_i2f>
 80033f8:	4603      	mov	r3, r0
 80033fa:	4619      	mov	r1, r3
 80033fc:	4620      	mov	r0, r4
 80033fe:	f7fd fbdb 	bl	8000bb8 <__aeabi_fmul>
 8003402:	4603      	mov	r3, r0
 8003404:	461a      	mov	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	4619      	mov	r1, r3
 800340c:	4610      	mov	r0, r2
 800340e:	f7fd facb 	bl	80009a8 <__addsf3>
 8003412:	4603      	mov	r3, r0
}
 8003414:	4618      	mov	r0, r3
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	bd90      	pop	{r4, r7, pc}

0800341c <_ZN9EmbSysLib3Dev8AnalogIncvfEv>:

//-------------------------------------------------------------------
inline AnalogIn::operator float( void )
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  return( get() );
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	4798      	blx	r3
 800342e:	4603      	mov	r3, r0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <_ZN9EmbSysLib3Dev11AnalogInAdcC1ERNS_2Hw3AdcEhffh>:
//
// AnalogInAdc
//
//*******************************************************************
//-------------------------------------------------------------------
AnalogInAdc::AnalogInAdc( Adc   &adcIn,
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	603b      	str	r3, [r7, #0]
 8003444:	4613      	mov	r3, r2
 8003446:	71fb      	strb	r3, [r7, #7]
                          float  max,
                          float  min,
                          BYTE   para )

: AnalogIn( channel, max, min ),
  adc     ( adcIn )
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	79f9      	ldrb	r1, [r7, #7]
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	f7ff ff9c 	bl	800338c <_ZN9EmbSysLib3Dev8AnalogInC1Ehff>
 8003454:	4a0b      	ldr	r2, [pc, #44]	@ (8003484 <_ZN9EmbSysLib3Dev11AnalogInAdcC1ERNS_2Hw3AdcEhffh+0x4c>)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	611a      	str	r2, [r3, #16]

{
  this->para = para;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	7f3a      	ldrb	r2, [r7, #28]
 8003464:	751a      	strb	r2, [r3, #20]
  adc.enable( channel, para );
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6918      	ldr	r0, [r3, #16]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	3304      	adds	r3, #4
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	7f3a      	ldrb	r2, [r7, #28]
 8003476:	79f9      	ldrb	r1, [r7, #7]
 8003478:	4798      	blx	r3
}
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	4618      	mov	r0, r3
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	08006604 	.word	0x08006604

08003488 <_ZN9EmbSysLib3Dev11AnalogInAdc6getRawEv>:

//-------------------------------------------------------------------
WORD AnalogInAdc::getRaw( void )
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  return( adc.get( channel ) );
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6918      	ldr	r0, [r3, #16]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	3308      	adds	r3, #8
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	7912      	ldrb	r2, [r2, #4]
 80034a2:	4611      	mov	r1, r2
 80034a4:	4798      	blx	r3
 80034a6:	4603      	mov	r3, r0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <_ZN9EmbSysLib3Dev11AnalogInAdc6enableEv>:

//-------------------------------------------------------------------
void AnalogInAdc::enable()
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
    adc.enable( channel, para );
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6918      	ldr	r0, [r3, #16]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	3304      	adds	r3, #4
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	7911      	ldrb	r1, [r2, #4]
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	7d12      	ldrb	r2, [r2, #20]
 80034ce:	4798      	blx	r3
}
 80034d0:	bf00      	nop
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>:
//
// Digital
//
//*******************************************************************
//-------------------------------------------------------------------
Digital::Digital( Port  &port,
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	4611      	mov	r1, r2
 80034e4:	461a      	mov	r2, r3
 80034e6:	460b      	mov	r3, r1
 80034e8:	71fb      	strb	r3, [r7, #7]
 80034ea:	4613      	mov	r3, r2
 80034ec:	71bb      	strb	r3, [r7, #6]
                  BYTE   pinId,
                  Mode   mode,
                  bool   def )
: pin( port, pinId )
 80034ee:	4a13      	ldr	r2, [pc, #76]	@ (800353c <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb+0x64>)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	3308      	adds	r3, #8
 80034f8:	79fa      	ldrb	r2, [r7, #7]
 80034fa:	68b9      	ldr	r1, [r7, #8]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff fca3 	bl	8002e48 <_ZN9EmbSysLib2Hw4Port3PinC1ERS1_h>
{
  valueIn    = 0;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	711a      	strb	r2, [r3, #4]
  valueOut   = 0;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	715a      	strb	r2, [r3, #5]
  pinDefault = def;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	7e3a      	ldrb	r2, [r7, #24]
 8003512:	719a      	strb	r2, [r3, #6]

  pin.set( def );
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	3308      	adds	r3, #8
 8003518:	7e3a      	ldrb	r2, [r7, #24]
 800351a:	4611      	mov	r1, r2
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff fcdb 	bl	8002ed8 <_ZN9EmbSysLib2Hw4Port3Pin3setEb>
  pin.setMode( (Port::Mode)mode );
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	3308      	adds	r3, #8
 8003526:	79ba      	ldrb	r2, [r7, #6]
 8003528:	4611      	mov	r1, r2
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff fcac 	bl	8002e88 <_ZN9EmbSysLib2Hw4Port3Pin7setModeENS1_4ModeE>
}
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	080065d4 	.word	0x080065d4

08003540 <_ZN9EmbSysLib3Dev7Digital7setModeENS1_4ModeE>:

//-------------------------------------------------------------------
void Digital::setMode( Mode mode )
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	460b      	mov	r3, r1
 800354a:	70fb      	strb	r3, [r7, #3]
  pin.setMode( (Port::Mode)mode );
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	3308      	adds	r3, #8
 8003550:	78fa      	ldrb	r2, [r7, #3]
 8003552:	4611      	mov	r1, r2
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff fc97 	bl	8002e88 <_ZN9EmbSysLib2Hw4Port3Pin7setModeENS1_4ModeE>
}
 800355a:	bf00      	nop
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <_ZN9EmbSysLib3Dev7Digital3setEb>:

//-------------------------------------------------------------------
void Digital::set( bool value )
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
 800356a:	460b      	mov	r3, r1
 800356c:	70fb      	strb	r3, [r7, #3]
  valueOut = value;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	78fa      	ldrb	r2, [r7, #3]
 8003572:	715a      	strb	r2, [r3, #5]
  pin.set( value ^ pinDefault );
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f103 0008 	add.w	r0, r3, #8
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	799b      	ldrb	r3, [r3, #6]
 800357e:	78fa      	ldrb	r2, [r7, #3]
 8003580:	429a      	cmp	r2, r3
 8003582:	bf14      	ite	ne
 8003584:	2301      	movne	r3, #1
 8003586:	2300      	moveq	r3, #0
 8003588:	b2db      	uxtb	r3, r3
 800358a:	4619      	mov	r1, r3
 800358c:	f7ff fca4 	bl	8002ed8 <_ZN9EmbSysLib2Hw4Port3Pin3setEb>
}
 8003590:	bf00      	nop
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <_ZN9EmbSysLib3Dev7Digital3getEv>:

//-------------------------------------------------------------------
bool Digital::get( void )
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  return( pin.get() != pinDefault );
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3308      	adds	r3, #8
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff fcce 	bl	8002f46 <_ZN9EmbSysLib2Hw4Port3Pin3getEv>
 80035aa:	4603      	mov	r3, r0
 80035ac:	461a      	mov	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	799b      	ldrb	r3, [r3, #6]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	bf14      	ite	ne
 80035b6:	2301      	movne	r3, #1
 80035b8:	2300      	moveq	r3, #0
 80035ba:	b2db      	uxtb	r3, r3
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3708      	adds	r7, #8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <_ZN9EmbSysLib3Dev10ScreenCharC1ERNS_2Hw11DisplayCharE>:
//
// ScreenChar
//
//*******************************************************************
//-------------------------------------------------------------------
ScreenChar::ScreenChar( DisplayChar &display )
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]

: display( display )
 80035ce:	4a12      	ldr	r2, [pc, #72]	@ (8003618 <_ZN9EmbSysLib3Dev10ScreenCharC1ERNS_2Hw11DisplayCharE+0x54>)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	605a      	str	r2, [r3, #4]

{
  maxStrLength = display.getNumberOfColumns();
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	3318      	adds	r3, #24
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6838      	ldr	r0, [r7, #0]
 80035e4:	4798      	blx	r3
 80035e6:	4603      	mov	r3, r0
 80035e8:	461a      	mov	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	721a      	strb	r2, [r3, #8]
  str = new char[maxStrLength+1];
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	7a1b      	ldrb	r3, [r3, #8]
 80035f2:	3301      	adds	r3, #1
 80035f4:	4618      	mov	r0, r3
 80035f6:	f002 f9ab 	bl	8005950 <_Znaj>
 80035fa:	4603      	mov	r3, r0
 80035fc:	461a      	mov	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	60da      	str	r2, [r3, #12]
  display.clear();
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6838      	ldr	r0, [r7, #0]
 800360a:	4798      	blx	r3
}
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4618      	mov	r0, r3
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	080065c0 	.word	0x080065c0

0800361c <_ZN9EmbSysLib3Dev10ScreenChar5clearEv>:

//-------------------------------------------------------------------
void ScreenChar::clear(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  display.clear();
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4610      	mov	r0, r2
 8003632:	4798      	blx	r3
}
 8003634:	bf00      	nop
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <_ZN9EmbSysLib3Dev10ScreenChar7refreshEv>:

//-------------------------------------------------------------------
void ScreenChar::refresh(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  display.refresh();
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	3304      	adds	r3, #4
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4610      	mov	r0, r2
 8003654:	4798      	blx	r3
}
 8003656:	bf00      	nop
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <_ZN9EmbSysLib3Dev10ScreenChar6printfEhhPKcz>:
//-------------------------------------------------------------------
void ScreenChar::printf( BYTE        line,
                         BYTE        column,
                         const char *format,
                         ... )
{
 800365e:	b408      	push	{r3}
 8003660:	b580      	push	{r7, lr}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	460b      	mov	r3, r1
 800366a:	70fb      	strb	r3, [r7, #3]
 800366c:	4613      	mov	r3, r2
 800366e:	70bb      	strb	r3, [r7, #2]
  va_list argzeiger;
  va_start ( argzeiger, format );
 8003670:	f107 0320 	add.w	r3, r7, #32
 8003674:	60fb      	str	r3, [r7, #12]
  vsnprintf( str, maxStrLength+1, format, argzeiger );
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68d8      	ldr	r0, [r3, #12]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	7a1b      	ldrb	r3, [r3, #8]
 800367e:	3301      	adds	r3, #1
 8003680:	4619      	mov	r1, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	69fa      	ldr	r2, [r7, #28]
 8003686:	f002 fa61 	bl	8005b4c <vsniprintf>
  va_end   ( argzeiger );

  display.gotoTextPos( line, column );
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6858      	ldr	r0, [r3, #4]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	3308      	adds	r3, #8
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	78ba      	ldrb	r2, [r7, #2]
 800369a:	78f9      	ldrb	r1, [r7, #3]
 800369c:	4798      	blx	r3
  display.putString( str );
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6858      	ldr	r0, [r3, #4]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	3310      	adds	r3, #16
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	68d2      	ldr	r2, [r2, #12]
 80036b0:	4611      	mov	r1, r2
 80036b2:	4798      	blx	r3
}
 80036b4:	bf00      	nop
 80036b6:	3714      	adds	r7, #20
 80036b8:	46bd      	mov	sp, r7
 80036ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80036be:	b001      	add	sp, #4
 80036c0:	4770      	bx	lr
	...

080036c4 <_ZN9EmbSysLib3Dev8TerminalC1ERNS_2Hw4UartEttPKcS6_>:
//
// Terminal
//
//*******************************************************************
//-------------------------------------------------------------------
Terminal::Terminal( Uart       &uart,
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	4611      	mov	r1, r2
 80036d0:	461a      	mov	r2, r3
 80036d2:	460b      	mov	r3, r1
 80036d4:	80fb      	strh	r3, [r7, #6]
 80036d6:	4613      	mov	r3, r2
 80036d8:	80bb      	strh	r3, [r7, #4]
                    WORD        inBufSize,
                    WORD        outBufSize,
                    const char *key,
                    const char *eos )
: uart( uart )
 80036da:	4a1e      	ldr	r2, [pc, #120]	@ (8003754 <_ZN9EmbSysLib3Dev8TerminalC1ERNS_2Hw4UartEttPKcS6_+0x90>)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	605a      	str	r2, [r3, #4]

{
  this->inBufSize  = inBufSize;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	88fa      	ldrh	r2, [r7, #6]
 80036ea:	811a      	strh	r2, [r3, #8]
  this->outBufSize = outBufSize;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	88ba      	ldrh	r2, [r7, #4]
 80036f0:	815a      	strh	r2, [r3, #10]
  this->key        = key;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	60da      	str	r2, [r3, #12]
  this->eos        = eos;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	69fa      	ldr	r2, [r7, #28]
 80036fc:	611a      	str	r2, [r3, #16]
  strIn            = new char[ inBufSize  + 1 ];
 80036fe:	88fb      	ldrh	r3, [r7, #6]
 8003700:	3301      	adds	r3, #1
 8003702:	4618      	mov	r0, r3
 8003704:	f002 f924 	bl	8005950 <_Znaj>
 8003708:	4603      	mov	r3, r0
 800370a:	461a      	mov	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	615a      	str	r2, [r3, #20]
  strOut           = new char[ outBufSize + 1 ];
 8003710:	88bb      	ldrh	r3, [r7, #4]
 8003712:	3301      	adds	r3, #1
 8003714:	4618      	mov	r0, r3
 8003716:	f002 f91b 	bl	8005950 <_Znaj>
 800371a:	4603      	mov	r3, r0
 800371c:	461a      	mov	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	619a      	str	r2, [r3, #24]
  idx              = 0;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	771a      	strb	r2, [r3, #28]
  escape           = 0;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	775a      	strb	r2, [r3, #29]
  last             = 0;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	779a      	strb	r2, [r3, #30]
  pending          = 0;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	849a      	strh	r2, [r3, #36]	@ 0x24
  ctrl             = 0;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	841a      	strh	r2, [r3, #32]
  num              = 0;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	080065a8 	.word	0x080065a8

08003758 <_ZN9EmbSysLib3Dev8Terminal6printfEPKcz>:
  return( 0 );
}

//-------------------------------------------------------------------
void Terminal::printf( const char *format, ... )
{
 8003758:	b40e      	push	{r1, r2, r3}
 800375a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800375c:	b084      	sub	sp, #16
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  va_list argzeiger;

  va_start ( argzeiger, format );
 8003762:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003766:	60fb      	str	r3, [r7, #12]
  vsnprintf( strOut, outBufSize, format, argzeiger );
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6998      	ldr	r0, [r3, #24]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	895b      	ldrh	r3, [r3, #10]
 8003770:	4619      	mov	r1, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003776:	f002 f9e9 	bl	8005b4c <vsniprintf>
  va_end   ( argzeiger );

  // Set output
  uart.set( (BYTE*)strOut, strlen(strOut) );
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685d      	ldr	r5, [r3, #4]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	3304      	adds	r3, #4
 8003786:	681c      	ldr	r4, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	699e      	ldr	r6, [r3, #24]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	4618      	mov	r0, r3
 8003792:	f7fc fd0d 	bl	80001b0 <strlen>
 8003796:	4603      	mov	r3, r0
 8003798:	b29b      	uxth	r3, r3
 800379a:	461a      	mov	r2, r3
 800379c:	4631      	mov	r1, r6
 800379e:	4628      	mov	r0, r5
 80037a0:	47a0      	blx	r4
}
 80037a2:	bf00      	nop
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80037ac:	b003      	add	sp, #12
 80037ae:	4770      	bx	lr

080037b0 <_ZN9EmbSysLib3Dev11TaskManager4TaskC1Ev>:
    //*******************************************************************
    /*!
    \class Task
    \brief Base class for a Task
    */
    class Task : public Timer::Task
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7fd fc18 	bl	8000ff0 <_ZN9EmbSysLib2Hw5Timer4TaskC1Ev>
 80037c0:	4a03      	ldr	r2, [pc, #12]	@ (80037d0 <_ZN9EmbSysLib3Dev11TaskManager4TaskC1Ev+0x20>)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4618      	mov	r0, r3
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	080065b4 	.word	0x080065b4

080037d4 <_ZN9EmbSysLib4Ctrl14DigitalEncoderC1EPNS_3Dev7DigitalERNS2_11TaskManagerE>:
//
// DigitalEncoder
//
//*******************************************************************
//-------------------------------------------------------------------
DigitalEncoder::DigitalEncoder( Digital *btnCtrlIn,
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
                          TaskManager    &taskManager )

: btnCtrl( btnCtrlIn )
, fifo   ( 20 )
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff ffe4 	bl	80037b0 <_ZN9EmbSysLib3Dev11TaskManager4TaskC1Ev>
 80037e8:	4a0c      	ldr	r2, [pc, #48]	@ (800381c <_ZN9EmbSysLib4Ctrl14DigitalEncoderC1EPNS_3Dev7DigitalERNS2_11TaskManagerE+0x48>)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	601a      	str	r2, [r3, #0]
: btnCtrl( btnCtrlIn )
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	609a      	str	r2, [r3, #8]
, fifo   ( 20 )
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	330c      	adds	r3, #12
 80037f8:	2114      	movs	r1, #20
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 fa88 	bl	8003d10 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEEC1Et>

{
  taskManager.add(this);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	3304      	adds	r3, #4
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	4611      	mov	r1, r2
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	4798      	blx	r3
}
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4618      	mov	r0, r3
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	08006594 	.word	0x08006594

08003820 <_ZN9EmbSysLib4Ctrl14DigitalEncoder8getEventEv>:

//-------------------------------------------------------------------
DigitalEncoder::Event DigitalEncoder::getEvent( void )
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  if( fifo.isEmpty() )
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	330c      	adds	r3, #12
 800382c:	4618      	mov	r0, r3
 800382e:	f000 fa9a 	bl	8003d66 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEE7isEmptyEv>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <_ZN9EmbSysLib4Ctrl14DigitalEncoder8getEventEv+0x1c>
  {
    return( NONE );
 8003838:	2300      	movs	r3, #0
 800383a:	e00a      	b.n	8003852 <_ZN9EmbSysLib4Ctrl14DigitalEncoder8getEventEv+0x32>
  }
  else
  {
    Event event = NONE;
 800383c:	2300      	movs	r3, #0
 800383e:	73fb      	strb	r3, [r7, #15]
    fifo >> event;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	330c      	adds	r3, #12
 8003844:	f107 020f 	add.w	r2, r7, #15
 8003848:	4611      	mov	r1, r2
 800384a:	4618      	mov	r0, r3
 800384c:	f000 fa9f 	bl	8003d8e <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEErsERS4_>
    return( event );
 8003850:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv>:

//-------------------------------------------------------------------
void DigitalEncoder::update( void )
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b084      	sub	sp, #16
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  if( !fifo.isFull() )
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	330c      	adds	r3, #12
 8003866:	4618      	mov	r0, r3
 8003868:	f000 fac5 	bl	8003df6 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEE6isFullEv>
 800386c:	4603      	mov	r3, r0
 800386e:	f083 0301 	eor.w	r3, r3, #1
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	d021      	beq.n	80038bc <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv+0x62>
  {
    switch( getIncrement() )
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	3308      	adds	r3, #8
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	4798      	blx	r3
 8003884:	4603      	mov	r3, r0
 8003886:	2b01      	cmp	r3, #1
 8003888:	d002      	beq.n	8003890 <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv+0x36>
 800388a:	2b02      	cmp	r3, #2
 800388c:	d00b      	beq.n	80038a6 <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv+0x4c>
    {
      case LEFT:  fifo << LEFT;    break;
      case RIGHT: fifo << RIGHT;   break;
      default:                     break;
 800388e:	e015      	b.n	80038bc <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv+0x62>
      case LEFT:  fifo << LEFT;    break;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	330c      	adds	r3, #12
 8003894:	2201      	movs	r2, #1
 8003896:	733a      	strb	r2, [r7, #12]
 8003898:	f107 020c 	add.w	r2, r7, #12
 800389c:	4611      	mov	r1, r2
 800389e:	4618      	mov	r0, r3
 80038a0:	f000 fabf 	bl	8003e22 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEElsERKS4_>
 80038a4:	e00a      	b.n	80038bc <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv+0x62>
      case RIGHT: fifo << RIGHT;   break;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	330c      	adds	r3, #12
 80038aa:	2202      	movs	r2, #2
 80038ac:	737a      	strb	r2, [r7, #13]
 80038ae:	f107 020d 	add.w	r2, r7, #13
 80038b2:	4611      	mov	r1, r2
 80038b4:	4618      	mov	r0, r3
 80038b6:	f000 fab4 	bl	8003e22 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEElsERKS4_>
 80038ba:	bf00      	nop
    }
  }

  if( !fifo.isFull() )
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	330c      	adds	r3, #12
 80038c0:	4618      	mov	r0, r3
 80038c2:	f000 fa98 	bl	8003df6 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEE6isFullEv>
 80038c6:	4603      	mov	r3, r0
 80038c8:	f083 0301 	eor.w	r3, r3, #1
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d021      	beq.n	8003916 <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv+0xbc>
  {
    switch( getCtrl() )
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	3304      	adds	r3, #4
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	4798      	blx	r3
 80038de:	4603      	mov	r3, r0
 80038e0:	2b03      	cmp	r3, #3
 80038e2:	d002      	beq.n	80038ea <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv+0x90>
 80038e4:	2b04      	cmp	r3, #4
 80038e6:	d00b      	beq.n	8003900 <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv+0xa6>
    {
      case CTRL_DWN:  fifo << CTRL_DWN;  break;
      case CTRL_UP:   fifo << CTRL_UP;   break;
      default:                           break;
 80038e8:	e015      	b.n	8003916 <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv+0xbc>
      case CTRL_DWN:  fifo << CTRL_DWN;  break;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	330c      	adds	r3, #12
 80038ee:	2203      	movs	r2, #3
 80038f0:	73ba      	strb	r2, [r7, #14]
 80038f2:	f107 020e 	add.w	r2, r7, #14
 80038f6:	4611      	mov	r1, r2
 80038f8:	4618      	mov	r0, r3
 80038fa:	f000 fa92 	bl	8003e22 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEElsERKS4_>
 80038fe:	e00a      	b.n	8003916 <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv+0xbc>
      case CTRL_UP:   fifo << CTRL_UP;   break;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	330c      	adds	r3, #12
 8003904:	2204      	movs	r2, #4
 8003906:	73fa      	strb	r2, [r7, #15]
 8003908:	f107 020f 	add.w	r2, r7, #15
 800390c:	4611      	mov	r1, r2
 800390e:	4618      	mov	r0, r3
 8003910:	f000 fa87 	bl	8003e22 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEElsERKS4_>
 8003914:	bf00      	nop
    }
  }
}
 8003916:	bf00      	nop
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <_ZN9EmbSysLib4Ctrl14DigitalEncoder7getCtrlEv>:

//-------------------------------------------------------------------
DigitalEncoder::Event DigitalEncoder::getCtrl( void )
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b082      	sub	sp, #8
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  if( btnCtrl )
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d012      	beq.n	8003954 <_ZN9EmbSysLib4Ctrl14DigitalEncoder7getCtrlEv+0x36>
  {
    switch( btnCtrl->getEvent() )
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	3318      	adds	r3, #24
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4610      	mov	r0, r2
 800393e:	4798      	blx	r3
 8003940:	4603      	mov	r3, r0
 8003942:	2b01      	cmp	r3, #1
 8003944:	d002      	beq.n	800394c <_ZN9EmbSysLib4Ctrl14DigitalEncoder7getCtrlEv+0x2e>
 8003946:	2b02      	cmp	r3, #2
 8003948:	d002      	beq.n	8003950 <_ZN9EmbSysLib4Ctrl14DigitalEncoder7getCtrlEv+0x32>
    {
      case Digital::ACTIVATED: return( CTRL_DWN );
      case Digital::RELEASED:  return( CTRL_UP );
      default:                 break;
 800394a:	e003      	b.n	8003954 <_ZN9EmbSysLib4Ctrl14DigitalEncoder7getCtrlEv+0x36>
      case Digital::ACTIVATED: return( CTRL_DWN );
 800394c:	2303      	movs	r3, #3
 800394e:	e002      	b.n	8003956 <_ZN9EmbSysLib4Ctrl14DigitalEncoder7getCtrlEv+0x38>
      case Digital::RELEASED:  return( CTRL_UP );
 8003950:	2304      	movs	r3, #4
 8003952:	e000      	b.n	8003956 <_ZN9EmbSysLib4Ctrl14DigitalEncoder7getCtrlEv+0x38>
    }
  }
  return( NONE );
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
	...

08003960 <_ZN9EmbSysLib4Ctrl24DigitalEncoderRotaryknobC1EPNS_3Dev7DigitalES4_S4_RNS2_11TaskManagerE>:
//
// DigitalEncoderRotaryknob
//
//*******************************************************************
//-------------------------------------------------------------------
DigitalEncoderRotaryknob::DigitalEncoderRotaryknob( Digital     *switchA,
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
 800396c:	603b      	str	r3, [r7, #0]
                                                    Digital     *switchB,
                                                    Digital     *btnCtrlIn,
                                                    TaskManager &taskManager )
: DigitalEncoder( btnCtrlIn, taskManager )
, switchA( switchA )
, switchB( switchB )
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	6839      	ldr	r1, [r7, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff ff2d 	bl	80037d4 <_ZN9EmbSysLib4Ctrl14DigitalEncoderC1EPNS_3Dev7DigitalERNS2_11TaskManagerE>
 800397a:	4a07      	ldr	r2, [pc, #28]	@ (8003998 <_ZN9EmbSysLib4Ctrl24DigitalEncoderRotaryknobC1EPNS_3Dev7DigitalES4_S4_RNS2_11TaskManagerE+0x38>)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	601a      	str	r2, [r3, #0]
, switchA( switchA )
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	68ba      	ldr	r2, [r7, #8]
 8003984:	619a      	str	r2, [r3, #24]
, switchB( switchB )
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	61da      	str	r2, [r3, #28]
{
}
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	08006580 	.word	0x08006580

0800399c <_ZN9EmbSysLib4Ctrl24DigitalEncoderRotaryknob12getIncrementEv>:

//-------------------------------------------------------------------
DigitalEncoder::Event DigitalEncoderRotaryknob::getIncrement( void )
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  if( switchA && switchB )
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d062      	beq.n	8003a72 <_ZN9EmbSysLib4Ctrl24DigitalEncoderRotaryknob12getIncrementEv+0xd6>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	69db      	ldr	r3, [r3, #28]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d05e      	beq.n	8003a72 <_ZN9EmbSysLib4Ctrl24DigitalEncoderRotaryknob12getIncrementEv+0xd6>
  {
    switch( switchA->getEvent() )
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	699a      	ldr	r2, [r3, #24]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	3318      	adds	r3, #24
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4610      	mov	r0, r2
 80039c4:	4798      	blx	r3
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d00f      	beq.n	80039ec <_ZN9EmbSysLib4Ctrl24DigitalEncoderRotaryknob12getIncrementEv+0x50>
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d01d      	beq.n	8003a0c <_ZN9EmbSysLib4Ctrl24DigitalEncoderRotaryknob12getIncrementEv+0x70>
    {
      case Digital::ACTIVATED: return( switchB->get()?NONE:LEFT );
      case Digital::RELEASED:  return( switchB->get()?LEFT:NONE );
      default:                 break;
 80039d0:	bf00      	nop
    }

    switch( switchB->getEvent() )
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	69da      	ldr	r2, [r3, #28]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	3318      	adds	r3, #24
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4610      	mov	r0, r2
 80039e2:	4798      	blx	r3
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d023      	beq.n	8003a32 <_ZN9EmbSysLib4Ctrl24DigitalEncoderRotaryknob12getIncrementEv+0x96>
 80039ea:	e01f      	b.n	8003a2c <_ZN9EmbSysLib4Ctrl24DigitalEncoderRotaryknob12getIncrementEv+0x90>
      case Digital::ACTIVATED: return( switchB->get()?NONE:LEFT );
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	69da      	ldr	r2, [r3, #28]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	3314      	adds	r3, #20
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4610      	mov	r0, r2
 80039fc:	4798      	blx	r3
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <_ZN9EmbSysLib4Ctrl24DigitalEncoderRotaryknob12getIncrementEv+0x6c>
 8003a04:	2300      	movs	r3, #0
 8003a06:	e035      	b.n	8003a74 <_ZN9EmbSysLib4Ctrl24DigitalEncoderRotaryknob12getIncrementEv+0xd8>
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e033      	b.n	8003a74 <_ZN9EmbSysLib4Ctrl24DigitalEncoderRotaryknob12getIncrementEv+0xd8>
      case Digital::RELEASED:  return( switchB->get()?LEFT:NONE );
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	69da      	ldr	r2, [r3, #28]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	3314      	adds	r3, #20
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4610      	mov	r0, r2
 8003a1c:	4798      	blx	r3
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <_ZN9EmbSysLib4Ctrl24DigitalEncoderRotaryknob12getIncrementEv+0x8c>
 8003a24:	2301      	movs	r3, #1
 8003a26:	e025      	b.n	8003a74 <_ZN9EmbSysLib4Ctrl24DigitalEncoderRotaryknob12getIncrementEv+0xd8>
 8003a28:	2300      	movs	r3, #0
 8003a2a:	e023      	b.n	8003a74 <_ZN9EmbSysLib4Ctrl24DigitalEncoderRotaryknob12getIncrementEv+0xd8>
    switch( switchB->getEvent() )
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d010      	beq.n	8003a52 <_ZN9EmbSysLib4Ctrl24DigitalEncoderRotaryknob12getIncrementEv+0xb6>
    {
      case Digital::ACTIVATED: return( switchA->get()?NONE:RIGHT );
      case Digital::RELEASED:  return( switchA->get()?RIGHT:NONE );
      default:                 break;
 8003a30:	e01f      	b.n	8003a72 <_ZN9EmbSysLib4Ctrl24DigitalEncoderRotaryknob12getIncrementEv+0xd6>
      case Digital::ACTIVATED: return( switchA->get()?NONE:RIGHT );
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	699a      	ldr	r2, [r3, #24]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	3314      	adds	r3, #20
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4610      	mov	r0, r2
 8003a42:	4798      	blx	r3
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <_ZN9EmbSysLib4Ctrl24DigitalEncoderRotaryknob12getIncrementEv+0xb2>
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	e012      	b.n	8003a74 <_ZN9EmbSysLib4Ctrl24DigitalEncoderRotaryknob12getIncrementEv+0xd8>
 8003a4e:	2302      	movs	r3, #2
 8003a50:	e010      	b.n	8003a74 <_ZN9EmbSysLib4Ctrl24DigitalEncoderRotaryknob12getIncrementEv+0xd8>
      case Digital::RELEASED:  return( switchA->get()?RIGHT:NONE );
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	699a      	ldr	r2, [r3, #24]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	3314      	adds	r3, #20
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4610      	mov	r0, r2
 8003a62:	4798      	blx	r3
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <_ZN9EmbSysLib4Ctrl24DigitalEncoderRotaryknob12getIncrementEv+0xd2>
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	e002      	b.n	8003a74 <_ZN9EmbSysLib4Ctrl24DigitalEncoderRotaryknob12getIncrementEv+0xd8>
 8003a6e:	2300      	movs	r3, #0
 8003a70:	e000      	b.n	8003a74 <_ZN9EmbSysLib4Ctrl24DigitalEncoderRotaryknob12getIncrementEv+0xd8>
    }
  }
  return( NONE );
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE4ItemC1EPS5_>:
      public:
        //-----------------------------------------------------------
        /*! Instatiate a Sequence::Item
            \param sequence If not zero, the item is added to \a Sequence
        */
        Item( Sequence<T> *sequence = 0 )
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
        {
          PtrNext = 0;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
          if( sequence )
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d005      	beq.n	8003a9e <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE4ItemC1EPS5_+0x22>
          {
            sequence->add( (T*)this );
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	3b04      	subs	r3, #4
 8003a96:	4619      	mov	r1, r3
 8003a98:	6838      	ldr	r0, [r7, #0]
 8003a9a:	f000 f812 	bl	8003ac2 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_>
          }
        }
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEEC1Ev>:

  public:
    //---------------------------------------------------------------
    /*! Instantiate an empty list
    */
    Sequence( void )
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
    {
      PtrFirst = 0;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	601a      	str	r2, [r3, #0]
    }
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bc80      	pop	{r7}
 8003ac0:	4770      	bx	lr

08003ac2 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_>:
        \param itemPtr Pointer to the item
        \return
                - true: Item added
                - false: Item not added, because it is already in list
    */
    BYTE add( T *itemPtr )
 8003ac2:	b480      	push	{r7}
 8003ac4:	b085      	sub	sp, #20
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
 8003aca:	6039      	str	r1, [r7, #0]
    {
      T *ptr;

      // Is itemPtr still in list?
      ptr = PtrFirst;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	60fb      	str	r3, [r7, #12]

      while( ptr )
 8003ad2:	e00c      	b.n	8003aee <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_+0x2c>
      {
        if( ptr == itemPtr )
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d101      	bne.n	8003ae0 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_+0x1e>
        {
          return( false );
 8003adc:	2300      	movs	r3, #0
 8003ade:	e016      	b.n	8003b0e <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_+0x4c>
        }
        if(ptr->PtrNext) // Does curent object have a next object?
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d006      	beq.n	8003af6 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_+0x34>
        {
          ptr = ptr->PtrNext;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	60fb      	str	r3, [r7, #12]
      while( ptr )
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1ef      	bne.n	8003ad4 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_+0x12>
 8003af4:	e000      	b.n	8003af8 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_+0x36>
        }
        else
        {
          break;
 8003af6:	bf00      	nop
        }
      }

      // Add a new object,
      // ptr may referes to last object in the list
      if( ptr ) // append new object to last object in list
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_+0x44>
      {
        ptr->PtrNext = itemPtr;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	605a      	str	r2, [r3, #4]
 8003b04:	e002      	b.n	8003b0c <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_+0x4a>
      }
      else // insert first object into list
      {
        PtrFirst = itemPtr;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	601a      	str	r2, [r3, #0]
      }
      return( true );
 8003b0c:	2301      	movs	r3, #1
    }
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bc80      	pop	{r7}
 8003b16:	4770      	bx	lr

08003b18 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE8getFirstEv>:
    //---------------------------------------------------------------
    /*! Get the pointer to the first item in the list
        \return Pointer to the first item\n
                Zero, if list is empty
    */
    T* getFirst( void )
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
    {
      return( PtrFirst );
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
    }
 8003b24:	4618      	mov	r0, r3
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bc80      	pop	{r7}
 8003b2c:	4770      	bx	lr

08003b2e <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE4Item7getNextEv>:
        T *getNext( void )
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
          return( PtrNext );
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
        }
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bc80      	pop	{r7}
 8003b42:	4770      	bx	lr

08003b44 <_ZN9EmbSysLib3Std4FifoIhEC1Et>:
  public:
    //---------------------------------------------------------------
    /*! Create a FIFO and allocate it's memory
        \param sizeIn FIFO size (max number of objects stored in FIFO), default = 3
    */
    Fifo( WORD sizeIn = 3 )
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	807b      	strh	r3, [r7, #2]
    {
      in   = 0;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	809a      	strh	r2, [r3, #4]
      out  = 0;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	80da      	strh	r2, [r3, #6]
      anz  = 0;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	811a      	strh	r2, [r3, #8]
      size = sizeIn;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	887a      	ldrh	r2, [r7, #2]
 8003b66:	815a      	strh	r2, [r3, #10]
      if( size > 0 )
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	895b      	ldrh	r3, [r3, #10]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d009      	beq.n	8003b84 <_ZN9EmbSysLib3Std4FifoIhEC1Et+0x40>
      {
        speicher = new T[size];
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	895b      	ldrh	r3, [r3, #10]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f001 feeb 	bl	8005950 <_Znaj>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	e005      	b.n	8003b90 <_ZN9EmbSysLib3Std4FifoIhEC1Et+0x4c>
      }
      else
      {
        size     = 0;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	815a      	strh	r2, [r3, #10]
        speicher = NULL;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]
      }
    }
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4618      	mov	r0, r3
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <_ZN9EmbSysLib3Std4FifoIhE7getSizeEv>:

    //---------------------------------------------------------------
    /*! Get FIFO size
        \return FIFO size
    */
    WORD getSize( void )
 8003b9a:	b480      	push	{r7}
 8003b9c:	b083      	sub	sp, #12
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
    {
      return( size );
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	895b      	ldrh	r3, [r3, #10]
    }
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bc80      	pop	{r7}
 8003bae:	4770      	bx	lr

08003bb0 <_ZN9EmbSysLib3Std4FifoIhElsERKh>:
        \param ref Reference to an object
        \return
                - true, if succeeded
                - false, if FIFO is full, object not written
    */
    bool operator<<( const T &ref )
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
    {
      bool ret = false;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	73fb      	strb	r3, [r7, #15]

      Hw::System::disableInterrupt();
 8003bbe:	f7fd fabb 	bl	8001138 <_ZN9EmbSysLib2Hw6System16disableInterruptEv>
      if( anz < size )
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	891a      	ldrh	r2, [r3, #8]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	895b      	ldrh	r3, [r3, #10]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d21f      	bcs.n	8003c0e <_ZN9EmbSysLib3Std4FifoIhElsERKh+0x5e>
      {
        speicher[in] = ref;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	8892      	ldrh	r2, [r2, #4]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	7812      	ldrb	r2, [r2, #0]
 8003bdc:	701a      	strb	r2, [r3, #0]
        in = (in < size-1) ? in+1 : 0;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	889b      	ldrh	r3, [r3, #4]
 8003be2:	461a      	mov	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	895b      	ldrh	r3, [r3, #10]
 8003be8:	3b01      	subs	r3, #1
 8003bea:	429a      	cmp	r2, r3
 8003bec:	da04      	bge.n	8003bf8 <_ZN9EmbSysLib3Std4FifoIhElsERKh+0x48>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	889b      	ldrh	r3, [r3, #4]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	e000      	b.n	8003bfa <_ZN9EmbSysLib3Std4FifoIhElsERKh+0x4a>
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	809a      	strh	r2, [r3, #4]
        anz++;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	891b      	ldrh	r3, [r3, #8]
 8003c02:	3301      	adds	r3, #1
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	811a      	strh	r2, [r3, #8]
        ret = true;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	73fb      	strb	r3, [r7, #15]
      }
      Hw::System::enableInterrupt();
 8003c0e:	f7fd faa9 	bl	8001164 <_ZN9EmbSysLib2Hw6System15enableInterruptEv>

      return( ret );
 8003c12:	7bfb      	ldrb	r3, [r7, #15]
    }
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <_ZN9EmbSysLib3Std4FifoIhE7isEmptyEv>:
    bool isEmpty( void )
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
      Hw::System::disableInterrupt();
 8003c24:	f7fd fa88 	bl	8001138 <_ZN9EmbSysLib2Hw6System16disableInterruptEv>
      ret = ( anz == 0 );
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	891b      	ldrh	r3, [r3, #8]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	bf0c      	ite	eq
 8003c30:	2301      	moveq	r3, #1
 8003c32:	2300      	movne	r3, #0
 8003c34:	73fb      	strb	r3, [r7, #15]
      Hw::System::enableInterrupt();
 8003c36:	f7fd fa95 	bl	8001164 <_ZN9EmbSysLib2Hw6System15enableInterruptEv>
      return( ret );
 8003c3a:	7bfb      	ldrb	r3, [r7, #15]
    }
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <_ZN9EmbSysLib3Std4FifoIhErsERh>:
        \param ref Referenc to an object
        \return
                - true, if succeeded
                - false, if FIFO is empty, no object read
    */
    bool operator>>( T &ref )
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
    {
      bool ret = false;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	73fb      	strb	r3, [r7, #15]

      Hw::System::disableInterrupt();
 8003c52:	f7fd fa71 	bl	8001138 <_ZN9EmbSysLib2Hw6System16disableInterruptEv>
      if( anz != 0 )
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	891b      	ldrh	r3, [r3, #8]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d01f      	beq.n	8003c9e <_ZN9EmbSysLib3Std4FifoIhErsERh+0x5a>
      {
        ref = speicher[out];
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	88d2      	ldrh	r2, [r2, #6]
 8003c66:	4413      	add	r3, r2
 8003c68:	781a      	ldrb	r2, [r3, #0]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	701a      	strb	r2, [r3, #0]
        out = (out < size-1) ? out+1 : 0;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	88db      	ldrh	r3, [r3, #6]
 8003c72:	461a      	mov	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	895b      	ldrh	r3, [r3, #10]
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	da04      	bge.n	8003c88 <_ZN9EmbSysLib3Std4FifoIhErsERh+0x44>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	88db      	ldrh	r3, [r3, #6]
 8003c82:	3301      	adds	r3, #1
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	e000      	b.n	8003c8a <_ZN9EmbSysLib3Std4FifoIhErsERh+0x46>
 8003c88:	2200      	movs	r2, #0
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	80da      	strh	r2, [r3, #6]
        anz--;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	891b      	ldrh	r3, [r3, #8]
 8003c92:	3b01      	subs	r3, #1
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	811a      	strh	r2, [r3, #8]
        ret = true;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	73fb      	strb	r3, [r7, #15]
      }
      Hw::System::enableInterrupt();
 8003c9e:	f7fd fa61 	bl	8001164 <_ZN9EmbSysLib2Hw6System15enableInterruptEv>

      return( ret );
 8003ca2:	7bfb      	ldrb	r3, [r7, #15]
    }
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <_ZN9EmbSysLib3Std4FifoIhE6isFullEv>:
    bool isFull( void )
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
      Hw::System::disableInterrupt();
 8003cb4:	f7fd fa40 	bl	8001138 <_ZN9EmbSysLib2Hw6System16disableInterruptEv>
      ret = ( anz >= size );
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	891a      	ldrh	r2, [r3, #8]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	895b      	ldrh	r3, [r3, #10]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	bf2c      	ite	cs
 8003cc4:	2301      	movcs	r3, #1
 8003cc6:	2300      	movcc	r3, #0
 8003cc8:	73fb      	strb	r3, [r7, #15]
      Hw::System::enableInterrupt();
 8003cca:	f7fd fa4b 	bl	8001164 <_ZN9EmbSysLib2Hw6System15enableInterruptEv>
      return( ret );
 8003cce:	7bfb      	ldrb	r3, [r7, #15]
    }
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <_ZN9EmbSysLib3Std4FifoIhE7getFreeEv>:
    WORD getFree( void )
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
      Hw::System::disableInterrupt();
 8003ce0:	f7fd fa2a 	bl	8001138 <_ZN9EmbSysLib2Hw6System16disableInterruptEv>
      ret = (size<=anz)?0:size - anz;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	895a      	ldrh	r2, [r3, #10]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	891b      	ldrh	r3, [r3, #8]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d906      	bls.n	8003cfe <_ZN9EmbSysLib3Std4FifoIhE7getFreeEv+0x26>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	895a      	ldrh	r2, [r3, #10]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	891b      	ldrh	r3, [r3, #8]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	e000      	b.n	8003d00 <_ZN9EmbSysLib3Std4FifoIhE7getFreeEv+0x28>
 8003cfe:	2300      	movs	r3, #0
 8003d00:	81fb      	strh	r3, [r7, #14]
      Hw::System::enableInterrupt();
 8003d02:	f7fd fa2f 	bl	8001164 <_ZN9EmbSysLib2Hw6System15enableInterruptEv>
      return( ret );
 8003d06:	89fb      	ldrh	r3, [r7, #14]
    }
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEEC1Et>:
    Fifo( WORD sizeIn = 3 )
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	460b      	mov	r3, r1
 8003d1a:	807b      	strh	r3, [r7, #2]
      in   = 0;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	809a      	strh	r2, [r3, #4]
      out  = 0;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	80da      	strh	r2, [r3, #6]
      anz  = 0;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	811a      	strh	r2, [r3, #8]
      size = sizeIn;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	887a      	ldrh	r2, [r7, #2]
 8003d32:	815a      	strh	r2, [r3, #10]
      if( size > 0 )
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	895b      	ldrh	r3, [r3, #10]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d009      	beq.n	8003d50 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEEC1Et+0x40>
        speicher = new T[size];
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	895b      	ldrh	r3, [r3, #10]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f001 fe05 	bl	8005950 <_Znaj>
 8003d46:	4603      	mov	r3, r0
 8003d48:	461a      	mov	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	e005      	b.n	8003d5c <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEEC1Et+0x4c>
        size     = 0;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	815a      	strh	r2, [r3, #10]
        speicher = NULL;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]
    }
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEE7isEmptyEv>:
    bool isEmpty( void )
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b084      	sub	sp, #16
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
      Hw::System::disableInterrupt();
 8003d6e:	f7fd f9e3 	bl	8001138 <_ZN9EmbSysLib2Hw6System16disableInterruptEv>
      ret = ( anz == 0 );
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	891b      	ldrh	r3, [r3, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	bf0c      	ite	eq
 8003d7a:	2301      	moveq	r3, #1
 8003d7c:	2300      	movne	r3, #0
 8003d7e:	73fb      	strb	r3, [r7, #15]
      Hw::System::enableInterrupt();
 8003d80:	f7fd f9f0 	bl	8001164 <_ZN9EmbSysLib2Hw6System15enableInterruptEv>
      return( ret );
 8003d84:	7bfb      	ldrb	r3, [r7, #15]
    }
 8003d86:	4618      	mov	r0, r3
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEErsERS4_>:
    bool operator>>( T &ref )
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b084      	sub	sp, #16
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	6039      	str	r1, [r7, #0]
      bool ret = false;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	73fb      	strb	r3, [r7, #15]
      Hw::System::disableInterrupt();
 8003d9c:	f7fd f9cc 	bl	8001138 <_ZN9EmbSysLib2Hw6System16disableInterruptEv>
      if( anz != 0 )
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	891b      	ldrh	r3, [r3, #8]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d01f      	beq.n	8003de8 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEErsERS4_+0x5a>
        ref = speicher[out];
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	88d2      	ldrh	r2, [r2, #6]
 8003db0:	4413      	add	r3, r2
 8003db2:	781a      	ldrb	r2, [r3, #0]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	701a      	strb	r2, [r3, #0]
        out = (out < size-1) ? out+1 : 0;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	88db      	ldrh	r3, [r3, #6]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	895b      	ldrh	r3, [r3, #10]
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	da04      	bge.n	8003dd2 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEErsERS4_+0x44>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	88db      	ldrh	r3, [r3, #6]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	e000      	b.n	8003dd4 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEErsERS4_+0x46>
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	80da      	strh	r2, [r3, #6]
        anz--;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	891b      	ldrh	r3, [r3, #8]
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	811a      	strh	r2, [r3, #8]
        ret = true;
 8003de4:	2301      	movs	r3, #1
 8003de6:	73fb      	strb	r3, [r7, #15]
      Hw::System::enableInterrupt();
 8003de8:	f7fd f9bc 	bl	8001164 <_ZN9EmbSysLib2Hw6System15enableInterruptEv>
      return( ret );
 8003dec:	7bfb      	ldrb	r3, [r7, #15]
    }
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEE6isFullEv>:
    bool isFull( void )
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b084      	sub	sp, #16
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
      Hw::System::disableInterrupt();
 8003dfe:	f7fd f99b 	bl	8001138 <_ZN9EmbSysLib2Hw6System16disableInterruptEv>
      ret = ( anz >= size );
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	891a      	ldrh	r2, [r3, #8]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	895b      	ldrh	r3, [r3, #10]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	bf2c      	ite	cs
 8003e0e:	2301      	movcs	r3, #1
 8003e10:	2300      	movcc	r3, #0
 8003e12:	73fb      	strb	r3, [r7, #15]
      Hw::System::enableInterrupt();
 8003e14:	f7fd f9a6 	bl	8001164 <_ZN9EmbSysLib2Hw6System15enableInterruptEv>
      return( ret );
 8003e18:	7bfb      	ldrb	r3, [r7, #15]
    }
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEElsERKS4_>:
    bool operator<<( const T &ref )
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b084      	sub	sp, #16
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
 8003e2a:	6039      	str	r1, [r7, #0]
      bool ret = false;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	73fb      	strb	r3, [r7, #15]
      Hw::System::disableInterrupt();
 8003e30:	f7fd f982 	bl	8001138 <_ZN9EmbSysLib2Hw6System16disableInterruptEv>
      if( anz < size )
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	891a      	ldrh	r2, [r3, #8]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	895b      	ldrh	r3, [r3, #10]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d21f      	bcs.n	8003e80 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEElsERKS4_+0x5e>
        speicher[in] = ref;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	8892      	ldrh	r2, [r2, #4]
 8003e48:	4413      	add	r3, r2
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	7812      	ldrb	r2, [r2, #0]
 8003e4e:	701a      	strb	r2, [r3, #0]
        in = (in < size-1) ? in+1 : 0;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	889b      	ldrh	r3, [r3, #4]
 8003e54:	461a      	mov	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	895b      	ldrh	r3, [r3, #10]
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	da04      	bge.n	8003e6a <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEElsERKS4_+0x48>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	889b      	ldrh	r3, [r3, #4]
 8003e64:	3301      	adds	r3, #1
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	e000      	b.n	8003e6c <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEElsERKS4_+0x4a>
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	809a      	strh	r2, [r3, #4]
        anz++;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	891b      	ldrh	r3, [r3, #8]
 8003e74:	3301      	adds	r3, #1
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	811a      	strh	r2, [r3, #8]
        ret = true;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	73fb      	strb	r3, [r7, #15]
      Hw::System::enableInterrupt();
 8003e80:	f7fd f970 	bl	8001164 <_ZN9EmbSysLib2Hw6System15enableInterruptEv>
      return( ret );
 8003e84:	7bfb      	ldrb	r3, [r7, #15]
    }
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
	...

08003e90 <_Z41__static_initialization_and_destruction_0ii>:
//-------------------------------------------------------------------
//
// nothing to do ...
//

}  } //namespace
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d109      	bne.n	8003eb4 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d104      	bne.n	8003eb4 <_Z41__static_initialization_and_destruction_0ii+0x24>
Std::Report PinConfig::report( ReportID_Hw::Module::SYSTEM_PIN_CONFIG );
 8003eaa:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8003eae:	4803      	ldr	r0, [pc, #12]	@ (8003ebc <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8003eb0:	f7fe fd84 	bl	80029bc <_ZN9EmbSysLib3Std6ReportC1Et>
 8003eb4:	bf00      	nop
 8003eb6:	3708      	adds	r7, #8
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	20000098 	.word	0x20000098

08003ec0 <_GLOBAL__sub_I__ZN9EmbSysLib2Hw6System12cntInterruptE>:
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003ec8:	2001      	movs	r0, #1
 8003eca:	f7ff ffe1 	bl	8003e90 <_Z41__static_initialization_and_destruction_0ii>
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <_ZN9EmbSysLib2Hw8Rtos_Mcu4initEtPFPvS2_hE>:
        context. The scheduler has to return the stack pointer where 
        to switch the context.           
        \param us         System tick cycle time in microseconds
        \param scheduleIn Function pointer to the scheduler
    */
    static void init( WORD us, TaskHandle (*scheduleIn)( TaskHandle sp, BYTE flag ))
 8003ed0:	b590      	push	{r4, r7, lr}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	6039      	str	r1, [r7, #0]
 8003eda:	80fb      	strh	r3, [r7, #6]
    {
      schedule = scheduleIn;
 8003edc:	4a13      	ldr	r2, [pc, #76]	@ (8003f2c <_ZN9EmbSysLib2Hw8Rtos_Mcu4initEtPFPvS2_hE+0x5c>)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	6013      	str	r3, [r2, #0]

      SysTick->CTRL =  SysTick_CTRL_ENABLE_Msk
 8003ee2:	4b13      	ldr	r3, [pc, #76]	@ (8003f30 <_ZN9EmbSysLib2Hw8Rtos_Mcu4initEtPFPvS2_hE+0x60>)
 8003ee4:	2207      	movs	r2, #7
 8003ee6:	601a      	str	r2, [r3, #0]
                     | SysTick_CTRL_TICKINT_Msk
                     | SysTick_CTRL_CLKSOURCE_Msk;

        SysTick->LOAD = (1E-6 * system_PCLK_SYSTIC * us) - 1;
 8003ee8:	88fb      	ldrh	r3, [r7, #6]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7fc faba 	bl	8000464 <__aeabi_i2d>
 8003ef0:	f04f 0200 	mov.w	r2, #0
 8003ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8003f34 <_ZN9EmbSysLib2Hw8Rtos_Mcu4initEtPFPvS2_hE+0x64>)
 8003ef6:	f7fc fb1f 	bl	8000538 <__aeabi_dmul>
 8003efa:	4602      	mov	r2, r0
 8003efc:	460b      	mov	r3, r1
 8003efe:	4610      	mov	r0, r2
 8003f00:	4619      	mov	r1, r3
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	4b0c      	ldr	r3, [pc, #48]	@ (8003f38 <_ZN9EmbSysLib2Hw8Rtos_Mcu4initEtPFPvS2_hE+0x68>)
 8003f08:	f7fc f95e 	bl	80001c8 <__aeabi_dsub>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	460b      	mov	r3, r1
 8003f10:	4c07      	ldr	r4, [pc, #28]	@ (8003f30 <_ZN9EmbSysLib2Hw8Rtos_Mcu4initEtPFPvS2_hE+0x60>)
 8003f12:	4610      	mov	r0, r2
 8003f14:	4619      	mov	r1, r3
 8003f16:	f7fc fd21 	bl	800095c <__aeabi_d2uiz>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	6063      	str	r3, [r4, #4]

        sysTicTime = us;
 8003f1e:	88fb      	ldrh	r3, [r7, #6]
 8003f20:	4a06      	ldr	r2, [pc, #24]	@ (8003f3c <_ZN9EmbSysLib2Hw8Rtos_Mcu4initEtPFPvS2_hE+0x6c>)
 8003f22:	6013      	str	r3, [r2, #0]
    }
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd90      	pop	{r4, r7, pc}
 8003f2c:	200000a0 	.word	0x200000a0
 8003f30:	e000e010 	.word	0xe000e010
 8003f34:	40400000 	.word	0x40400000
 8003f38:	3ff00000 	.word	0x3ff00000
 8003f3c:	200000a8 	.word	0x200000a8

08003f40 <_ZN9EmbSysLib2Hw8Rtos_Mcu5startEPhjPvPFvS3_E>:
        \param arg         Pointer to arguments of the \b starter 
                           function
        \param startFunc   Function pointer
        \return Current stack pointer
    */
    static TaskHandle start( BYTE     *stackAddrIn,
 8003f40:	b480      	push	{r7}
 8003f42:	b089      	sub	sp, #36	@ 0x24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
 8003f4c:	603b      	str	r3, [r7, #0]
                            unsigned  stackSizeIn,
                            void     *arg,
                            void    (*startFunc)(void *) )
    {
      void *stackAddr = (void*)(  ((unsigned)stackAddrIn+3) & ~0x03); // gerade adrersse erzwingen
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	3303      	adds	r3, #3
 8003f52:	f023 0303 	bic.w	r3, r3, #3
 8003f56:	61fb      	str	r3, [r7, #28]
      int   stackSize = stackSizeIn - 4;
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	3b04      	subs	r3, #4
 8003f5c:	61bb      	str	r3, [r7, #24]

      StackFrame *stack = (StackFrame *)((unsigned)stackAddr + stackSize - sizeof(StackFrame));
 8003f5e:	69fa      	ldr	r2, [r7, #28]
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	4413      	add	r3, r2
 8003f64:	3b48      	subs	r3, #72	@ 0x48
 8003f66:	617b      	str	r3, [r7, #20]

      stack->hw.r0  = (uint32_t)arg;
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	629a      	str	r2, [r3, #40]	@ 0x28
      stack->hw.r1  = 0;
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	2200      	movs	r2, #0
 8003f72:	62da      	str	r2, [r3, #44]	@ 0x2c
      stack->hw.r2  = 0;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	2200      	movs	r2, #0
 8003f78:	631a      	str	r2, [r3, #48]	@ 0x30
      stack->hw.r3  = 0;
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	635a      	str	r2, [r3, #52]	@ 0x34
      stack->hw.r12 = 0;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	2200      	movs	r2, #0
 8003f84:	639a      	str	r2, [r3, #56]	@ 0x38
      stack->hw.lr  = ((uint32_t)deleteFunc) & ~0x01;
 8003f86:	4b1b      	ldr	r3, [pc, #108]	@ (8003ff4 <_ZN9EmbSysLib2Hw8Rtos_Mcu5startEPhjPvPFvS3_E+0xb4>)
 8003f88:	f023 0201 	bic.w	r2, r3, #1
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	63da      	str	r2, [r3, #60]	@ 0x3c
      stack->hw.pc  = ((uint32_t)startFunc ) & ~0x01;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	f023 0201 	bic.w	r2, r3, #1
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	641a      	str	r2, [r3, #64]	@ 0x40
      stack->hw.psr = 0x21000000; //default PSR value
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f04f 5204 	mov.w	r2, #553648128	@ 0x21000000
 8003fa0:	645a      	str	r2, [r3, #68]	@ 0x44

      stack->sw.r4  = 0;
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	601a      	str	r2, [r3, #0]
      stack->sw.r5  = 0;
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	2200      	movs	r2, #0
 8003fac:	605a      	str	r2, [r3, #4]
      stack->sw.r6  = 0;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	609a      	str	r2, [r3, #8]
      stack->sw.r7  = 0;
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	60da      	str	r2, [r3, #12]
      stack->sw.r8  = 0;
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	611a      	str	r2, [r3, #16]
      stack->sw.r9  = 0;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	615a      	str	r2, [r3, #20]
      stack->sw.r10 = 0;
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	619a      	str	r2, [r3, #24]
      stack->sw.r11 = 0;
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	61da      	str	r2, [r3, #28]

      stack->add.r4 = 0;
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	621a      	str	r2, [r3, #32]
      stack->add.lr_pc = MAIN_RETURN;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f06f 0206 	mvn.w	r2, #6
 8003fde:	625a      	str	r2, [r3, #36]	@ 0x24

      return( (TaskHandle)((unsigned)stackAddr + stackSize - sizeof(StackFrame)) );
 8003fe0:	69fa      	ldr	r2, [r7, #28]
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	3b48      	subs	r3, #72	@ 0x48
    }
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3724      	adds	r7, #36	@ 0x24
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bc80      	pop	{r7}
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	08004015 	.word	0x08004015

08003ff8 <_ZN9EmbSysLib2Hw8Rtos_Mcu5pauseEv>:
    //---------------------------------------------------------------
    /*! Pause a task
    
        Here we can't pause a task, but we can switch the context
    */
    static void pause( void  )
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
    {
      SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk; //switch the context
 8003ffc:	4b04      	ldr	r3, [pc, #16]	@ (8004010 <_ZN9EmbSysLib2Hw8Rtos_Mcu5pauseEv+0x18>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	4a03      	ldr	r2, [pc, #12]	@ (8004010 <_ZN9EmbSysLib2Hw8Rtos_Mcu5pauseEv+0x18>)
 8004002:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004006:	6053      	str	r3, [r2, #4]
    }
 8004008:	bf00      	nop
 800400a:	46bd      	mov	sp, r7
 800400c:	bc80      	pop	{r7}
 800400e:	4770      	bx	lr
 8004010:	e000ed00 	.word	0xe000ed00

08004014 <_ZN9EmbSysLib2Hw8Rtos_Mcu10deleteFuncEv>:
    }

    //---------------------------------------------------------------
    /*! This is called when the task returns
    */
    static void deleteFunc( void )
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
    {
      while(1);
 8004018:	bf00      	nop
 800401a:	e7fd      	b.n	8004018 <_ZN9EmbSysLib2Hw8Rtos_Mcu10deleteFuncEv+0x4>

0800401c <_ZN9EmbSysLib2Hw9SPImaster6DeviceC1ERS1_RNS0_4PortEh>:
        Device( SPImaster &spi,
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
 8004028:	70fb      	strb	r3, [r7, #3]
        : spi( spi )
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	601a      	str	r2, [r3, #0]
        , cs( cs_port, cs_pin )
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	3304      	adds	r3, #4
 8004034:	78fa      	ldrb	r2, [r7, #3]
 8004036:	6879      	ldr	r1, [r7, #4]
 8004038:	4618      	mov	r0, r3
 800403a:	f7fe ff05 	bl	8002e48 <_ZN9EmbSysLib2Hw4Port3PinC1ERS1_h>
          cs.setMode( Port::Out );
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	3304      	adds	r3, #4
 8004042:	2101      	movs	r1, #1
 8004044:	4618      	mov	r0, r3
 8004046:	f7fe ff1f 	bl	8002e88 <_ZN9EmbSysLib2Hw4Port3Pin7setModeENS1_4ModeE>
          cs.set();
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	3304      	adds	r3, #4
 800404e:	4618      	mov	r0, r3
 8004050:	f7fe ff2f 	bl	8002eb2 <_ZN9EmbSysLib2Hw4Port3Pin3setEv>
        }
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
	...

08004060 <_ZN9EmbSysLib3Dev11TaskManagerC1ERNS_2Hw5TimerE>:
  public:
    //---------------------------------------------------------------
    /*! Initialize a TaskManager
        \param timer Timer object
    */
    TaskManager( Timer &timer )
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
    : timer( timer )
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4618      	mov	r0, r3
 800406e:	f7fc ffbf 	bl	8000ff0 <_ZN9EmbSysLib2Hw5Timer4TaskC1Ev>
 8004072:	4a11      	ldr	r2, [pc, #68]	@ (80040b8 <_ZN9EmbSysLib3Dev11TaskManagerC1ERNS_2Hw5TimerE+0x58>)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	609a      	str	r2, [r3, #8]
    {
      cycleTime = timer.getCycleTime();
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6838      	ldr	r0, [r7, #0]
 8004086:	4798      	blx	r3
 8004088:	4602      	mov	r2, r0
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	619a      	str	r2, [r3, #24]
      tics      = 0;
 800408e:	6879      	ldr	r1, [r7, #4]
 8004090:	f04f 0200 	mov.w	r2, #0
 8004094:	f04f 0300 	mov.w	r3, #0
 8004098:	e9c1 2304 	strd	r2, r3, [r1, #16]
      timer.add( this );
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	3304      	adds	r3, #4
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	4611      	mov	r1, r2
 80040a8:	6838      	ldr	r0, [r7, #0]
 80040aa:	4798      	blx	r3
    }
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4618      	mov	r0, r3
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	08006844 	.word	0x08006844

080040bc <_ZN9EmbSysLib3Dev11TaskManager3addEPNS1_4TaskE>:
        a timer interrupt.
        \remark The update()-method of the TaskManager::Task may be
        called immediately, so call this add()-method only when the constructor of the Task-object is completed.
        \param ptr Pointer to the TaskManager::Task object
    */
    virtual void add( Task *ptr )
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
    {
      timer.add( ptr );
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	3304      	adds	r3, #4
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	6892      	ldr	r2, [r2, #8]
 80040d4:	6839      	ldr	r1, [r7, #0]
 80040d6:	4610      	mov	r0, r2
 80040d8:	4798      	blx	r3
    }
 80040da:	bf00      	nop
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <_ZN9EmbSysLib3Dev11TaskManager12getCycleTimeEv>:

    //---------------------------------------------------------------
    /*! Get cycle time of update() calls
        \return Cycle time in mikroseconds (us)
    */
    virtual DWORD getCycleTime( void )
 80040e2:	b480      	push	{r7}
 80040e4:	b083      	sub	sp, #12
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
    {
      return( cycleTime );
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	699b      	ldr	r3, [r3, #24]
    }
 80040ee:	4618      	mov	r0, r3
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bc80      	pop	{r7}
 80040f6:	4770      	bx	lr

080040f8 <_ZN9EmbSysLib3Dev11TaskManager7getTicsEv>:
    //---------------------------------------------------------------
    /*! Returns the number of tics resp. number of cycles, the task
        handler is called
        \return Number of tics
    */
    virtual LWORD getTics( void )
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
    {
      return( tics );
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    }
 8004106:	4610      	mov	r0, r2
 8004108:	4619      	mov	r1, r3
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	bc80      	pop	{r7}
 8004110:	4770      	bx	lr

08004112 <_ZN9EmbSysLib3Dev11TaskManager6updateEv>:

  private:
    //---------------------------------------------------------------
    virtual void update( void )
 8004112:	b4b0      	push	{r4, r5, r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
    {
      tics++;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004120:	1c54      	adds	r4, r2, #1
 8004122:	f143 0500 	adc.w	r5, r3, #0
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	e9c3 4504 	strd	r4, r5, [r3, #16]
    }
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	bcb0      	pop	{r4, r5, r7}
 8004134:	4770      	bx	lr

08004136 <_ZN9EmbSysLib3Mod4Rtos3TCBC1Ev>:
          RUNNING = 2  // The task is running
        } State;

      public:
        //-----------------------------------------------------------
        TCB()
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
        {
          stackPointer = 0;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	601a      	str	r2, [r3, #0]
          stack        = NULL;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	605a      	str	r2, [r3, #4]
          stackSize    = 0;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	609a      	str	r2, [r3, #8]
          state        = NO_TASK;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	731a      	strb	r2, [r3, #12]
        }
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4618      	mov	r0, r3
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	bc80      	pop	{r7}
 8004160:	4770      	bx	lr
	...

08004164 <_ZN9EmbSysLib3Mod4Rtos4TaskC1ERS1_m>:
    {
      public:
        //-----------------------------------------------------------
        /*! ...
        */
        Task( Rtos &rtos, DWORD stackSize )
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
        : rtos( rtos )
 8004170:	4a09      	ldr	r2, [pc, #36]	@ (8004198 <_ZN9EmbSysLib3Mod4Rtos4TaskC1ERS1_m+0x34>)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	601a      	str	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	609a      	str	r2, [r3, #8]
        {
          id = rtos.add( *this, stackSize );
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	68f9      	ldr	r1, [r7, #12]
 8004180:	68b8      	ldr	r0, [r7, #8]
 8004182:	f000 f8a7 	bl	80042d4 <_ZN9EmbSysLib3Mod4Rtos3addERNS1_4TaskEm>
 8004186:	4603      	mov	r3, r0
 8004188:	461a      	mov	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	711a      	strb	r2, [r3, #4]
        }
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	08006838 	.word	0x08006838

0800419c <_ZN9EmbSysLib3Mod4Rtos4Task5startEv>:
        }

        //-----------------------------------------------------------
        /*! ...
        */
        void start()
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
        {
          rtos.start( *this );
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	6879      	ldr	r1, [r7, #4]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 f856 	bl	800425c <_ZN9EmbSysLib3Mod4Rtos5startERNS1_4TaskE>
        }
 80041b0:	bf00      	nop
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <_ZN9EmbSysLib3Mod4Rtos4Task5pauseEv>:
        }

        //-----------------------------------------------------------
        /*! ...
        */
        void pause()
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
        {
          rtos.pause(  );
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f000 f87b 	bl	80042c0 <_ZN9EmbSysLib3Mod4Rtos5pauseEv>
        }
 80041ca:	bf00      	nop
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <_ZN9EmbSysLib3Mod4Rtos4Task7starterEPv>:
          return( rtos.isRunning( *this ) );
        }

      private:
        //-----------------------------------------------------------
        static void starter( void *ptr )
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b082      	sub	sp, #8
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
        {
          ((Rtos::Task*)ptr)->update();
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	4798      	blx	r3
          //!< \todo Explicitly stop the task here?
          while(1); // The task should never end
 80041e4:	bf00      	nop
 80041e6:	e7fd      	b.n	80041e4 <_ZN9EmbSysLib3Mod4Rtos4Task7starterEPv+0x12>

080041e8 <_ZN9EmbSysLib3Mod4RtosC1Eht>:

  public:
    //---------------------------------------------------------------
    /*! ...
    */
    Rtos( BYTE numOfTasks, WORD us )
 80041e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	460b      	mov	r3, r1
 80041f2:	70fb      	strb	r3, [r7, #3]
 80041f4:	4613      	mov	r3, r2
 80041f6:	803b      	strh	r3, [r7, #0]
    {
      this->numOfTasks = numOfTasks;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	78fa      	ldrb	r2, [r7, #3]
 80041fc:	719a      	strb	r2, [r3, #6]
      tcb              = new TCB[numOfTasks];
 80041fe:	78fc      	ldrb	r4, [r7, #3]
 8004200:	f1b4 6f00 	cmp.w	r4, #134217728	@ 0x8000000
 8004204:	d201      	bcs.n	800420a <_ZN9EmbSysLib3Mod4RtosC1Eht+0x22>
 8004206:	0123      	lsls	r3, r4, #4
 8004208:	e001      	b.n	800420e <_ZN9EmbSysLib3Mod4RtosC1Eht+0x26>
 800420a:	f04f 33ff 	mov.w	r3, #4294967295
 800420e:	4618      	mov	r0, r3
 8004210:	f001 fb9e 	bl	8005950 <_Znaj>
 8004214:	4603      	mov	r3, r0
 8004216:	461e      	mov	r6, r3
 8004218:	4635      	mov	r5, r6
 800421a:	1e63      	subs	r3, r4, #1
 800421c:	461c      	mov	r4, r3
 800421e:	e004      	b.n	800422a <_ZN9EmbSysLib3Mod4RtosC1Eht+0x42>
 8004220:	4628      	mov	r0, r5
 8004222:	f7ff ff88 	bl	8004136 <_ZN9EmbSysLib3Mod4Rtos3TCBC1Ev>
 8004226:	3c01      	subs	r4, #1
 8004228:	3510      	adds	r5, #16
 800422a:	2c00      	cmp	r4, #0
 800422c:	daf8      	bge.n	8004220 <_ZN9EmbSysLib3Mod4RtosC1Eht+0x38>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	601e      	str	r6, [r3, #0]
      ptr              = this;
 8004232:	4a08      	ldr	r2, [pc, #32]	@ (8004254 <_ZN9EmbSysLib3Mod4RtosC1Eht+0x6c>)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6013      	str	r3, [r2, #0]
      currentTask      = 0;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	711a      	strb	r2, [r3, #4]

      Rtos_Mcu::init( us, schedule );
 800423e:	883b      	ldrh	r3, [r7, #0]
 8004240:	4905      	ldr	r1, [pc, #20]	@ (8004258 <_ZN9EmbSysLib3Mod4RtosC1Eht+0x70>)
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff fe44 	bl	8003ed0 <_ZN9EmbSysLib2Hw8Rtos_Mcu4initEtPFPvS2_hE>
    }
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4618      	mov	r0, r3
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004252:	bf00      	nop
 8004254:	200000f0 	.word	0x200000f0
 8004258:	08004355 	.word	0x08004355

0800425c <_ZN9EmbSysLib3Mod4Rtos5startERNS1_4TaskE>:

    //---------------------------------------------------------------
    /*! ...
    */
    void start( Task &task )
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
    {
      if( task.id != (BYTE)(-1) )
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	791b      	ldrb	r3, [r3, #4]
 800426a:	2bff      	cmp	r3, #255	@ 0xff
 800426c:	d022      	beq.n	80042b4 <_ZN9EmbSysLib3Mod4Rtos5startERNS1_4TaskE+0x58>
      {
        Rtos_Mcu::TaskHandle sp = Rtos_Mcu::start( tcb[task.id].stack,
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	791b      	ldrb	r3, [r3, #4]
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	4413      	add	r3, r2
 800427a:	6858      	ldr	r0, [r3, #4]
                                                   tcb[task.id].stackSize,
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	791b      	ldrb	r3, [r3, #4]
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	4413      	add	r3, r2
 8004288:	6899      	ldr	r1, [r3, #8]
        Rtos_Mcu::TaskHandle sp = Rtos_Mcu::start( tcb[task.id].stack,
 800428a:	4b0c      	ldr	r3, [pc, #48]	@ (80042bc <_ZN9EmbSysLib3Mod4Rtos5startERNS1_4TaskE+0x60>)
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	f7ff fe57 	bl	8003f40 <_ZN9EmbSysLib2Hw8Rtos_Mcu5startEPhjPvPFvS3_E>
 8004292:	60f8      	str	r0, [r7, #12]
                                                  &task,
                                                   task.starter );
        tcb[task.id].stackPointer = sp;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	791b      	ldrb	r3, [r3, #4]
 800429c:	011b      	lsls	r3, r3, #4
 800429e:	4413      	add	r3, r2
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	601a      	str	r2, [r3, #0]
        tcb[task.id].state        = TCB::RUNNING;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	791b      	ldrb	r3, [r3, #4]
 80042ac:	011b      	lsls	r3, r3, #4
 80042ae:	4413      	add	r3, r2
 80042b0:	2202      	movs	r2, #2
 80042b2:	731a      	strb	r2, [r3, #12]
      }
    }
 80042b4:	bf00      	nop
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	080041d3 	.word	0x080041d3

080042c0 <_ZN9EmbSysLib3Mod4Rtos5pauseEv>:
    }

    //---------------------------------------------------------------
    /*! ...
    */
    void pause()
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
    {
      Rtos_Mcu::pause();
 80042c8:	f7ff fe96 	bl	8003ff8 <_ZN9EmbSysLib2Hw8Rtos_Mcu5pauseEv>
    }
 80042cc:	bf00      	nop
 80042ce:	3708      	adds	r7, #8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <_ZN9EmbSysLib3Mod4Rtos3addERNS1_4TaskEm>:
      return( false );
    }

  private:
    //---------------------------------------------------------------
    BYTE add( Task &task, DWORD stackSize )
 80042d4:	b590      	push	{r4, r7, lr}
 80042d6:	b087      	sub	sp, #28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
    {
      for( BYTE i = 1; i < numOfTasks; i++ )
 80042e0:	2301      	movs	r3, #1
 80042e2:	75fb      	strb	r3, [r7, #23]
 80042e4:	e02c      	b.n	8004340 <_ZN9EmbSysLib3Mod4Rtos3addERNS1_4TaskEm+0x6c>
      {
        if( tcb[i].state == TCB::NO_TASK )
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	7dfb      	ldrb	r3, [r7, #23]
 80042ec:	011b      	lsls	r3, r3, #4
 80042ee:	4413      	add	r3, r2
 80042f0:	7b1b      	ldrb	r3, [r3, #12]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d121      	bne.n	800433a <_ZN9EmbSysLib3Mod4Rtos3addERNS1_4TaskEm+0x66>
        {
          tcb[i].stackSize    = stackSize;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	7dfb      	ldrb	r3, [r7, #23]
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	4413      	add	r3, r2
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	609a      	str	r2, [r3, #8]
          tcb[i].stack        = new BYTE[stackSize];
 8004304:	6879      	ldr	r1, [r7, #4]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	7dfb      	ldrb	r3, [r7, #23]
 800430c:	011b      	lsls	r3, r3, #4
 800430e:	18d4      	adds	r4, r2, r3
 8004310:	4608      	mov	r0, r1
 8004312:	f001 fb1d 	bl	8005950 <_Znaj>
 8004316:	4603      	mov	r3, r0
 8004318:	6063      	str	r3, [r4, #4]
          tcb[i].stackPointer = 0;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	7dfb      	ldrb	r3, [r7, #23]
 8004320:	011b      	lsls	r3, r3, #4
 8004322:	4413      	add	r3, r2
 8004324:	2200      	movs	r2, #0
 8004326:	601a      	str	r2, [r3, #0]
          tcb[i].state        = TCB::READY;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	7dfb      	ldrb	r3, [r7, #23]
 800432e:	011b      	lsls	r3, r3, #4
 8004330:	4413      	add	r3, r2
 8004332:	2201      	movs	r2, #1
 8004334:	731a      	strb	r2, [r3, #12]
          return( i );
 8004336:	7dfb      	ldrb	r3, [r7, #23]
 8004338:	e008      	b.n	800434c <_ZN9EmbSysLib3Mod4Rtos3addERNS1_4TaskEm+0x78>
      for( BYTE i = 1; i < numOfTasks; i++ )
 800433a:	7dfb      	ldrb	r3, [r7, #23]
 800433c:	3301      	adds	r3, #1
 800433e:	75fb      	strb	r3, [r7, #23]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	799b      	ldrb	r3, [r3, #6]
 8004344:	7dfa      	ldrb	r2, [r7, #23]
 8004346:	429a      	cmp	r2, r3
 8004348:	d3cd      	bcc.n	80042e6 <_ZN9EmbSysLib3Mod4Rtos3addERNS1_4TaskEm+0x12>
        }
      }
      return( -1 );
 800434a:	23ff      	movs	r3, #255	@ 0xff
    }
 800434c:	4618      	mov	r0, r3
 800434e:	371c      	adds	r7, #28
 8004350:	46bd      	mov	sp, r7
 8004352:	bd90      	pop	{r4, r7, pc}

08004354 <_ZN9EmbSysLib3Mod4Rtos8scheduleEPvh>:
        delete tcb[task.id].stack;
      }
    }

    //---------------------------------------------------------------
    static Rtos_Mcu::TaskHandle schedule( Rtos_Mcu::TaskHandle stackPtr, BYTE flag )
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	460b      	mov	r3, r1
 800435e:	70fb      	strb	r3, [r7, #3]
    {
      return( ptr->getNextTask(stackPtr, flag) );
 8004360:	4b08      	ldr	r3, [pc, #32]	@ (8004384 <_ZN9EmbSysLib3Mod4Rtos8scheduleEPvh+0x30>)
 8004362:	6818      	ldr	r0, [r3, #0]
 8004364:	78fb      	ldrb	r3, [r7, #3]
 8004366:	2b00      	cmp	r3, #0
 8004368:	bf14      	ite	ne
 800436a:	2301      	movne	r3, #1
 800436c:	2300      	moveq	r3, #0
 800436e:	b2db      	uxtb	r3, r3
 8004370:	461a      	mov	r2, r3
 8004372:	6879      	ldr	r1, [r7, #4]
 8004374:	f000 f808 	bl	8004388 <_ZN9EmbSysLib3Mod4Rtos11getNextTaskEPvb>
 8004378:	4603      	mov	r3, r0
    }
 800437a:	4618      	mov	r0, r3
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	200000f0 	.word	0x200000f0

08004388 <_ZN9EmbSysLib3Mod4Rtos11getNextTaskEPvb>:

    //---------------------------------------------------------------
    Rtos_Mcu::TaskHandle getNextTask( Rtos_Mcu::TaskHandle stackPtr, bool isSysTic)
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	4613      	mov	r3, r2
 8004394:	71fb      	strb	r3, [r7, #7]
    {
      tcb[currentTask].stackPointer = stackPtr;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	791b      	ldrb	r3, [r3, #4]
 800439e:	011b      	lsls	r3, r3, #4
 80043a0:	4413      	add	r3, r2
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	601a      	str	r2, [r3, #0]

      currentTask               = 0;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	711a      	strb	r2, [r3, #4]

      if( isSysTic ) // called by timeout
 80043ac:	79fb      	ldrb	r3, [r7, #7]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d019      	beq.n	80043e6 <_ZN9EmbSysLib3Mod4Rtos11getNextTaskEPvb+0x5e>
      {
        nextTask = (nextTask+1) % numOfTasks;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	795b      	ldrb	r3, [r3, #5]
 80043b6:	3301      	adds	r3, #1
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	7992      	ldrb	r2, [r2, #6]
 80043bc:	fb93 f1f2 	sdiv	r1, r3, r2
 80043c0:	fb01 f202 	mul.w	r2, r1, r2
 80043c4:	1a9b      	subs	r3, r3, r2
 80043c6:	b2da      	uxtb	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	715a      	strb	r2, [r3, #5]
        if( tcb[nextTask].stackPointer )
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	795b      	ldrb	r3, [r3, #5]
 80043d4:	011b      	lsls	r3, r3, #4
 80043d6:	4413      	add	r3, r2
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <_ZN9EmbSysLib3Mod4Rtos11getNextTaskEPvb+0x5e>
        {
          currentTask = nextTask;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	795a      	ldrb	r2, [r3, #5]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	711a      	strb	r2, [r3, #4]
        }
      }
      return( tcb[currentTask].stackPointer );
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	791b      	ldrb	r3, [r3, #4]
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	4413      	add	r3, r2
 80043f2:	681b      	ldr	r3, [r3, #0]
    }
 80043f4:	4618      	mov	r0, r3
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bc80      	pop	{r7}
 80043fc:	4770      	bx	lr

080043fe <_ZN15myReportHandler8onReportEttb>:
*/

//*******************************************************************
class myReportHandler : public EmbSysLib::Std::Report::Handler
{
  virtual void onReport( const WORD code, const WORD module, const bool isFatal )
 80043fe:	b480      	push	{r7}
 8004400:	b085      	sub	sp, #20
 8004402:	af00      	add	r7, sp, #0
 8004404:	60f8      	str	r0, [r7, #12]
 8004406:	4608      	mov	r0, r1
 8004408:	4611      	mov	r1, r2
 800440a:	461a      	mov	r2, r3
 800440c:	4603      	mov	r3, r0
 800440e:	817b      	strh	r3, [r7, #10]
 8004410:	460b      	mov	r3, r1
 8004412:	813b      	strh	r3, [r7, #8]
 8004414:	4613      	mov	r3, r2
 8004416:	71fb      	strb	r3, [r7, #7]
  {
    if( isFatal )
 8004418:	79fb      	ldrb	r3, [r7, #7]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <_ZN15myReportHandler8onReportEttb+0x24>
    {
      while( 1 );
 800441e:	bf00      	nop
 8004420:	e7fd      	b.n	800441e <_ZN15myReportHandler8onReportEttb+0x20>
    }
    else
    {
    }
  }
 8004422:	bf00      	nop
 8004424:	3714      	adds	r7, #20
 8004426:	46bd      	mov	sp, r7
 8004428:	bc80      	pop	{r7}
 800442a:	4770      	bx	lr

0800442c <_ZN15myReportHandlerC1Ev>:
class myReportHandler : public EmbSysLib::Std::Report::Handler
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4618      	mov	r0, r3
 8004438:	f7fe fb38 	bl	8002aac <_ZN9EmbSysLib3Std6Report7HandlerC1Ev>
 800443c:	4a03      	ldr	r2, [pc, #12]	@ (800444c <_ZN15myReportHandlerC1Ev+0x20>)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4618      	mov	r0, r3
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	0800682c 	.word	0x0800682c

08004450 <_ZN9EmbSysLib2Hw21DisplayChar_DIP204spi7refreshEv>:

    //---------------------------------------------------------------
    virtual void clear( void );

    //---------------------------------------------------------------
    virtual void refresh() { /* nothing to do */ }
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	bc80      	pop	{r7}
 8004460:	4770      	bx	lr
	...

08004464 <_ZN9EmbSysLib2Hw21DisplayChar_DIP204spiC1ERNS0_9SPImaster6DeviceE>:
//
// DisplayChar_DIP204spi
//
//*******************************************************************
//-------------------------------------------------------------------
DisplayChar_DIP204spi::DisplayChar_DIP204spi( SPImaster::Device &spiIn )
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]

: DisplayChar( 0 /* todo ... */, NUM_OF_LINE, NUM_OF_COLUMN ),
  spi( spiIn )
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	2314      	movs	r3, #20
 8004472:	2204      	movs	r2, #4
 8004474:	2100      	movs	r1, #0
 8004476:	f7fe fc75 	bl	8002d64 <_ZN9EmbSysLib2Hw11DisplayCharC1Ethh>
 800447a:	4a07      	ldr	r2, [pc, #28]	@ (8004498 <_ZN9EmbSysLib2Hw21DisplayChar_DIP204spiC1ERNS0_9SPImaster6DeviceE+0x34>)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	60da      	str	r2, [r3, #12]

{
  init();
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f85f 	bl	800454a <_ZN9EmbSysLib2Hw21DisplayChar_DIP204spi4initEv>
}
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4618      	mov	r0, r3
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	08006808 	.word	0x08006808

0800449c <_ZN9EmbSysLib2Hw21DisplayChar_DIP204spi5clearEv>:

//---------------------------------------------------------------
void DisplayChar_DIP204spi::clear( void )
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  writeCmd( 0x01 ); // Clear Display
 80044a4:	2101      	movs	r1, #1
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f89a 	bl	80045e0 <_ZN9EmbSysLib2Hw21DisplayChar_DIP204spi8writeCmdEh>
}
 80044ac:	bf00      	nop
 80044ae:	3708      	adds	r7, #8
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <_ZN9EmbSysLib2Hw21DisplayChar_DIP204spi11gotoTextPosEhh>:

//---------------------------------------------------------------
void DisplayChar_DIP204spi::gotoTextPos( BYTE lineIn, BYTE columnIn )
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	460b      	mov	r3, r1
 80044be:	70fb      	strb	r3, [r7, #3]
 80044c0:	4613      	mov	r3, r2
 80044c2:	70bb      	strb	r3, [r7, #2]
  line   = lineIn;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	78fa      	ldrb	r2, [r7, #3]
 80044c8:	741a      	strb	r2, [r3, #16]
  column = columnIn;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	78ba      	ldrb	r2, [r7, #2]
 80044ce:	745a      	strb	r2, [r3, #17]

  // Startadresse fuer Display-Speicher schreiben
  if( line < NUM_OF_LINE && column < NUM_OF_COLUMN )
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	7c1b      	ldrb	r3, [r3, #16]
 80044d4:	2b03      	cmp	r3, #3
 80044d6:	d817      	bhi.n	8004508 <_ZN9EmbSysLib2Hw21DisplayChar_DIP204spi11gotoTextPosEhh+0x54>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	7c5b      	ldrb	r3, [r3, #17]
 80044dc:	2b13      	cmp	r3, #19
 80044de:	d813      	bhi.n	8004508 <_ZN9EmbSysLib2Hw21DisplayChar_DIP204spi11gotoTextPosEhh+0x54>
  {
    writeCmd( 0x80 | ((line&0x07)<<5) | (column&0x1F) );
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	7c1b      	ldrb	r3, [r3, #16]
 80044e4:	015b      	lsls	r3, r3, #5
 80044e6:	b25b      	sxtb	r3, r3
 80044e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80044ec:	b25a      	sxtb	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	7c5b      	ldrb	r3, [r3, #17]
 80044f2:	b25b      	sxtb	r3, r3
 80044f4:	f003 031f 	and.w	r3, r3, #31
 80044f8:	b25b      	sxtb	r3, r3
 80044fa:	4313      	orrs	r3, r2
 80044fc:	b25b      	sxtb	r3, r3
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	4619      	mov	r1, r3
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f86c 	bl	80045e0 <_ZN9EmbSysLib2Hw21DisplayChar_DIP204spi8writeCmdEh>
  }
}
 8004508:	bf00      	nop
 800450a:	3708      	adds	r7, #8
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <_ZN9EmbSysLib2Hw21DisplayChar_DIP204spi7putCharEc>:

//---------------------------------------------------------------
void DisplayChar_DIP204spi::putChar( char c )
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	460b      	mov	r3, r1
 800451a:	70fb      	strb	r3, [r7, #3]
  if( line < NUM_OF_LINE && column < NUM_OF_COLUMN )
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	7c1b      	ldrb	r3, [r3, #16]
 8004520:	2b03      	cmp	r3, #3
 8004522:	d80e      	bhi.n	8004542 <_ZN9EmbSysLib2Hw21DisplayChar_DIP204spi7putCharEc+0x32>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	7c5b      	ldrb	r3, [r3, #17]
 8004528:	2b13      	cmp	r3, #19
 800452a:	d80a      	bhi.n	8004542 <_ZN9EmbSysLib2Hw21DisplayChar_DIP204spi7putCharEc+0x32>
  {
    writeDat( c );  // putchar at current pos
 800452c:	78fb      	ldrb	r3, [r7, #3]
 800452e:	4619      	mov	r1, r3
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f875 	bl	8004620 <_ZN9EmbSysLib2Hw21DisplayChar_DIP204spi8writeDatEh>
    column++;       // emulate cursor increment
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	7c5b      	ldrb	r3, [r3, #17]
 800453a:	3301      	adds	r3, #1
 800453c:	b2da      	uxtb	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	745a      	strb	r2, [r3, #17]
  }
}
 8004542:	bf00      	nop
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <_ZN9EmbSysLib2Hw21DisplayChar_DIP204spi4initEv>:

//-------------------------------------------------------------------
void DisplayChar_DIP204spi::init( void )
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b082      	sub	sp, #8
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  writeCmd(  (1<<5)  // Function set (RE=0)
 8004552:	2134      	movs	r1, #52	@ 0x34
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 f843 	bl	80045e0 <_ZN9EmbSysLib2Hw21DisplayChar_DIP204spi8writeCmdEh>
            |(0<<3)  //   N :  1-line,
            |(1<<2)  //   RE:  1
            |(0<<1)  //   DH:  dot scroll
            |(0<<0));//   REV: normal

  writeCmd(  (1<<3)  // extended Function set (RE=1)
 800455a:	210b      	movs	r1, #11
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 f83f 	bl	80045e0 <_ZN9EmbSysLib2Hw21DisplayChar_DIP204spi8writeCmdEh>
            |(0<<2)  //  FW:  5-dot font width
            |(1<<1)  //  BW:  inverting cursor
            |(1<<0));//  NW:  4-line display

  writeCmd(  (1<<5)  // Function set (RE=1)
 8004562:	2130      	movs	r1, #48	@ 0x30
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 f83b 	bl	80045e0 <_ZN9EmbSysLib2Hw21DisplayChar_DIP204spi8writeCmdEh>
            |(0<<3)  //   N :  1-line,
            |(0<<2)  //   RE:  0
            |(0<<1)  //   BE:  CG/SEG-RAM blink disable
            |(0<<0));//   LP:  normal mode

  writeCmd(  (1<<0));// Clear Display
 800456a:	2101      	movs	r1, #1
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 f837 	bl	80045e0 <_ZN9EmbSysLib2Hw21DisplayChar_DIP204spi8writeCmdEh>

  writeCmd(  (1<<3)  // Display On/Off Control
 8004572:	210c      	movs	r1, #12
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f833 	bl	80045e0 <_ZN9EmbSysLib2Hw21DisplayChar_DIP204spi8writeCmdEh>
            |(1<<2)  //  D:  display on
            |(0<<1)  //  C:  cursor off
            |(0<<0));//  B:  blink off

  // leaving with RE-Bit = 0
}
 800457a:	bf00      	nop
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <_ZN9EmbSysLib2Hw21DisplayChar_DIP204spi8waitBusyEv>:

//-------------------------------------------------------------------
void DisplayChar_DIP204spi::waitBusy( void )
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b084      	sub	sp, #16
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
  BYTE data[2];
  WORD i = 0x0FFF;
 800458a:	f640 73ff 	movw	r3, #4095	@ 0xfff
 800458e:	81fb      	strh	r3, [r7, #14]

  do
  {
    data[0] = (0x1F)    // START
 8004590:	233f      	movs	r3, #63	@ 0x3f
 8004592:	733b      	strb	r3, [r7, #12]
              | (0<<6)  // RS
              | (1<<5); // RW
    data[1] = 0;
 8004594:	2300      	movs	r3, #0
 8004596:	737b      	strb	r3, [r7, #13]
    spi.transceive( data, 2);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	f107 010c 	add.w	r1, r7, #12
 80045a0:	2202      	movs	r2, #2
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7fe fcfa 	bl	8002f9c <_ZN9EmbSysLib2Hw9SPImaster6Device10transceiveEPht>
  } while( --i && data[1] & 0x80);
 80045a8:	89fb      	ldrh	r3, [r7, #14]
 80045aa:	3b01      	subs	r3, #1
 80045ac:	81fb      	strh	r3, [r7, #14]
 80045ae:	89fb      	ldrh	r3, [r7, #14]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d005      	beq.n	80045c0 <_ZN9EmbSysLib2Hw21DisplayChar_DIP204spi8waitBusyEv+0x3e>
 80045b4:	7b7b      	ldrb	r3, [r7, #13]
 80045b6:	b25b      	sxtb	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	da01      	bge.n	80045c0 <_ZN9EmbSysLib2Hw21DisplayChar_DIP204spi8waitBusyEv+0x3e>
 80045bc:	2301      	movs	r3, #1
 80045be:	e000      	b.n	80045c2 <_ZN9EmbSysLib2Hw21DisplayChar_DIP204spi8waitBusyEv+0x40>
 80045c0:	2300      	movs	r3, #0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1e4      	bne.n	8004590 <_ZN9EmbSysLib2Hw21DisplayChar_DIP204spi8waitBusyEv+0xe>

  if( i == 0 )
 80045c6:	89fb      	ldrh	r3, [r7, #14]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d105      	bne.n	80045d8 <_ZN9EmbSysLib2Hw21DisplayChar_DIP204spi8waitBusyEv+0x56>
  {
    report.alert(0);//!< \todo i==0 is an Error -> report!
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3308      	adds	r3, #8
 80045d0:	2100      	movs	r1, #0
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7fe fa4a 	bl	8002a6c <_ZN9EmbSysLib3Std6Report5alertEt>
  }
}
 80045d8:	bf00      	nop
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <_ZN9EmbSysLib2Hw21DisplayChar_DIP204spi8writeCmdEh>:

//-------------------------------------------------------------------
void DisplayChar_DIP204spi::writeCmd( BYTE cmd )
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	460b      	mov	r3, r1
 80045ea:	70fb      	strb	r3, [r7, #3]
  BYTE data[3];

  data[0] =   (0x1F)  // START
 80045ec:	231f      	movs	r3, #31
 80045ee:	733b      	strb	r3, [r7, #12]
            | (0<<6)  // RS
            | (0<<5); // RW
  data[1] = (cmd   ) & 0x0F;
 80045f0:	78fb      	ldrb	r3, [r7, #3]
 80045f2:	f003 030f 	and.w	r3, r3, #15
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	737b      	strb	r3, [r7, #13]
  data[2] = (cmd>>4) & 0x0F;
 80045fa:	78fb      	ldrb	r3, [r7, #3]
 80045fc:	091b      	lsrs	r3, r3, #4
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	73bb      	strb	r3, [r7, #14]
  spi.transceive( data, 3);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	f107 010c 	add.w	r1, r7, #12
 800460a:	2203      	movs	r2, #3
 800460c:	4618      	mov	r0, r3
 800460e:	f7fe fcc5 	bl	8002f9c <_ZN9EmbSysLib2Hw9SPImaster6Device10transceiveEPht>

  waitBusy();
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7ff ffb5 	bl	8004582 <_ZN9EmbSysLib2Hw21DisplayChar_DIP204spi8waitBusyEv>
}
 8004618:	bf00      	nop
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <_ZN9EmbSysLib2Hw21DisplayChar_DIP204spi8writeDatEh>:

//-------------------------------------------------------------------
void DisplayChar_DIP204spi::writeDat( BYTE dat )
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	460b      	mov	r3, r1
 800462a:	70fb      	strb	r3, [r7, #3]
  BYTE data[3];

  data[0] =   (0x1F)  // START
 800462c:	235f      	movs	r3, #95	@ 0x5f
 800462e:	733b      	strb	r3, [r7, #12]
            | (1<<6)  // RS
            | (0<<5); // RW
  data[1] = (dat    ) & 0x0F;
 8004630:	78fb      	ldrb	r3, [r7, #3]
 8004632:	f003 030f 	and.w	r3, r3, #15
 8004636:	b2db      	uxtb	r3, r3
 8004638:	737b      	strb	r3, [r7, #13]
  data[2] = (dat>>4 ) & 0x0F;
 800463a:	78fb      	ldrb	r3, [r7, #3]
 800463c:	091b      	lsrs	r3, r3, #4
 800463e:	b2db      	uxtb	r3, r3
 8004640:	73bb      	strb	r3, [r7, #14]
  spi.transceive( data, 3);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	f107 010c 	add.w	r1, r7, #12
 800464a:	2203      	movs	r2, #3
 800464c:	4618      	mov	r0, r3
 800464e:	f7fe fca5 	bl	8002f9c <_ZN9EmbSysLib2Hw9SPImaster6Device10transceiveEPht>

  waitBusy();
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7ff ff95 	bl	8004582 <_ZN9EmbSysLib2Hw21DisplayChar_DIP204spi8waitBusyEv>
}
 8004658:	bf00      	nop
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <_ZN17myPressureControlC1ERN9EmbSysLib3Dev11TaskManagerE>:
class myPressureControl: public TaskManager::Task {
private:
	int pressure = -1;
public:
	//---------------------------------------------------------------
	myPressureControl(TaskManager &taskManager) {
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4618      	mov	r0, r3
 800466e:	f7ff f89f 	bl	80037b0 <_ZN9EmbSysLib3Dev11TaskManager4TaskC1Ev>
 8004672:	4a0a      	ldr	r2, [pc, #40]	@ (800469c <_ZN17myPressureControlC1ERN9EmbSysLib3Dev11TaskManagerE+0x3c>)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f04f 32ff 	mov.w	r2, #4294967295
 800467e:	609a      	str	r2, [r3, #8]
		taskManager.add(this);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3304      	adds	r3, #4
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	4611      	mov	r1, r2
 800468c:	6838      	ldr	r0, [r7, #0]
 800468e:	4798      	blx	r3
	}
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4618      	mov	r0, r3
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	080067fc 	.word	0x080067fc

080046a0 <_ZN17myPressureControl6updateEv>:

	//Duck wird ins Intervall reguliert.
	virtual void update(void) {
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
		pressure = Signal_Druck.getRaw(); //AUTOMATIC PRESSURE CONTROL
 80046a8:	480f      	ldr	r0, [pc, #60]	@ (80046e8 <_ZN17myPressureControl6updateEv+0x48>)
 80046aa:	f7fe feed 	bl	8003488 <_ZN9EmbSysLib3Dev11AnalogInAdc6getRawEv>
 80046ae:	4603      	mov	r3, r0
 80046b0:	461a      	mov	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	609a      	str	r2, [r3, #8]
		if (pressure < 18000) {
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f244 624f 	movw	r2, #17999	@ 0x464f
 80046be:	4293      	cmp	r3, r2
 80046c0:	dc04      	bgt.n	80046cc <_ZN17myPressureControl6updateEv+0x2c>
			Motor_Pumpe.set(1);
 80046c2:	2101      	movs	r1, #1
 80046c4:	4809      	ldr	r0, [pc, #36]	@ (80046ec <_ZN17myPressureControl6updateEv+0x4c>)
 80046c6:	f7fe ff4c 	bl	8003562 <_ZN9EmbSysLib3Dev7Digital3setEb>
		} else if (pressure > 20000) {
			Motor_Pumpe.set(0);
		}
	}
 80046ca:	e009      	b.n	80046e0 <_ZN17myPressureControl6updateEv+0x40>
		} else if (pressure > 20000) {
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80046d4:	4293      	cmp	r3, r2
 80046d6:	dd03      	ble.n	80046e0 <_ZN17myPressureControl6updateEv+0x40>
			Motor_Pumpe.set(0);
 80046d8:	2100      	movs	r1, #0
 80046da:	4804      	ldr	r0, [pc, #16]	@ (80046ec <_ZN17myPressureControl6updateEv+0x4c>)
 80046dc:	f7fe ff41 	bl	8003562 <_ZN9EmbSysLib3Dev7Digital3setEb>
	}
 80046e0:	bf00      	nop
 80046e2:	3708      	adds	r7, #8
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	20000334 	.word	0x20000334
 80046ec:	200002a0 	.word	0x200002a0

080046f0 <_ZN13myBandCounterC1ERN9EmbSysLib3Dev11TaskManagerE>:
private:
	int last_band = -1;
	int band_counter = -1;
public:
	//---------------------------------------------------------------
	myBandCounter(TaskManager &taskManager) {
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7ff f857 	bl	80037b0 <_ZN9EmbSysLib3Dev11TaskManager4TaskC1Ev>
 8004702:	4a0c      	ldr	r2, [pc, #48]	@ (8004734 <_ZN13myBandCounterC1ERN9EmbSysLib3Dev11TaskManagerE+0x44>)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f04f 32ff 	mov.w	r2, #4294967295
 800470e:	609a      	str	r2, [r3, #8]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f04f 32ff 	mov.w	r2, #4294967295
 8004716:	60da      	str	r2, [r3, #12]
		taskManager.add(this);
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	3304      	adds	r3, #4
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	4611      	mov	r1, r2
 8004724:	6838      	ldr	r0, [r7, #0]
 8004726:	4798      	blx	r3
	}
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4618      	mov	r0, r3
 800472c:	3708      	adds	r7, #8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	080067f0 	.word	0x080067f0

08004738 <_ZN13myBandCounter6updateEv>:

	//Bandcounter inkrementiert wenn sich der Bandtaster geaendert hat.
	virtual void update(void) {
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
		int new_band = Inkremental_Band.get();
 8004740:	480a      	ldr	r0, [pc, #40]	@ (800476c <_ZN13myBandCounter6updateEv+0x34>)
 8004742:	f7fe ff29 	bl	8003598 <_ZN9EmbSysLib3Dev7Digital3getEv>
 8004746:	4603      	mov	r3, r0
 8004748:	60fb      	str	r3, [r7, #12]
		if (new_band != last_band) {
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	429a      	cmp	r2, r3
 8004752:	d007      	beq.n	8004764 <_ZN13myBandCounter6updateEv+0x2c>
			band_counter++;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	1c5a      	adds	r2, r3, #1
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	60da      	str	r2, [r3, #12]
			last_band = new_band;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	609a      	str	r2, [r3, #8]
		}
	}
 8004764:	bf00      	nop
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	200002e8 	.word	0x200002e8

08004770 <_ZN11myTimerTaskC1ERN9EmbSysLib3Dev11TaskManagerE>:
#include "Module/Rtos/Rtos.h"

class myTimerTask: public TaskManager::Task {
public:
	//---------------------------------------------------------------
	myTimerTask(TaskManager &taskManager) {
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff f817 	bl	80037b0 <_ZN9EmbSysLib3Dev11TaskManager4TaskC1Ev>
 8004782:	4a09      	ldr	r2, [pc, #36]	@ (80047a8 <_ZN11myTimerTaskC1ERN9EmbSysLib3Dev11TaskManagerE+0x38>)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	601a      	str	r2, [r3, #0]
		cnt = 0;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	609a      	str	r2, [r3, #8]
		taskManager.add(this);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	3304      	adds	r3, #4
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	4611      	mov	r1, r2
 800479a:	6838      	ldr	r0, [r7, #0]
 800479c:	4798      	blx	r3
	}
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4618      	mov	r0, r3
 80047a2:	3708      	adds	r7, #8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	080067e4 	.word	0x080067e4

080047ac <_ZN11myTimerTask6updateEv>:

	//---------------------------------------------------------------
	virtual void update(void) {
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
		cnt++;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	1c5a      	adds	r2, r3, #1
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	609a      	str	r2, [r3, #8]
	}
 80047be:	bf00      	nop
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bc80      	pop	{r7}
 80047c6:	4770      	bx	lr

080047c8 <_ZN10myRtosTaskC1ERN9EmbSysLib3Mod4RtosE>:
//*******************************************************************

class myRtosTask: public Rtos::Task {
public:
	//---------------------------------------------------------------
	myRtosTask(Rtos &rtos) :
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
			Rtos::Task(rtos, 500/* stack size*/) {
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80047d8:	6839      	ldr	r1, [r7, #0]
 80047da:	4618      	mov	r0, r3
 80047dc:	f7ff fcc2 	bl	8004164 <_ZN9EmbSysLib3Mod4Rtos4TaskC1ERS1_m>
 80047e0:	4a05      	ldr	r2, [pc, #20]	@ (80047f8 <_ZN10myRtosTaskC1ERN9EmbSysLib3Mod4RtosE+0x30>)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	601a      	str	r2, [r3, #0]
		cnt = 0;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	60da      	str	r2, [r3, #12]
	}
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4618      	mov	r0, r3
 80047f0:	3708      	adds	r7, #8
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	080067d8 	.word	0x080067d8

080047fc <_ZN10myRtosTask6updateEv>:

private:
	//---------------------------------------------------------------
	virtual void update(void) {
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
		while (1) {
			cnt++;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	1c5a      	adds	r2, r3, #1
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	60da      	str	r2, [r3, #12]
			pause();  // pause the task until next time slot
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4618      	mov	r0, r3
 8004812:	f7ff fcd1 	bl	80041b8 <_ZN9EmbSysLib3Mod4Rtos4Task5pauseEv>
			cnt++;
 8004816:	bf00      	nop
 8004818:	e7f4      	b.n	8004804 <_ZN10myRtosTask6updateEv+0x8>
	...

0800481c <main>:
myPressureControl pressureControl(taskManager);
//3: Task: Extrem genaue Verzögerung.
myTimerTask timerTask(taskManager);
//-----------------------------------------

int main(void) {
 800481c:	b580      	push	{r7, lr}
 800481e:	b088      	sub	sp, #32
 8004820:	af00      	add	r7, sp, #0
	disp.printf(0, 0, __DATE__ " " __TIME__);
 8004822:	4b1c      	ldr	r3, [pc, #112]	@ (8004894 <main+0x78>)
 8004824:	2200      	movs	r2, #0
 8004826:	2100      	movs	r1, #0
 8004828:	481b      	ldr	r0, [pc, #108]	@ (8004898 <main+0x7c>)
 800482a:	f7fe ff18 	bl	800365e <_ZN9EmbSysLib3Dev10ScreenChar6printfEhhPKcz>
	terminal.printf( __DATE__ " " __TIME__ "\r\n");
 800482e:	491b      	ldr	r1, [pc, #108]	@ (800489c <main+0x80>)
 8004830:	481b      	ldr	r0, [pc, #108]	@ (80048a0 <main+0x84>)
 8004832:	f7fe ff91 	bl	8003758 <_ZN9EmbSysLib3Dev8Terminal6printfEPKcz>

	int num = 0;
 8004836:	2300      	movs	r3, #0
 8004838:	61fb      	str	r3, [r7, #28]
	StateHandler derEpicHandler;
 800483a:	f107 0314 	add.w	r3, r7, #20
 800483e:	4618      	mov	r0, r3
 8004840:	f000 ff06 	bl	8005650 <_ZN12StateHandlerC1Ev>

	myRtosTask rtosTask(rtos);
 8004844:	1d3b      	adds	r3, r7, #4
 8004846:	4917      	ldr	r1, [pc, #92]	@ (80048a4 <main+0x88>)
 8004848:	4618      	mov	r0, r3
 800484a:	f7ff ffbd 	bl	80047c8 <_ZN10myRtosTaskC1ERN9EmbSysLib3Mod4RtosE>

	rtosTask.start();
 800484e:	1d3b      	adds	r3, r7, #4
 8004850:	4618      	mov	r0, r3
 8004852:	f7ff fca3 	bl	800419c <_ZN9EmbSysLib3Mod4Rtos4Task5startEv>

	while (1) {

		switch (enc.getEvent()) {
 8004856:	4814      	ldr	r0, [pc, #80]	@ (80048a8 <main+0x8c>)
 8004858:	f7fe ffe2 	bl	8003820 <_ZN9EmbSysLib4Ctrl14DigitalEncoder8getEventEv>
 800485c:	4603      	mov	r3, r0
 800485e:	2b03      	cmp	r3, #3
 8004860:	d00e      	beq.n	8004880 <main+0x64>
 8004862:	2b03      	cmp	r3, #3
 8004864:	dc0f      	bgt.n	8004886 <main+0x6a>
 8004866:	2b01      	cmp	r3, #1
 8004868:	d002      	beq.n	8004870 <main+0x54>
 800486a:	2b02      	cmp	r3, #2
 800486c:	d004      	beq.n	8004878 <main+0x5c>
			break;
		case DigitalEncoder::CTRL_DWN:
			num = 0;
			break;
		default:
			break;
 800486e:	e00a      	b.n	8004886 <main+0x6a>
			num -= 1;
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	3b01      	subs	r3, #1
 8004874:	61fb      	str	r3, [r7, #28]
			break;
 8004876:	e007      	b.n	8004888 <main+0x6c>
			num += 1;
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	3301      	adds	r3, #1
 800487c:	61fb      	str	r3, [r7, #28]
			break;
 800487e:	e003      	b.n	8004888 <main+0x6c>
			num = 0;
 8004880:	2300      	movs	r3, #0
 8004882:	61fb      	str	r3, [r7, #28]
			break;
 8004884:	e000      	b.n	8004888 <main+0x6c>
			break;
 8004886:	bf00      	nop
		}

		//Startet im Manualzustand
		//Checkt nach Zustandsaenderung
		derEpicHandler.refresh();
 8004888:	f107 0314 	add.w	r3, r7, #20
 800488c:	4618      	mov	r0, r3
 800488e:	f000 ff87 	bl	80057a0 <_ZN12StateHandler7refreshEv>
		switch (enc.getEvent()) {
 8004892:	e7e0      	b.n	8004856 <main+0x3a>
 8004894:	080063f0 	.word	0x080063f0
 8004898:	200003ec 	.word	0x200003ec
 800489c:	08006408 	.word	0x08006408
 80048a0:	20000394 	.word	0x20000394
 80048a4:	20000474 	.word	0x20000474
 80048a8:	2000034c 	.word	0x2000034c

080048ac <_ZN15myReportHandlerD1Ev>:
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	4a05      	ldr	r2, [pc, #20]	@ (80048cc <_ZN15myReportHandlerD1Ev+0x20>)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4618      	mov	r0, r3
 80048be:	f7fe f909 	bl	8002ad4 <_ZN9EmbSysLib3Std6Report7HandlerD1Ev>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4618      	mov	r0, r3
 80048c6:	3708      	adds	r7, #8
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	0800682c 	.word	0x0800682c

080048d0 <_Z41__static_initialization_and_destruction_0ii>:

	}
}
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af02      	add	r7, sp, #8
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	f040 8130 	bne.w	8004b42 <_Z41__static_initialization_and_destruction_0ii+0x272>
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80048e8:	4293      	cmp	r3, r2
 80048ea:	f040 812a 	bne.w	8004b42 <_Z41__static_initialization_and_destruction_0ii+0x272>
} report;
 80048ee:	489c      	ldr	r0, [pc, #624]	@ (8004b60 <_Z41__static_initialization_and_destruction_0ii+0x290>)
 80048f0:	f7ff fd9c 	bl	800442c <_ZN15myReportHandlerC1Ev>
};

//-------------------------------------------------------------------
// Timer
//-------------------------------------------------------------------
Timer_Mcu   timer( Timer_Mcu::TIM_10, 10000L/*us*/ );
 80048f4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80048f8:	2107      	movs	r1, #7
 80048fa:	489a      	ldr	r0, [pc, #616]	@ (8004b64 <_Z41__static_initialization_and_destruction_0ii+0x294>)
 80048fc:	f7fd fa78 	bl	8001df0 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm>
TaskManager taskManager( timer );
 8004900:	4998      	ldr	r1, [pc, #608]	@ (8004b64 <_Z41__static_initialization_and_destruction_0ii+0x294>)
 8004902:	4899      	ldr	r0, [pc, #612]	@ (8004b68 <_Z41__static_initialization_and_destruction_0ii+0x298>)
 8004904:	f7ff fbac 	bl	8004060 <_ZN9EmbSysLib3Dev11TaskManagerC1ERNS_2Hw5TimerE>

//-------------------------------------------------------------------
// Port + Digital
//-------------------------------------------------------------------
Port_Mcu   portA( Port_Mcu::PA );
 8004908:	2100      	movs	r1, #0
 800490a:	4898      	ldr	r0, [pc, #608]	@ (8004b6c <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 800490c:	f7fc ffca 	bl	80018a4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE>
Port_Mcu   portB( Port_Mcu::PB );
 8004910:	2101      	movs	r1, #1
 8004912:	4897      	ldr	r0, [pc, #604]	@ (8004b70 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8004914:	f7fc ffc6 	bl	80018a4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE>
Port_Mcu   portC( Port_Mcu::PC );
 8004918:	2102      	movs	r1, #2
 800491a:	4896      	ldr	r0, [pc, #600]	@ (8004b74 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 800491c:	f7fc ffc2 	bl	80018a4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE>
Port_Mcu   portD( Port_Mcu::PD );
 8004920:	2103      	movs	r1, #3
 8004922:	4895      	ldr	r0, [pc, #596]	@ (8004b78 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8004924:	f7fc ffbe 	bl	80018a4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE>


//Sortierer Sensoren + Aktoren
Digital led0(portC, 8, Digital::Out, 0); // LD4 (blue)
 8004928:	2300      	movs	r3, #0
 800492a:	9300      	str	r3, [sp, #0]
 800492c:	2301      	movs	r3, #1
 800492e:	2208      	movs	r2, #8
 8004930:	4990      	ldr	r1, [pc, #576]	@ (8004b74 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8004932:	4892      	ldr	r0, [pc, #584]	@ (8004b7c <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8004934:	f7fe fdd0 	bl	80034d8 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>
Digital btnA(portA, 0, Digital::In, 0); // B1 (user button)
 8004938:	2300      	movs	r3, #0
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	2300      	movs	r3, #0
 800493e:	2200      	movs	r2, #0
 8004940:	498a      	ldr	r1, [pc, #552]	@ (8004b6c <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8004942:	488f      	ldr	r0, [pc, #572]	@ (8004b80 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8004944:	f7fe fdc8 	bl	80034d8 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>
Digital PC0(portC, 0, Digital::InPU, 1);
 8004948:	2301      	movs	r3, #1
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	2304      	movs	r3, #4
 800494e:	2200      	movs	r2, #0
 8004950:	4988      	ldr	r1, [pc, #544]	@ (8004b74 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8004952:	488c      	ldr	r0, [pc, #560]	@ (8004b84 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8004954:	f7fe fdc0 	bl	80034d8 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>
Digital PC1(portC, 1, Digital::InPU, 1);
 8004958:	2301      	movs	r3, #1
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	2304      	movs	r3, #4
 800495e:	2201      	movs	r2, #1
 8004960:	4984      	ldr	r1, [pc, #528]	@ (8004b74 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8004962:	4889      	ldr	r0, [pc, #548]	@ (8004b88 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8004964:	f7fe fdb8 	bl	80034d8 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>
Digital PC6(portC, 6, Digital::InPU, 1);
 8004968:	2301      	movs	r3, #1
 800496a:	9300      	str	r3, [sp, #0]
 800496c:	2304      	movs	r3, #4
 800496e:	2206      	movs	r2, #6
 8004970:	4980      	ldr	r1, [pc, #512]	@ (8004b74 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8004972:	4886      	ldr	r0, [pc, #536]	@ (8004b8c <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8004974:	f7fe fdb0 	bl	80034d8 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>
Digital PC7(portC, 7, Digital::InPU, 1);
 8004978:	2301      	movs	r3, #1
 800497a:	9300      	str	r3, [sp, #0]
 800497c:	2304      	movs	r3, #4
 800497e:	2207      	movs	r2, #7
 8004980:	497c      	ldr	r1, [pc, #496]	@ (8004b74 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8004982:	4883      	ldr	r0, [pc, #524]	@ (8004b90 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8004984:	f7fe fda8 	bl	80034d8 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>
Digital rotA(portA, 8, Digital::InPU, 1);
 8004988:	2301      	movs	r3, #1
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	2304      	movs	r3, #4
 800498e:	2208      	movs	r2, #8
 8004990:	4976      	ldr	r1, [pc, #472]	@ (8004b6c <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8004992:	4880      	ldr	r0, [pc, #512]	@ (8004b94 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8004994:	f7fe fda0 	bl	80034d8 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>
Digital rotB(portA, 1, Digital::InPU, 1);
 8004998:	2301      	movs	r3, #1
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	2304      	movs	r3, #4
 800499e:	2201      	movs	r2, #1
 80049a0:	4972      	ldr	r1, [pc, #456]	@ (8004b6c <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 80049a2:	487d      	ldr	r0, [pc, #500]	@ (8004b98 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 80049a4:	f7fe fd98 	bl	80034d8 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>
Digital rotCtrl(portA, 15, Digital::InPU, 1);
 80049a8:	2301      	movs	r3, #1
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	2304      	movs	r3, #4
 80049ae:	220f      	movs	r2, #15
 80049b0:	496e      	ldr	r1, [pc, #440]	@ (8004b6c <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 80049b2:	487a      	ldr	r0, [pc, #488]	@ (8004b9c <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 80049b4:	f7fe fd90 	bl	80034d8 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>
Digital Motor_Band(portB, 4, Digital::Out, 0);
 80049b8:	2300      	movs	r3, #0
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	2301      	movs	r3, #1
 80049be:	2204      	movs	r2, #4
 80049c0:	496b      	ldr	r1, [pc, #428]	@ (8004b70 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80049c2:	4877      	ldr	r0, [pc, #476]	@ (8004ba0 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 80049c4:	f7fe fd88 	bl	80034d8 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>
Digital Ventil_Stapel(portB, 0, Digital::Out, 0);
 80049c8:	2300      	movs	r3, #0
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	2301      	movs	r3, #1
 80049ce:	2200      	movs	r2, #0
 80049d0:	4967      	ldr	r1, [pc, #412]	@ (8004b70 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80049d2:	4874      	ldr	r0, [pc, #464]	@ (8004ba4 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 80049d4:	f7fe fd80 	bl	80034d8 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>
Digital Ventil_Ausw(portB, 1, Digital::Out, 0);
 80049d8:	2300      	movs	r3, #0
 80049da:	9300      	str	r3, [sp, #0]
 80049dc:	2301      	movs	r3, #1
 80049de:	2201      	movs	r2, #1
 80049e0:	4963      	ldr	r1, [pc, #396]	@ (8004b70 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80049e2:	4871      	ldr	r0, [pc, #452]	@ (8004ba8 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 80049e4:	f7fe fd78 	bl	80034d8 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>
Digital Ventil_Verarb(portB, 6, Digital::Out, 0);
 80049e8:	2300      	movs	r3, #0
 80049ea:	9300      	str	r3, [sp, #0]
 80049ec:	2301      	movs	r3, #1
 80049ee:	2206      	movs	r2, #6
 80049f0:	495f      	ldr	r1, [pc, #380]	@ (8004b70 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80049f2:	486e      	ldr	r0, [pc, #440]	@ (8004bac <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 80049f4:	f7fe fd70 	bl	80034d8 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>
Digital Motor_Pumpe(portB, 8, Digital::Out, 0);
 80049f8:	2300      	movs	r3, #0
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	2301      	movs	r3, #1
 80049fe:	2208      	movs	r2, #8
 8004a00:	495b      	ldr	r1, [pc, #364]	@ (8004b70 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8004a02:	486b      	ldr	r0, [pc, #428]	@ (8004bb0 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8004a04:	f7fe fd68 	bl	80034d8 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>
Digital Light_Stapel(portA, 6, Digital::InPU, 0);
 8004a08:	2300      	movs	r3, #0
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	2304      	movs	r3, #4
 8004a0e:	2206      	movs	r2, #6
 8004a10:	4956      	ldr	r1, [pc, #344]	@ (8004b6c <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8004a12:	4868      	ldr	r0, [pc, #416]	@ (8004bb4 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8004a14:	f7fe fd60 	bl	80034d8 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>
Digital Light_Verarb(portA, 7, Digital::InPU, 0);
 8004a18:	2300      	movs	r3, #0
 8004a1a:	9300      	str	r3, [sp, #0]
 8004a1c:	2304      	movs	r3, #4
 8004a1e:	2207      	movs	r2, #7
 8004a20:	4952      	ldr	r1, [pc, #328]	@ (8004b6c <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8004a22:	4865      	ldr	r0, [pc, #404]	@ (8004bb8 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 8004a24:	f7fe fd58 	bl	80034d8 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>
Digital Inkremental_Band(portC, 2, Digital::InPU, 0);
 8004a28:	2300      	movs	r3, #0
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	2304      	movs	r3, #4
 8004a2e:	2202      	movs	r2, #2
 8004a30:	4950      	ldr	r1, [pc, #320]	@ (8004b74 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8004a32:	4862      	ldr	r0, [pc, #392]	@ (8004bbc <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8004a34:	f7fe fd50 	bl	80034d8 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>

//Sortier Sensor
Adc_Mcu adc(timer);
 8004a38:	494a      	ldr	r1, [pc, #296]	@ (8004b64 <_Z41__static_initialization_and_destruction_0ii+0x294>)
 8004a3a:	4861      	ldr	r0, [pc, #388]	@ (8004bc0 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8004a3c:	f7fc fe0a 	bl	8001654 <_ZN9EmbSysLib2Hw7Adc_McuC1ERNS0_5TimerE>
AnalogInAdc Signal_Farbe(adc, 3);
 8004a40:	2300      	movs	r3, #0
 8004a42:	9301      	str	r3, [sp, #4]
 8004a44:	f04f 0300 	mov.w	r3, #0
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004a4e:	2203      	movs	r2, #3
 8004a50:	495b      	ldr	r1, [pc, #364]	@ (8004bc0 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8004a52:	485c      	ldr	r0, [pc, #368]	@ (8004bc4 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8004a54:	f7fe fcf0 	bl	8003438 <_ZN9EmbSysLib3Dev11AnalogInAdcC1ERNS_2Hw3AdcEhffh>
AnalogInAdc Signal_Druck(adc, 2);
 8004a58:	2300      	movs	r3, #0
 8004a5a:	9301      	str	r3, [sp, #4]
 8004a5c:	f04f 0300 	mov.w	r3, #0
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004a66:	2202      	movs	r2, #2
 8004a68:	4955      	ldr	r1, [pc, #340]	@ (8004bc0 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8004a6a:	4857      	ldr	r0, [pc, #348]	@ (8004bc8 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8004a6c:	f7fe fce4 	bl	8003438 <_ZN9EmbSysLib3Dev11AnalogInAdcC1ERNS_2Hw3AdcEhffh>

DigitalEncoderRotaryknob  enc( &rotA, &rotB, &rotCtrl, taskManager );
 8004a70:	4b3d      	ldr	r3, [pc, #244]	@ (8004b68 <_Z41__static_initialization_and_destruction_0ii+0x298>)
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	4b49      	ldr	r3, [pc, #292]	@ (8004b9c <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8004a76:	4a48      	ldr	r2, [pc, #288]	@ (8004b98 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8004a78:	4946      	ldr	r1, [pc, #280]	@ (8004b94 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8004a7a:	4854      	ldr	r0, [pc, #336]	@ (8004bcc <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8004a7c:	f7fe ff70 	bl	8003960 <_ZN9EmbSysLib4Ctrl24DigitalEncoderRotaryknobC1EPNS_3Dev7DigitalES4_S4_RNS2_11TaskManagerE>

//-------------------------------------------------------------------
// UART
//-------------------------------------------------------------------
Uart_Mcu  uart    ( Uart_Mcu::USART_1, 9600, 100, 100 );
 8004a80:	2364      	movs	r3, #100	@ 0x64
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	2364      	movs	r3, #100	@ 0x64
 8004a86:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	4850      	ldr	r0, [pc, #320]	@ (8004bd0 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8004a8e:	f7fd fd4d 	bl	800252c <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmtt>
Terminal  terminal( uart, 255,255,"#", "!\r\n" );
 8004a92:	4b50      	ldr	r3, [pc, #320]	@ (8004bd4 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8004a94:	9301      	str	r3, [sp, #4]
 8004a96:	4b50      	ldr	r3, [pc, #320]	@ (8004bd8 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	23ff      	movs	r3, #255	@ 0xff
 8004a9c:	22ff      	movs	r2, #255	@ 0xff
 8004a9e:	494c      	ldr	r1, [pc, #304]	@ (8004bd0 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8004aa0:	484e      	ldr	r0, [pc, #312]	@ (8004bdc <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 8004aa2:	f7fe fe0f 	bl	80036c4 <_ZN9EmbSysLib3Dev8TerminalC1ERNS_2Hw4UartEttPKcS6_>

//-------------------------------------------------------------------
// Display
//-------------------------------------------------------------------
SPImaster_Mcu         spi          ( SPImaster_Mcu::SPI_2, SPImaster_Mcu::CR_1000kHz, SPImaster_Mcu::CPOL_H_CPHA_H );
 8004aa6:	2311      	movs	r3, #17
 8004aa8:	2202      	movs	r2, #2
 8004aaa:	2102      	movs	r1, #2
 8004aac:	484c      	ldr	r0, [pc, #304]	@ (8004be0 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8004aae:	f7fd f879 	bl	8001ba4 <_ZN9EmbSysLib2Hw13SPImaster_McuC1ENS1_6SPI_IDENS1_12SPI_BaudrateENS0_9SPImaster11ClockPolPhaE>
SPImaster::Device     spiDevDisplay( spi, portB, 12 );
 8004ab2:	230c      	movs	r3, #12
 8004ab4:	4a2e      	ldr	r2, [pc, #184]	@ (8004b70 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8004ab6:	494a      	ldr	r1, [pc, #296]	@ (8004be0 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8004ab8:	484a      	ldr	r0, [pc, #296]	@ (8004be4 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8004aba:	f7ff faaf 	bl	800401c <_ZN9EmbSysLib2Hw9SPImaster6DeviceC1ERS1_RNS0_4PortEh>
DisplayChar_DIP204spi dispHw       ( spiDevDisplay );
 8004abe:	4949      	ldr	r1, [pc, #292]	@ (8004be4 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8004ac0:	4849      	ldr	r0, [pc, #292]	@ (8004be8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8004ac2:	f7ff fccf 	bl	8004464 <_ZN9EmbSysLib2Hw21DisplayChar_DIP204spiC1ERNS0_9SPImaster6DeviceE>
ScreenChar            disp         ( dispHw );
 8004ac6:	4948      	ldr	r1, [pc, #288]	@ (8004be8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8004ac8:	4848      	ldr	r0, [pc, #288]	@ (8004bec <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 8004aca:	f7fe fd7b 	bl	80035c4 <_ZN9EmbSysLib3Dev10ScreenCharC1ERNS_2Hw11DisplayCharE>

//-------------------------------------------------------------------
// InduRobot
//-------------------------------------------------------------------
Digital  enable( portD, 2, Digital::Out, 1 );
 8004ace:	2301      	movs	r3, #1
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	4928      	ldr	r1, [pc, #160]	@ (8004b78 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8004ad8:	4845      	ldr	r0, [pc, #276]	@ (8004bf0 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8004ada:	f7fe fcfd 	bl	80034d8 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>

Digital  motor_1_minus( portB, 4, Digital::Out,  0 );
 8004ade:	2300      	movs	r3, #0
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	2204      	movs	r2, #4
 8004ae6:	4922      	ldr	r1, [pc, #136]	@ (8004b70 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8004ae8:	4842      	ldr	r0, [pc, #264]	@ (8004bf4 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 8004aea:	f7fe fcf5 	bl	80034d8 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>
Digital  motor_1_plus ( portB, 5, Digital::Out,  0 );
 8004aee:	2300      	movs	r3, #0
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	2301      	movs	r3, #1
 8004af4:	2205      	movs	r2, #5
 8004af6:	491e      	ldr	r1, [pc, #120]	@ (8004b70 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8004af8:	483f      	ldr	r0, [pc, #252]	@ (8004bf8 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8004afa:	f7fe fced 	bl	80034d8 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>

Digital  endschalter_1( portA, 2, Digital::InPU, 0 );
 8004afe:	2300      	movs	r3, #0
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	2304      	movs	r3, #4
 8004b04:	2202      	movs	r2, #2
 8004b06:	4919      	ldr	r1, [pc, #100]	@ (8004b6c <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8004b08:	483c      	ldr	r0, [pc, #240]	@ (8004bfc <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8004b0a:	f7fe fce5 	bl	80034d8 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>
Digital  increment_1  ( portA, 3, Digital::InPU, 0 );
 8004b0e:	2300      	movs	r3, #0
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	2304      	movs	r3, #4
 8004b14:	2203      	movs	r2, #3
 8004b16:	4915      	ldr	r1, [pc, #84]	@ (8004b6c <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8004b18:	4839      	ldr	r0, [pc, #228]	@ (8004c00 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 8004b1a:	f7fe fcdd 	bl	80034d8 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>
		1000); // time slice in us
 8004b1e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004b22:	2102      	movs	r1, #2
 8004b24:	4837      	ldr	r0, [pc, #220]	@ (8004c04 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8004b26:	f7ff fb5f 	bl	80041e8 <_ZN9EmbSysLib3Mod4RtosC1Eht>
myBandCounter bandCounter(taskManager);
 8004b2a:	490f      	ldr	r1, [pc, #60]	@ (8004b68 <_Z41__static_initialization_and_destruction_0ii+0x298>)
 8004b2c:	4836      	ldr	r0, [pc, #216]	@ (8004c08 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8004b2e:	f7ff fddf 	bl	80046f0 <_ZN13myBandCounterC1ERN9EmbSysLib3Dev11TaskManagerE>
myPressureControl pressureControl(taskManager);
 8004b32:	490d      	ldr	r1, [pc, #52]	@ (8004b68 <_Z41__static_initialization_and_destruction_0ii+0x298>)
 8004b34:	4835      	ldr	r0, [pc, #212]	@ (8004c0c <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 8004b36:	f7ff fd93 	bl	8004660 <_ZN17myPressureControlC1ERN9EmbSysLib3Dev11TaskManagerE>
myTimerTask timerTask(taskManager);
 8004b3a:	490b      	ldr	r1, [pc, #44]	@ (8004b68 <_Z41__static_initialization_and_destruction_0ii+0x298>)
 8004b3c:	4834      	ldr	r0, [pc, #208]	@ (8004c10 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8004b3e:	f7ff fe17 	bl	8004770 <_ZN11myTimerTaskC1ERN9EmbSysLib3Dev11TaskManagerE>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d107      	bne.n	8004b58 <_Z41__static_initialization_and_destruction_0ii+0x288>
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d102      	bne.n	8004b58 <_Z41__static_initialization_and_destruction_0ii+0x288>
 8004b52:	4803      	ldr	r0, [pc, #12]	@ (8004b60 <_Z41__static_initialization_and_destruction_0ii+0x290>)
 8004b54:	f7ff feaa 	bl	80048ac <_ZN15myReportHandlerD1Ev>
}
 8004b58:	bf00      	nop
 8004b5a:	3708      	adds	r7, #8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	200000f4 	.word	0x200000f4
 8004b64:	200000f8 	.word	0x200000f8
 8004b68:	20000118 	.word	0x20000118
 8004b6c:	20000138 	.word	0x20000138
 8004b70:	20000144 	.word	0x20000144
 8004b74:	20000150 	.word	0x20000150
 8004b78:	2000015c 	.word	0x2000015c
 8004b7c:	20000168 	.word	0x20000168
 8004b80:	20000180 	.word	0x20000180
 8004b84:	20000198 	.word	0x20000198
 8004b88:	200001b0 	.word	0x200001b0
 8004b8c:	200001c8 	.word	0x200001c8
 8004b90:	200001e0 	.word	0x200001e0
 8004b94:	200001f8 	.word	0x200001f8
 8004b98:	20000210 	.word	0x20000210
 8004b9c:	20000228 	.word	0x20000228
 8004ba0:	20000240 	.word	0x20000240
 8004ba4:	20000258 	.word	0x20000258
 8004ba8:	20000270 	.word	0x20000270
 8004bac:	20000288 	.word	0x20000288
 8004bb0:	200002a0 	.word	0x200002a0
 8004bb4:	200002b8 	.word	0x200002b8
 8004bb8:	200002d0 	.word	0x200002d0
 8004bbc:	200002e8 	.word	0x200002e8
 8004bc0:	20000300 	.word	0x20000300
 8004bc4:	2000031c 	.word	0x2000031c
 8004bc8:	20000334 	.word	0x20000334
 8004bcc:	2000034c 	.word	0x2000034c
 8004bd0:	2000036c 	.word	0x2000036c
 8004bd4:	08006420 	.word	0x08006420
 8004bd8:	08006424 	.word	0x08006424
 8004bdc:	20000394 	.word	0x20000394
 8004be0:	200003bc 	.word	0x200003bc
 8004be4:	200003c4 	.word	0x200003c4
 8004be8:	200003d8 	.word	0x200003d8
 8004bec:	200003ec 	.word	0x200003ec
 8004bf0:	200003fc 	.word	0x200003fc
 8004bf4:	20000414 	.word	0x20000414
 8004bf8:	2000042c 	.word	0x2000042c
 8004bfc:	20000444 	.word	0x20000444
 8004c00:	2000045c 	.word	0x2000045c
 8004c04:	20000474 	.word	0x20000474
 8004c08:	2000047c 	.word	0x2000047c
 8004c0c:	2000048c 	.word	0x2000048c
 8004c10:	20000498 	.word	0x20000498

08004c14 <_GLOBAL__sub_I_report>:
 8004c14:	b580      	push	{r7, lr}
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004c1c:	2001      	movs	r0, #1
 8004c1e:	f7ff fe57 	bl	80048d0 <_Z41__static_initialization_and_destruction_0ii>
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <_GLOBAL__sub_D_report>:
 8004c24:	b580      	push	{r7, lr}
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004c2c:	2000      	movs	r0, #0
 8004c2e:	f7ff fe4f 	bl	80048d0 <_Z41__static_initialization_and_destruction_0ii>
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <Reset_Handler>:
  movs r1, #0
 8004c34:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004c36:	e003      	b.n	8004c40 <LoopCopyDataInit>

08004c38 <CopyDataInit>:
  ldr r3, =_sidata
 8004c38:	4b0b      	ldr	r3, [pc, #44]	@ (8004c68 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004c3a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004c3c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004c3e:	3104      	adds	r1, #4

08004c40 <LoopCopyDataInit>:
  ldr r0, =_sdata
 8004c40:	480a      	ldr	r0, [pc, #40]	@ (8004c6c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004c42:	4b0b      	ldr	r3, [pc, #44]	@ (8004c70 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004c44:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004c46:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004c48:	d3f6      	bcc.n	8004c38 <CopyDataInit>
  ldr r2, =_sbss
 8004c4a:	4a0a      	ldr	r2, [pc, #40]	@ (8004c74 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004c4c:	e002      	b.n	8004c54 <LoopFillZerobss>

08004c4e <FillZerobss>:
  movs r3, #0
 8004c4e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004c50:	f842 3b04 	str.w	r3, [r2], #4

08004c54 <LoopFillZerobss>:
  ldr r3, = _ebss
 8004c54:	4b08      	ldr	r3, [pc, #32]	@ (8004c78 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004c56:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004c58:	d3f9      	bcc.n	8004c4e <FillZerobss>
    bl  SystemInit
 8004c5a:	f7fc fae5 	bl	8001228 <SystemInit>
    bl  __libc_init_array
 8004c5e:	f000 ffd7 	bl	8005c10 <__libc_init_array>
  bl main
 8004c62:	f7ff fddb 	bl	800481c <main>
  bx lr
 8004c66:	4770      	bx	lr
  ldr r3, =_sidata
 8004c68:	0800696c 	.word	0x0800696c
  ldr r0, =_sdata
 8004c6c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004c70:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8004c74:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8004c78:	20000604 	.word	0x20000604

08004c7c <BusFault_Handler>:
  b Infinite_Loop
 8004c7c:	e7fe      	b.n	8004c7c <BusFault_Handler>

08004c7e <_ZN17myPressureControl11getPressureEv>:

	int getPressure() {
 8004c7e:	b480      	push	{r7}
 8004c80:	b083      	sub	sp, #12
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
		return pressure;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	689b      	ldr	r3, [r3, #8]
	}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bc80      	pop	{r7}
 8004c92:	4770      	bx	lr

08004c94 <_ZN13myBandCounter10setCounterEi>:

	void setCounter(int count = 0) {
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
		band_counter = count;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	60da      	str	r2, [r3, #12]
	}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bc80      	pop	{r7}
 8004cac:	4770      	bx	lr

08004cae <_ZN13myBandCounter10getCounterEv>:

	int getCounter() {
 8004cae:	b480      	push	{r7}
 8004cb0:	b083      	sub	sp, #12
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
		return band_counter;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68db      	ldr	r3, [r3, #12]
	}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bc80      	pop	{r7}
 8004cc2:	4770      	bx	lr

08004cc4 <_ZN5State7displayEv>:
	virtual int satisfied() = 0;
	//Aktion beim Zustandswechsel fuer entsprechendes Ziel
	virtual void transition(int destination) = 0;

	//Displayausgabe
	virtual void display() {
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af02      	add	r7, sp, #8
 8004cca:	6078      	str	r0, [r7, #4]
		disp.printf(0, 0, "MODE:Automatic      ");
 8004ccc:	4b21      	ldr	r3, [pc, #132]	@ (8004d54 <_ZN5State7displayEv+0x90>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	4821      	ldr	r0, [pc, #132]	@ (8004d58 <_ZN5State7displayEv+0x94>)
 8004cd4:	f7fe fcc3 	bl	800365e <_ZN9EmbSysLib3Dev10ScreenChar6printfEhhPKcz>
		disp.printf(2, 0, "clr:%-5d", Signal_Farbe.getRaw());
 8004cd8:	4820      	ldr	r0, [pc, #128]	@ (8004d5c <_ZN5State7displayEv+0x98>)
 8004cda:	f7fe fbd5 	bl	8003488 <_ZN9EmbSysLib3Dev11AnalogInAdc6getRawEv>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	9300      	str	r3, [sp, #0]
 8004ce2:	4b1f      	ldr	r3, [pc, #124]	@ (8004d60 <_ZN5State7displayEv+0x9c>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	2102      	movs	r1, #2
 8004ce8:	481b      	ldr	r0, [pc, #108]	@ (8004d58 <_ZN5State7displayEv+0x94>)
 8004cea:	f7fe fcb8 	bl	800365e <_ZN9EmbSysLib3Dev10ScreenChar6printfEhhPKcz>
		disp.printf(2, 10, "drk:%-5d", pressureControl.getPressure());
 8004cee:	481d      	ldr	r0, [pc, #116]	@ (8004d64 <_ZN5State7displayEv+0xa0>)
 8004cf0:	f7ff ffc5 	bl	8004c7e <_ZN17myPressureControl11getPressureEv>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8004d68 <_ZN5State7displayEv+0xa4>)
 8004cfa:	220a      	movs	r2, #10
 8004cfc:	2102      	movs	r1, #2
 8004cfe:	4816      	ldr	r0, [pc, #88]	@ (8004d58 <_ZN5State7displayEv+0x94>)
 8004d00:	f7fe fcad 	bl	800365e <_ZN9EmbSysLib3Dev10ScreenChar6printfEhhPKcz>
		disp.printf(3, 0, "R:%-2d ", red_counter);
 8004d04:	4b19      	ldr	r3, [pc, #100]	@ (8004d6c <_ZN5State7displayEv+0xa8>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	9300      	str	r3, [sp, #0]
 8004d0a:	4b19      	ldr	r3, [pc, #100]	@ (8004d70 <_ZN5State7displayEv+0xac>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	2103      	movs	r1, #3
 8004d10:	4811      	ldr	r0, [pc, #68]	@ (8004d58 <_ZN5State7displayEv+0x94>)
 8004d12:	f7fe fca4 	bl	800365e <_ZN9EmbSysLib3Dev10ScreenChar6printfEhhPKcz>
		disp.printf(3, 5, "W:%-2d ", white_counter);
 8004d16:	4b17      	ldr	r3, [pc, #92]	@ (8004d74 <_ZN5State7displayEv+0xb0>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	9300      	str	r3, [sp, #0]
 8004d1c:	4b16      	ldr	r3, [pc, #88]	@ (8004d78 <_ZN5State7displayEv+0xb4>)
 8004d1e:	2205      	movs	r2, #5
 8004d20:	2103      	movs	r1, #3
 8004d22:	480d      	ldr	r0, [pc, #52]	@ (8004d58 <_ZN5State7displayEv+0x94>)
 8004d24:	f7fe fc9b 	bl	800365e <_ZN9EmbSysLib3Dev10ScreenChar6printfEhhPKcz>
		disp.printf(3, 10, "B:%-2d ", blue_counter);
 8004d28:	4b14      	ldr	r3, [pc, #80]	@ (8004d7c <_ZN5State7displayEv+0xb8>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	4b14      	ldr	r3, [pc, #80]	@ (8004d80 <_ZN5State7displayEv+0xbc>)
 8004d30:	220a      	movs	r2, #10
 8004d32:	2103      	movs	r1, #3
 8004d34:	4808      	ldr	r0, [pc, #32]	@ (8004d58 <_ZN5State7displayEv+0x94>)
 8004d36:	f7fe fc92 	bl	800365e <_ZN9EmbSysLib3Dev10ScreenChar6printfEhhPKcz>
		disp.printf(3, 15, "E:%-2d ", error_counter);
 8004d3a:	4b12      	ldr	r3, [pc, #72]	@ (8004d84 <_ZN5State7displayEv+0xc0>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	9300      	str	r3, [sp, #0]
 8004d40:	4b11      	ldr	r3, [pc, #68]	@ (8004d88 <_ZN5State7displayEv+0xc4>)
 8004d42:	220f      	movs	r2, #15
 8004d44:	2103      	movs	r1, #3
 8004d46:	4804      	ldr	r0, [pc, #16]	@ (8004d58 <_ZN5State7displayEv+0x94>)
 8004d48:	f7fe fc89 	bl	800365e <_ZN9EmbSysLib3Dev10ScreenChar6printfEhhPKcz>
	}
 8004d4c:	bf00      	nop
 8004d4e:	3708      	adds	r7, #8
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	08006428 	.word	0x08006428
 8004d58:	200003ec 	.word	0x200003ec
 8004d5c:	2000031c 	.word	0x2000031c
 8004d60:	08006440 	.word	0x08006440
 8004d64:	2000048c 	.word	0x2000048c
 8004d68:	0800644c 	.word	0x0800644c
 8004d6c:	200004a4 	.word	0x200004a4
 8004d70:	08006458 	.word	0x08006458
 8004d74:	200004a8 	.word	0x200004a8
 8004d78:	08006460 	.word	0x08006460
 8004d7c:	200004ac 	.word	0x200004ac
 8004d80:	08006468 	.word	0x08006468
 8004d84:	200004b0 	.word	0x200004b0
 8004d88:	08006470 	.word	0x08006470

08004d8c <_ZN11myTimerTask5delayEm>:

	//Code Verzoegerung aber cnt bleibt intakt
	void delay(uint32_t millis) {
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
		uint32_t cntinitial = cnt;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	60fb      	str	r3, [r7, #12]
		uint32_t diff = (uint32_t) millis / 10;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	4a09      	ldr	r2, [pc, #36]	@ (8004dc4 <_ZN11myTimerTask5delayEm+0x38>)
 8004da0:	fba2 2303 	umull	r2, r3, r2, r3
 8004da4:	08db      	lsrs	r3, r3, #3
 8004da6:	60bb      	str	r3, [r7, #8]
		while (cnt - cntinitial < diff) {
 8004da8:	bf00      	nop
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	689a      	ldr	r2, [r3, #8]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d8f8      	bhi.n	8004daa <_ZN11myTimerTask5delayEm+0x1e>
		}
	}
 8004db8:	bf00      	nop
 8004dba:	bf00      	nop
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bc80      	pop	{r7}
 8004dc2:	4770      	bx	lr
 8004dc4:	cccccccd 	.word	0xcccccccd

08004dc8 <_ZN5State8countRedEv>:
extern Digital Light_Verarb;
extern Digital Inkremental_Band;

//*******************************************************************

void State::countRed() {
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
	red_counter++;
 8004dd0:	4b04      	ldr	r3, [pc, #16]	@ (8004de4 <_ZN5State8countRedEv+0x1c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	4a03      	ldr	r2, [pc, #12]	@ (8004de4 <_ZN5State8countRedEv+0x1c>)
 8004dd8:	6013      	str	r3, [r2, #0]
}
 8004dda:	bf00      	nop
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bc80      	pop	{r7}
 8004de2:	4770      	bx	lr
 8004de4:	200004a4 	.word	0x200004a4

08004de8 <_ZN5State10countWhiteEv>:

void State::countWhite() {
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
	white_counter++;
 8004df0:	4b04      	ldr	r3, [pc, #16]	@ (8004e04 <_ZN5State10countWhiteEv+0x1c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	3301      	adds	r3, #1
 8004df6:	4a03      	ldr	r2, [pc, #12]	@ (8004e04 <_ZN5State10countWhiteEv+0x1c>)
 8004df8:	6013      	str	r3, [r2, #0]
}
 8004dfa:	bf00      	nop
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bc80      	pop	{r7}
 8004e02:	4770      	bx	lr
 8004e04:	200004a8 	.word	0x200004a8

08004e08 <_ZN5State9countBlueEv>:

void State::countBlue() {
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
	blue_counter++;
 8004e10:	4b04      	ldr	r3, [pc, #16]	@ (8004e24 <_ZN5State9countBlueEv+0x1c>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3301      	adds	r3, #1
 8004e16:	4a03      	ldr	r2, [pc, #12]	@ (8004e24 <_ZN5State9countBlueEv+0x1c>)
 8004e18:	6013      	str	r3, [r2, #0]
}
 8004e1a:	bf00      	nop
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bc80      	pop	{r7}
 8004e22:	4770      	bx	lr
 8004e24:	200004ac 	.word	0x200004ac

08004e28 <_ZN5State10countErrorEv>:

void State::countError() {
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
	error_counter++;
 8004e30:	4b04      	ldr	r3, [pc, #16]	@ (8004e44 <_ZN5State10countErrorEv+0x1c>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	3301      	adds	r3, #1
 8004e36:	4a03      	ldr	r2, [pc, #12]	@ (8004e44 <_ZN5State10countErrorEv+0x1c>)
 8004e38:	6013      	str	r3, [r2, #0]
}
 8004e3a:	bf00      	nop
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bc80      	pop	{r7}
 8004e42:	4770      	bx	lr
 8004e44:	200004b0 	.word	0x200004b0

08004e48 <_ZN6Manual9satisfiedEv>:

//*******************************************************************

int Manual::satisfied() {
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
	if (btnA.getEvent() == Digital::ACTIVATED) {
 8004e50:	4835      	ldr	r0, [pc, #212]	@ (8004f28 <_ZN6Manual9satisfiedEv+0xe0>)
 8004e52:	f7fc f913 	bl	800107c <_ZN9EmbSysLib3Dev7Digital8getEventEv>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	bf0c      	ite	eq
 8004e5c:	2301      	moveq	r3, #1
 8004e5e:	2300      	movne	r3, #0
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <_ZN6Manual9satisfiedEv+0x22>
		return 1; //StapelDetect
 8004e66:	2301      	movs	r3, #1
 8004e68:	e059      	b.n	8004f1e <_ZN6Manual9satisfiedEv+0xd6>
	} else {
		//Manuelles ansprechen der Ventile oder des Fliessbandes

		//FLIESSBAND
		if (PC0.getEvent() == Digital::ACTIVATED) {
 8004e6a:	4830      	ldr	r0, [pc, #192]	@ (8004f2c <_ZN6Manual9satisfiedEv+0xe4>)
 8004e6c:	f7fc f906 	bl	800107c <_ZN9EmbSysLib3Dev7Digital8getEventEv>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	bf0c      	ite	eq
 8004e76:	2301      	moveq	r3, #1
 8004e78:	2300      	movne	r3, #0
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d003      	beq.n	8004e88 <_ZN6Manual9satisfiedEv+0x40>
			Motor_Band.toggle();
 8004e80:	482b      	ldr	r0, [pc, #172]	@ (8004f30 <_ZN6Manual9satisfiedEv+0xe8>)
 8004e82:	f7fc f8e7 	bl	8001054 <_ZN9EmbSysLib3Dev7Digital6toggleEv>
 8004e86:	e049      	b.n	8004f1c <_ZN6Manual9satisfiedEv+0xd4>
		}

		//STEMPEL Ventil
		else if (PC1.getEvent() == Digital::ACTIVATED) {
 8004e88:	482a      	ldr	r0, [pc, #168]	@ (8004f34 <_ZN6Manual9satisfiedEv+0xec>)
 8004e8a:	f7fc f8f7 	bl	800107c <_ZN9EmbSysLib3Dev7Digital8getEventEv>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	bf0c      	ite	eq
 8004e94:	2301      	moveq	r3, #1
 8004e96:	2300      	movne	r3, #0
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00d      	beq.n	8004eba <_ZN6Manual9satisfiedEv+0x72>
			Ventil_Verarb.set(1);
 8004e9e:	2101      	movs	r1, #1
 8004ea0:	4825      	ldr	r0, [pc, #148]	@ (8004f38 <_ZN6Manual9satisfiedEv+0xf0>)
 8004ea2:	f7fe fb5e 	bl	8003562 <_ZN9EmbSysLib3Dev7Digital3setEb>
			timerTask.delay(350);
 8004ea6:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8004eaa:	4824      	ldr	r0, [pc, #144]	@ (8004f3c <_ZN6Manual9satisfiedEv+0xf4>)
 8004eac:	f7ff ff6e 	bl	8004d8c <_ZN11myTimerTask5delayEm>
			Ventil_Verarb.set(0);
 8004eb0:	2100      	movs	r1, #0
 8004eb2:	4821      	ldr	r0, [pc, #132]	@ (8004f38 <_ZN6Manual9satisfiedEv+0xf0>)
 8004eb4:	f7fe fb55 	bl	8003562 <_ZN9EmbSysLib3Dev7Digital3setEb>
 8004eb8:	e030      	b.n	8004f1c <_ZN6Manual9satisfiedEv+0xd4>
		}

		//AUSWAHL Ventil
		else if (PC6.getEvent() == Digital::ACTIVATED) {
 8004eba:	4821      	ldr	r0, [pc, #132]	@ (8004f40 <_ZN6Manual9satisfiedEv+0xf8>)
 8004ebc:	f7fc f8de 	bl	800107c <_ZN9EmbSysLib3Dev7Digital8getEventEv>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	bf0c      	ite	eq
 8004ec6:	2301      	moveq	r3, #1
 8004ec8:	2300      	movne	r3, #0
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00d      	beq.n	8004eec <_ZN6Manual9satisfiedEv+0xa4>
			Ventil_Ausw.set(1);
 8004ed0:	2101      	movs	r1, #1
 8004ed2:	481c      	ldr	r0, [pc, #112]	@ (8004f44 <_ZN6Manual9satisfiedEv+0xfc>)
 8004ed4:	f7fe fb45 	bl	8003562 <_ZN9EmbSysLib3Dev7Digital3setEb>
			timerTask.delay(350);
 8004ed8:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8004edc:	4817      	ldr	r0, [pc, #92]	@ (8004f3c <_ZN6Manual9satisfiedEv+0xf4>)
 8004ede:	f7ff ff55 	bl	8004d8c <_ZN11myTimerTask5delayEm>
			Ventil_Ausw.set(0);
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	4817      	ldr	r0, [pc, #92]	@ (8004f44 <_ZN6Manual9satisfiedEv+0xfc>)
 8004ee6:	f7fe fb3c 	bl	8003562 <_ZN9EmbSysLib3Dev7Digital3setEb>
 8004eea:	e017      	b.n	8004f1c <_ZN6Manual9satisfiedEv+0xd4>
		}

		//STAPEL
		else if (PC7.getEvent() == Digital::ACTIVATED) {
 8004eec:	4816      	ldr	r0, [pc, #88]	@ (8004f48 <_ZN6Manual9satisfiedEv+0x100>)
 8004eee:	f7fc f8c5 	bl	800107c <_ZN9EmbSysLib3Dev7Digital8getEventEv>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	bf0c      	ite	eq
 8004ef8:	2301      	moveq	r3, #1
 8004efa:	2300      	movne	r3, #0
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00c      	beq.n	8004f1c <_ZN6Manual9satisfiedEv+0xd4>
			Ventil_Stapel.set(1);
 8004f02:	2101      	movs	r1, #1
 8004f04:	4811      	ldr	r0, [pc, #68]	@ (8004f4c <_ZN6Manual9satisfiedEv+0x104>)
 8004f06:	f7fe fb2c 	bl	8003562 <_ZN9EmbSysLib3Dev7Digital3setEb>
			timerTask.delay(350);
 8004f0a:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8004f0e:	480b      	ldr	r0, [pc, #44]	@ (8004f3c <_ZN6Manual9satisfiedEv+0xf4>)
 8004f10:	f7ff ff3c 	bl	8004d8c <_ZN11myTimerTask5delayEm>
			Ventil_Stapel.set(0);
 8004f14:	2100      	movs	r1, #0
 8004f16:	480d      	ldr	r0, [pc, #52]	@ (8004f4c <_ZN6Manual9satisfiedEv+0x104>)
 8004f18:	f7fe fb23 	bl	8003562 <_ZN9EmbSysLib3Dev7Digital3setEb>
		}
		return 0; //Bleibt in Manual
 8004f1c:	2300      	movs	r3, #0
	}
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	20000180 	.word	0x20000180
 8004f2c:	20000198 	.word	0x20000198
 8004f30:	20000240 	.word	0x20000240
 8004f34:	200001b0 	.word	0x200001b0
 8004f38:	20000288 	.word	0x20000288
 8004f3c:	20000498 	.word	0x20000498
 8004f40:	200001c8 	.word	0x200001c8
 8004f44:	20000270 	.word	0x20000270
 8004f48:	200001e0 	.word	0x200001e0
 8004f4c:	20000258 	.word	0x20000258

08004f50 <_ZN6Manual10transitionEi>:

void Manual::transition(int destination) {
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
	Ventil_Verarb.set(0);
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	480c      	ldr	r0, [pc, #48]	@ (8004f90 <_ZN6Manual10transitionEi+0x40>)
 8004f5e:	f7fe fb00 	bl	8003562 <_ZN9EmbSysLib3Dev7Digital3setEb>
	Ventil_Ausw.set(0);
 8004f62:	2100      	movs	r1, #0
 8004f64:	480b      	ldr	r0, [pc, #44]	@ (8004f94 <_ZN6Manual10transitionEi+0x44>)
 8004f66:	f7fe fafc 	bl	8003562 <_ZN9EmbSysLib3Dev7Digital3setEb>
	Ventil_Stapel.set(0);
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	480a      	ldr	r0, [pc, #40]	@ (8004f98 <_ZN6Manual10transitionEi+0x48>)
 8004f6e:	f7fe faf8 	bl	8003562 <_ZN9EmbSysLib3Dev7Digital3setEb>
	Motor_Band.set(0);
 8004f72:	2100      	movs	r1, #0
 8004f74:	4809      	ldr	r0, [pc, #36]	@ (8004f9c <_ZN6Manual10transitionEi+0x4c>)
 8004f76:	f7fe faf4 	bl	8003562 <_ZN9EmbSysLib3Dev7Digital3setEb>
	led0.toggle();
 8004f7a:	4809      	ldr	r0, [pc, #36]	@ (8004fa0 <_ZN6Manual10transitionEi+0x50>)
 8004f7c:	f7fc f86a 	bl	8001054 <_ZN9EmbSysLib3Dev7Digital6toggleEv>
	bandCounter.setCounter(); //Reset
 8004f80:	2100      	movs	r1, #0
 8004f82:	4808      	ldr	r0, [pc, #32]	@ (8004fa4 <_ZN6Manual10transitionEi+0x54>)
 8004f84:	f7ff fe86 	bl	8004c94 <_ZN13myBandCounter10setCounterEi>
}
 8004f88:	bf00      	nop
 8004f8a:	3708      	adds	r7, #8
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	20000288 	.word	0x20000288
 8004f94:	20000270 	.word	0x20000270
 8004f98:	20000258 	.word	0x20000258
 8004f9c:	20000240 	.word	0x20000240
 8004fa0:	20000168 	.word	0x20000168
 8004fa4:	2000047c 	.word	0x2000047c

08004fa8 <_ZN6Manual7displayEv>:

void Manual::display() {
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af02      	add	r7, sp, #8
 8004fae:	6078      	str	r0, [r7, #4]
	disp.printf(0, 0, "MODE:Manual         ");
 8004fb0:	4b35      	ldr	r3, [pc, #212]	@ (8005088 <_ZN6Manual7displayEv+0xe0>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	4835      	ldr	r0, [pc, #212]	@ (800508c <_ZN6Manual7displayEv+0xe4>)
 8004fb8:	f7fe fb51 	bl	800365e <_ZN9EmbSysLib3Dev10ScreenChar6printfEhhPKcz>
	int clr = Signal_Farbe.getRaw();
 8004fbc:	4834      	ldr	r0, [pc, #208]	@ (8005090 <_ZN6Manual7displayEv+0xe8>)
 8004fbe:	f7fe fa63 	bl	8003488 <_ZN9EmbSysLib3Dev11AnalogInAdc6getRawEv>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	60fb      	str	r3, [r7, #12]
	if (clr >= 10000 and clr <= 15000) { //RED
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	dd0b      	ble.n	8004fe8 <_ZN6Manual7displayEv+0x40>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	dc06      	bgt.n	8004fe8 <_ZN6Manual7displayEv+0x40>
		disp.printf(1, 0, "RED                    ");
 8004fda:	4b2e      	ldr	r3, [pc, #184]	@ (8005094 <_ZN6Manual7displayEv+0xec>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	2101      	movs	r1, #1
 8004fe0:	482a      	ldr	r0, [pc, #168]	@ (800508c <_ZN6Manual7displayEv+0xe4>)
 8004fe2:	f7fe fb3c 	bl	800365e <_ZN9EmbSysLib3Dev10ScreenChar6printfEhhPKcz>
 8004fe6:	e027      	b.n	8005038 <_ZN6Manual7displayEv+0x90>
	} else if (clr >= 35000 and clr <= 40000) { //WHITE/BROWN
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f648 02b7 	movw	r2, #34999	@ 0x88b7
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	dd0b      	ble.n	800500a <_ZN6Manual7displayEv+0x62>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	dc06      	bgt.n	800500a <_ZN6Manual7displayEv+0x62>
		disp.printf(1, 0, "WHITE/BROWN            ");
 8004ffc:	4b26      	ldr	r3, [pc, #152]	@ (8005098 <_ZN6Manual7displayEv+0xf0>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	2101      	movs	r1, #1
 8005002:	4822      	ldr	r0, [pc, #136]	@ (800508c <_ZN6Manual7displayEv+0xe4>)
 8005004:	f7fe fb2b 	bl	800365e <_ZN9EmbSysLib3Dev10ScreenChar6printfEhhPKcz>
 8005008:	e016      	b.n	8005038 <_ZN6Manual7displayEv+0x90>
	} else if (clr >= 58000 and clr <= 61500) { //BLUE
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f24e 228f 	movw	r2, #57999	@ 0xe28f
 8005010:	4293      	cmp	r3, r2
 8005012:	dd0b      	ble.n	800502c <_ZN6Manual7displayEv+0x84>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f24f 023c 	movw	r2, #61500	@ 0xf03c
 800501a:	4293      	cmp	r3, r2
 800501c:	dc06      	bgt.n	800502c <_ZN6Manual7displayEv+0x84>
		disp.printf(1, 0, "BLUE                   ");
 800501e:	4b1f      	ldr	r3, [pc, #124]	@ (800509c <_ZN6Manual7displayEv+0xf4>)
 8005020:	2200      	movs	r2, #0
 8005022:	2101      	movs	r1, #1
 8005024:	4819      	ldr	r0, [pc, #100]	@ (800508c <_ZN6Manual7displayEv+0xe4>)
 8005026:	f7fe fb1a 	bl	800365e <_ZN9EmbSysLib3Dev10ScreenChar6printfEhhPKcz>
 800502a:	e005      	b.n	8005038 <_ZN6Manual7displayEv+0x90>
	} else {
		disp.printf(1, 0, "                       ");
 800502c:	4b1c      	ldr	r3, [pc, #112]	@ (80050a0 <_ZN6Manual7displayEv+0xf8>)
 800502e:	2200      	movs	r2, #0
 8005030:	2101      	movs	r1, #1
 8005032:	4816      	ldr	r0, [pc, #88]	@ (800508c <_ZN6Manual7displayEv+0xe4>)
 8005034:	f7fe fb13 	bl	800365e <_ZN9EmbSysLib3Dev10ScreenChar6printfEhhPKcz>
	}
	disp.printf(2, 0, "clr:%-5d", Signal_Farbe.getRaw());
 8005038:	4815      	ldr	r0, [pc, #84]	@ (8005090 <_ZN6Manual7displayEv+0xe8>)
 800503a:	f7fe fa25 	bl	8003488 <_ZN9EmbSysLib3Dev11AnalogInAdc6getRawEv>
 800503e:	4603      	mov	r3, r0
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	4b18      	ldr	r3, [pc, #96]	@ (80050a4 <_ZN6Manual7displayEv+0xfc>)
 8005044:	2200      	movs	r2, #0
 8005046:	2102      	movs	r1, #2
 8005048:	4810      	ldr	r0, [pc, #64]	@ (800508c <_ZN6Manual7displayEv+0xe4>)
 800504a:	f7fe fb08 	bl	800365e <_ZN9EmbSysLib3Dev10ScreenChar6printfEhhPKcz>
	disp.printf(2, 10, "drk:%-5d", pressureControl.getPressure());
 800504e:	4816      	ldr	r0, [pc, #88]	@ (80050a8 <_ZN6Manual7displayEv+0x100>)
 8005050:	f7ff fe15 	bl	8004c7e <_ZN17myPressureControl11getPressureEv>
 8005054:	4603      	mov	r3, r0
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	4b14      	ldr	r3, [pc, #80]	@ (80050ac <_ZN6Manual7displayEv+0x104>)
 800505a:	220a      	movs	r2, #10
 800505c:	2102      	movs	r1, #2
 800505e:	480b      	ldr	r0, [pc, #44]	@ (800508c <_ZN6Manual7displayEv+0xe4>)
 8005060:	f7fe fafd 	bl	800365e <_ZN9EmbSysLib3Dev10ScreenChar6printfEhhPKcz>
	disp.printf(3, 0, "bndcnt:%-13d ", bandCounter.getCounter());
 8005064:	4812      	ldr	r0, [pc, #72]	@ (80050b0 <_ZN6Manual7displayEv+0x108>)
 8005066:	f7ff fe22 	bl	8004cae <_ZN13myBandCounter10getCounterEv>
 800506a:	4603      	mov	r3, r0
 800506c:	9300      	str	r3, [sp, #0]
 800506e:	4b11      	ldr	r3, [pc, #68]	@ (80050b4 <_ZN6Manual7displayEv+0x10c>)
 8005070:	2200      	movs	r2, #0
 8005072:	2103      	movs	r1, #3
 8005074:	4805      	ldr	r0, [pc, #20]	@ (800508c <_ZN6Manual7displayEv+0xe4>)
 8005076:	f7fe faf2 	bl	800365e <_ZN9EmbSysLib3Dev10ScreenChar6printfEhhPKcz>
	disp.refresh();
 800507a:	4804      	ldr	r0, [pc, #16]	@ (800508c <_ZN6Manual7displayEv+0xe4>)
 800507c:	f7fe fade 	bl	800363c <_ZN9EmbSysLib3Dev10ScreenChar7refreshEv>
}
 8005080:	bf00      	nop
 8005082:	3710      	adds	r7, #16
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	08006478 	.word	0x08006478
 800508c:	200003ec 	.word	0x200003ec
 8005090:	2000031c 	.word	0x2000031c
 8005094:	08006490 	.word	0x08006490
 8005098:	080064a8 	.word	0x080064a8
 800509c:	080064c0 	.word	0x080064c0
 80050a0:	080064d8 	.word	0x080064d8
 80050a4:	08006440 	.word	0x08006440
 80050a8:	2000048c 	.word	0x2000048c
 80050ac:	0800644c 	.word	0x0800644c
 80050b0:	2000047c 	.word	0x2000047c
 80050b4:	080064f0 	.word	0x080064f0

080050b8 <_ZN12StapelDetect9satisfiedEv>:

//*******************************************************************

int StapelDetect::satisfied() {
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
	if (Light_Stapel.get() == 1) {
 80050c0:	480f      	ldr	r0, [pc, #60]	@ (8005100 <_ZN12StapelDetect9satisfiedEv+0x48>)
 80050c2:	f7fe fa69 	bl	8003598 <_ZN9EmbSysLib3Dev7Digital3getEv>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	bf0c      	ite	eq
 80050cc:	2301      	moveq	r3, #1
 80050ce:	2300      	movne	r3, #0
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <_ZN12StapelDetect9satisfiedEv+0x22>
		return 10;
 80050d6:	230a      	movs	r3, #10
 80050d8:	e00d      	b.n	80050f6 <_ZN12StapelDetect9satisfiedEv+0x3e>
	} else if (btnA.getEvent() == Digital::ACTIVATED) {
 80050da:	480a      	ldr	r0, [pc, #40]	@ (8005104 <_ZN12StapelDetect9satisfiedEv+0x4c>)
 80050dc:	f7fb ffce 	bl	800107c <_ZN9EmbSysLib3Dev7Digital8getEventEv>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	bf0c      	ite	eq
 80050e6:	2301      	moveq	r3, #1
 80050e8:	2300      	movne	r3, #0
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d001      	beq.n	80050f4 <_ZN12StapelDetect9satisfiedEv+0x3c>
		return 0;
 80050f0:	2300      	movs	r3, #0
 80050f2:	e000      	b.n	80050f6 <_ZN12StapelDetect9satisfiedEv+0x3e>
	} else {
		return 1;
 80050f4:	2301      	movs	r3, #1
	}
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3708      	adds	r7, #8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	200002b8 	.word	0x200002b8
 8005104:	20000180 	.word	0x20000180

08005108 <_ZN12StapelDetect10transitionEi>:

void StapelDetect::transition(int destination) {
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
	//Uebergang zu CLRDetect
	if (destination == 10) {
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	2b0a      	cmp	r3, #10
 8005116:	d112      	bne.n	800513e <_ZN12StapelDetect10transitionEi+0x36>
		Ventil_Stapel.set(1);
 8005118:	2101      	movs	r1, #1
 800511a:	4818      	ldr	r0, [pc, #96]	@ (800517c <_ZN12StapelDetect10transitionEi+0x74>)
 800511c:	f7fe fa21 	bl	8003562 <_ZN9EmbSysLib3Dev7Digital3setEb>
		timerTask.delay(350);
 8005120:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8005124:	4816      	ldr	r0, [pc, #88]	@ (8005180 <_ZN12StapelDetect10transitionEi+0x78>)
 8005126:	f7ff fe31 	bl	8004d8c <_ZN11myTimerTask5delayEm>
		Ventil_Stapel.set(0);
 800512a:	2100      	movs	r1, #0
 800512c:	4813      	ldr	r0, [pc, #76]	@ (800517c <_ZN12StapelDetect10transitionEi+0x74>)
 800512e:	f7fe fa18 	bl	8003562 <_ZN9EmbSysLib3Dev7Digital3setEb>
		timerTask.delay(300);
 8005132:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8005136:	4812      	ldr	r0, [pc, #72]	@ (8005180 <_ZN12StapelDetect10transitionEi+0x78>)
 8005138:	f7ff fe28 	bl	8004d8c <_ZN11myTimerTask5delayEm>
		Ventil_Stapel.set(0);
		Motor_Band.set(0);
		led0.toggle();
		bandCounter.setCounter();
	}
}
 800513c:	e019      	b.n	8005172 <_ZN12StapelDetect10transitionEi+0x6a>
	else if (destination == 0) {
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d116      	bne.n	8005172 <_ZN12StapelDetect10transitionEi+0x6a>
		Ventil_Verarb.set(0);
 8005144:	2100      	movs	r1, #0
 8005146:	480f      	ldr	r0, [pc, #60]	@ (8005184 <_ZN12StapelDetect10transitionEi+0x7c>)
 8005148:	f7fe fa0b 	bl	8003562 <_ZN9EmbSysLib3Dev7Digital3setEb>
		Ventil_Ausw.set(0);
 800514c:	2100      	movs	r1, #0
 800514e:	480e      	ldr	r0, [pc, #56]	@ (8005188 <_ZN12StapelDetect10transitionEi+0x80>)
 8005150:	f7fe fa07 	bl	8003562 <_ZN9EmbSysLib3Dev7Digital3setEb>
		Ventil_Stapel.set(0);
 8005154:	2100      	movs	r1, #0
 8005156:	4809      	ldr	r0, [pc, #36]	@ (800517c <_ZN12StapelDetect10transitionEi+0x74>)
 8005158:	f7fe fa03 	bl	8003562 <_ZN9EmbSysLib3Dev7Digital3setEb>
		Motor_Band.set(0);
 800515c:	2100      	movs	r1, #0
 800515e:	480b      	ldr	r0, [pc, #44]	@ (800518c <_ZN12StapelDetect10transitionEi+0x84>)
 8005160:	f7fe f9ff 	bl	8003562 <_ZN9EmbSysLib3Dev7Digital3setEb>
		led0.toggle();
 8005164:	480a      	ldr	r0, [pc, #40]	@ (8005190 <_ZN12StapelDetect10transitionEi+0x88>)
 8005166:	f7fb ff75 	bl	8001054 <_ZN9EmbSysLib3Dev7Digital6toggleEv>
		bandCounter.setCounter();
 800516a:	2100      	movs	r1, #0
 800516c:	4809      	ldr	r0, [pc, #36]	@ (8005194 <_ZN12StapelDetect10transitionEi+0x8c>)
 800516e:	f7ff fd91 	bl	8004c94 <_ZN13myBandCounter10setCounterEi>
}
 8005172:	bf00      	nop
 8005174:	3708      	adds	r7, #8
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	20000258 	.word	0x20000258
 8005180:	20000498 	.word	0x20000498
 8005184:	20000288 	.word	0x20000288
 8005188:	20000270 	.word	0x20000270
 800518c:	20000240 	.word	0x20000240
 8005190:	20000168 	.word	0x20000168
 8005194:	2000047c 	.word	0x2000047c

08005198 <_ZN12StapelDetect7displayEv>:

void StapelDetect::display() {
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
	disp.printf(1, 0, "                    ");
 80051a0:	4b08      	ldr	r3, [pc, #32]	@ (80051c4 <_ZN12StapelDetect7displayEv+0x2c>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	2101      	movs	r1, #1
 80051a6:	4808      	ldr	r0, [pc, #32]	@ (80051c8 <_ZN12StapelDetect7displayEv+0x30>)
 80051a8:	f7fe fa59 	bl	800365e <_ZN9EmbSysLib3Dev10ScreenChar6printfEhhPKcz>
	State::display();
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7ff fd88 	bl	8004cc4 <_ZN5State7displayEv>
	disp.refresh();
 80051b4:	4804      	ldr	r0, [pc, #16]	@ (80051c8 <_ZN12StapelDetect7displayEv+0x30>)
 80051b6:	f7fe fa41 	bl	800363c <_ZN9EmbSysLib3Dev10ScreenChar7refreshEv>
}
 80051ba:	bf00      	nop
 80051bc:	3708      	adds	r7, #8
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	08006500 	.word	0x08006500
 80051c8:	200003ec 	.word	0x200003ec

080051cc <_ZN9CLRDetect9satisfiedEv>:

//*******************************************************************

int CLRDetect::satisfied() {
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
	int current_clr = Signal_Farbe.getRaw();
 80051d4:	4817      	ldr	r0, [pc, #92]	@ (8005234 <_ZN9CLRDetect9satisfiedEv+0x68>)
 80051d6:	f7fe f957 	bl	8003488 <_ZN9EmbSysLib3Dev11AnalogInAdc6getRawEv>
 80051da:	4603      	mov	r3, r0
 80051dc:	60fb      	str	r3, [r7, #12]
	if (current_clr >= 10000 and current_clr <= 15000) {
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80051e4:	4293      	cmp	r3, r2
 80051e6:	dd06      	ble.n	80051f6 <_ZN9CLRDetect9satisfiedEv+0x2a>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80051ee:	4293      	cmp	r3, r2
 80051f0:	dc01      	bgt.n	80051f6 <_ZN9CLRDetect9satisfiedEv+0x2a>
		return 20; //Red
 80051f2:	2314      	movs	r3, #20
 80051f4:	e019      	b.n	800522a <_ZN9CLRDetect9satisfiedEv+0x5e>
	} else if (current_clr >= 58000 and current_clr <= 61500) {
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f24e 228f 	movw	r2, #57999	@ 0xe28f
 80051fc:	4293      	cmp	r3, r2
 80051fe:	dd06      	ble.n	800520e <_ZN9CLRDetect9satisfiedEv+0x42>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f24f 023c 	movw	r2, #61500	@ 0xf03c
 8005206:	4293      	cmp	r3, r2
 8005208:	dc01      	bgt.n	800520e <_ZN9CLRDetect9satisfiedEv+0x42>
		return 40; //Blue
 800520a:	2328      	movs	r3, #40	@ 0x28
 800520c:	e00d      	b.n	800522a <_ZN9CLRDetect9satisfiedEv+0x5e>
	} else if (current_clr >= 35000 and current_clr <= 40000) {
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f648 02b7 	movw	r2, #34999	@ 0x88b7
 8005214:	4293      	cmp	r3, r2
 8005216:	dd06      	ble.n	8005226 <_ZN9CLRDetect9satisfiedEv+0x5a>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f649 4240 	movw	r2, #40000	@ 0x9c40
 800521e:	4293      	cmp	r3, r2
 8005220:	dc01      	bgt.n	8005226 <_ZN9CLRDetect9satisfiedEv+0x5a>
		return 30; //White
 8005222:	231e      	movs	r3, #30
 8005224:	e001      	b.n	800522a <_ZN9CLRDetect9satisfiedEv+0x5e>
	} else {
		return -1; //Undefinierte Farbe
 8005226:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	2000031c 	.word	0x2000031c

08005238 <_ZN9CLRDetect10transitionEi>:

void CLRDetect::transition(int destination) {
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
	bandCounter.setCounter();
 8005242:	2100      	movs	r1, #0
 8005244:	4805      	ldr	r0, [pc, #20]	@ (800525c <_ZN9CLRDetect10transitionEi+0x24>)
 8005246:	f7ff fd25 	bl	8004c94 <_ZN13myBandCounter10setCounterEi>
	Motor_Band.set(1);
 800524a:	2101      	movs	r1, #1
 800524c:	4804      	ldr	r0, [pc, #16]	@ (8005260 <_ZN9CLRDetect10transitionEi+0x28>)
 800524e:	f7fe f988 	bl	8003562 <_ZN9EmbSysLib3Dev7Digital3setEb>
}
 8005252:	bf00      	nop
 8005254:	3708      	adds	r7, #8
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	2000047c 	.word	0x2000047c
 8005260:	20000240 	.word	0x20000240

08005264 <_ZN9CLRDetect7displayEv>:

void CLRDetect::display() {
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
	disp.printf(1, 0, "                    ");
 800526c:	4b08      	ldr	r3, [pc, #32]	@ (8005290 <_ZN9CLRDetect7displayEv+0x2c>)
 800526e:	2200      	movs	r2, #0
 8005270:	2101      	movs	r1, #1
 8005272:	4808      	ldr	r0, [pc, #32]	@ (8005294 <_ZN9CLRDetect7displayEv+0x30>)
 8005274:	f7fe f9f3 	bl	800365e <_ZN9EmbSysLib3Dev10ScreenChar6printfEhhPKcz>
	State::display();
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4618      	mov	r0, r3
 800527c:	f7ff fd22 	bl	8004cc4 <_ZN5State7displayEv>
	disp.refresh();
 8005280:	4804      	ldr	r0, [pc, #16]	@ (8005294 <_ZN9CLRDetect7displayEv+0x30>)
 8005282:	f7fe f9db 	bl	800363c <_ZN9EmbSysLib3Dev10ScreenChar7refreshEv>
}
 8005286:	bf00      	nop
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	08006500 	.word	0x08006500
 8005294:	200003ec 	.word	0x200003ec

08005298 <_ZN3Red9satisfiedEv>:

//*******************************************************************

int Red::satisfied() {
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
	if (bandCounter.getCounter() == 15) {
 80052a0:	4808      	ldr	r0, [pc, #32]	@ (80052c4 <_ZN3Red9satisfiedEv+0x2c>)
 80052a2:	f7ff fd04 	bl	8004cae <_ZN13myBandCounter10getCounterEv>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b0f      	cmp	r3, #15
 80052aa:	bf0c      	ite	eq
 80052ac:	2301      	moveq	r3, #1
 80052ae:	2300      	movne	r3, #0
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <_ZN3Red9satisfiedEv+0x22>
		return 2; //Finish
 80052b6:	2302      	movs	r3, #2
 80052b8:	e000      	b.n	80052bc <_ZN3Red9satisfiedEv+0x24>
	} else {
		return 20; //Bleibt in Red
 80052ba:	2314      	movs	r3, #20
	}
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3708      	adds	r7, #8
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	2000047c 	.word	0x2000047c

080052c8 <_ZN3Red10transitionEi>:

void Red::transition(int destination) {
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
	Motor_Band.set(0);
 80052d2:	2100      	movs	r1, #0
 80052d4:	480b      	ldr	r0, [pc, #44]	@ (8005304 <_ZN3Red10transitionEi+0x3c>)
 80052d6:	f7fe f944 	bl	8003562 <_ZN9EmbSysLib3Dev7Digital3setEb>
	Ventil_Ausw.set(1);
 80052da:	2101      	movs	r1, #1
 80052dc:	480a      	ldr	r0, [pc, #40]	@ (8005308 <_ZN3Red10transitionEi+0x40>)
 80052de:	f7fe f940 	bl	8003562 <_ZN9EmbSysLib3Dev7Digital3setEb>
	timerTask.delay(350);
 80052e2:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 80052e6:	4809      	ldr	r0, [pc, #36]	@ (800530c <_ZN3Red10transitionEi+0x44>)
 80052e8:	f7ff fd50 	bl	8004d8c <_ZN11myTimerTask5delayEm>
	Ventil_Ausw.set(0);
 80052ec:	2100      	movs	r1, #0
 80052ee:	4806      	ldr	r0, [pc, #24]	@ (8005308 <_ZN3Red10transitionEi+0x40>)
 80052f0:	f7fe f937 	bl	8003562 <_ZN9EmbSysLib3Dev7Digital3setEb>
	State::countRed();
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7ff fd66 	bl	8004dc8 <_ZN5State8countRedEv>
}
 80052fc:	bf00      	nop
 80052fe:	3708      	adds	r7, #8
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	20000240 	.word	0x20000240
 8005308:	20000270 	.word	0x20000270
 800530c:	20000498 	.word	0x20000498

08005310 <_ZN3Red7displayEv>:

void Red::display() {
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
	disp.printf(1, 0, "RED                 ");
 8005318:	4b08      	ldr	r3, [pc, #32]	@ (800533c <_ZN3Red7displayEv+0x2c>)
 800531a:	2200      	movs	r2, #0
 800531c:	2101      	movs	r1, #1
 800531e:	4808      	ldr	r0, [pc, #32]	@ (8005340 <_ZN3Red7displayEv+0x30>)
 8005320:	f7fe f99d 	bl	800365e <_ZN9EmbSysLib3Dev10ScreenChar6printfEhhPKcz>
	State::display();
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4618      	mov	r0, r3
 8005328:	f7ff fccc 	bl	8004cc4 <_ZN5State7displayEv>
	disp.refresh();
 800532c:	4804      	ldr	r0, [pc, #16]	@ (8005340 <_ZN3Red7displayEv+0x30>)
 800532e:	f7fe f985 	bl	800363c <_ZN9EmbSysLib3Dev10ScreenChar7refreshEv>
}
 8005332:	bf00      	nop
 8005334:	3708      	adds	r7, #8
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	08006518 	.word	0x08006518
 8005340:	200003ec 	.word	0x200003ec

08005344 <_ZN5White9satisfiedEv>:

//*******************************************************************

int White::satisfied() {
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
	if (bandCounter.getCounter() == 37) {
 800534c:	4808      	ldr	r0, [pc, #32]	@ (8005370 <_ZN5White9satisfiedEv+0x2c>)
 800534e:	f7ff fcae 	bl	8004cae <_ZN13myBandCounter10getCounterEv>
 8005352:	4603      	mov	r3, r0
 8005354:	2b25      	cmp	r3, #37	@ 0x25
 8005356:	bf0c      	ite	eq
 8005358:	2301      	moveq	r3, #1
 800535a:	2300      	movne	r3, #0
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <_ZN5White9satisfiedEv+0x22>
		return 2; //Finish
 8005362:	2302      	movs	r3, #2
 8005364:	e000      	b.n	8005368 <_ZN5White9satisfiedEv+0x24>
	} else {
		return 30; //Beibt in White
 8005366:	231e      	movs	r3, #30
	}
}
 8005368:	4618      	mov	r0, r3
 800536a:	3708      	adds	r7, #8
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	2000047c 	.word	0x2000047c

08005374 <_ZN5White10transitionEi>:

void White::transition(int destination) {
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
	State::countWhite();
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4618      	mov	r0, r3
 8005382:	f7ff fd31 	bl	8004de8 <_ZN5State10countWhiteEv>
}
 8005386:	bf00      	nop
 8005388:	3708      	adds	r7, #8
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
	...

08005390 <_ZN5White7displayEv>:

void White::display() {
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
	disp.printf(1, 0, "WHITE/BROWN         ");
 8005398:	4b08      	ldr	r3, [pc, #32]	@ (80053bc <_ZN5White7displayEv+0x2c>)
 800539a:	2200      	movs	r2, #0
 800539c:	2101      	movs	r1, #1
 800539e:	4808      	ldr	r0, [pc, #32]	@ (80053c0 <_ZN5White7displayEv+0x30>)
 80053a0:	f7fe f95d 	bl	800365e <_ZN9EmbSysLib3Dev10ScreenChar6printfEhhPKcz>
	State::display();
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7ff fc8c 	bl	8004cc4 <_ZN5State7displayEv>
	disp.refresh();
 80053ac:	4804      	ldr	r0, [pc, #16]	@ (80053c0 <_ZN5White7displayEv+0x30>)
 80053ae:	f7fe f945 	bl	800363c <_ZN9EmbSysLib3Dev10ScreenChar7refreshEv>
}
 80053b2:	bf00      	nop
 80053b4:	3708      	adds	r7, #8
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	08006530 	.word	0x08006530
 80053c0:	200003ec 	.word	0x200003ec

080053c4 <_ZN4Blue9satisfiedEv>:

//*******************************************************************

int Blue::satisfied() {
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
	if (bandCounter.getCounter() == 30) {
 80053cc:	4808      	ldr	r0, [pc, #32]	@ (80053f0 <_ZN4Blue9satisfiedEv+0x2c>)
 80053ce:	f7ff fc6e 	bl	8004cae <_ZN13myBandCounter10getCounterEv>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b1e      	cmp	r3, #30
 80053d6:	bf0c      	ite	eq
 80053d8:	2301      	moveq	r3, #1
 80053da:	2300      	movne	r3, #0
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <_ZN4Blue9satisfiedEv+0x22>
		return 41; //BluePass
 80053e2:	2329      	movs	r3, #41	@ 0x29
 80053e4:	e000      	b.n	80053e8 <_ZN4Blue9satisfiedEv+0x24>
	} else {
		return 40; //Bleibt in Blue
 80053e6:	2328      	movs	r3, #40	@ 0x28
	}
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	2000047c 	.word	0x2000047c

080053f4 <_ZN4Blue10transitionEi>:

void Blue::transition(int destination) {
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
	Motor_Band.set(0);
 80053fe:	2100      	movs	r1, #0
 8005400:	480e      	ldr	r0, [pc, #56]	@ (800543c <_ZN4Blue10transitionEi+0x48>)
 8005402:	f7fe f8ae 	bl	8003562 <_ZN9EmbSysLib3Dev7Digital3setEb>
	Ventil_Verarb.set(1);
 8005406:	2101      	movs	r1, #1
 8005408:	480d      	ldr	r0, [pc, #52]	@ (8005440 <_ZN4Blue10transitionEi+0x4c>)
 800540a:	f7fe f8aa 	bl	8003562 <_ZN9EmbSysLib3Dev7Digital3setEb>
	timerTask.delay(350);
 800540e:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8005412:	480c      	ldr	r0, [pc, #48]	@ (8005444 <_ZN4Blue10transitionEi+0x50>)
 8005414:	f7ff fcba 	bl	8004d8c <_ZN11myTimerTask5delayEm>
	Ventil_Verarb.set(0);
 8005418:	2100      	movs	r1, #0
 800541a:	4809      	ldr	r0, [pc, #36]	@ (8005440 <_ZN4Blue10transitionEi+0x4c>)
 800541c:	f7fe f8a1 	bl	8003562 <_ZN9EmbSysLib3Dev7Digital3setEb>
	timerTask.delay(400);
 8005420:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8005424:	4807      	ldr	r0, [pc, #28]	@ (8005444 <_ZN4Blue10transitionEi+0x50>)
 8005426:	f7ff fcb1 	bl	8004d8c <_ZN11myTimerTask5delayEm>
	Motor_Band.set(1);
 800542a:	2101      	movs	r1, #1
 800542c:	4803      	ldr	r0, [pc, #12]	@ (800543c <_ZN4Blue10transitionEi+0x48>)
 800542e:	f7fe f898 	bl	8003562 <_ZN9EmbSysLib3Dev7Digital3setEb>
}
 8005432:	bf00      	nop
 8005434:	3708      	adds	r7, #8
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	20000240 	.word	0x20000240
 8005440:	20000288 	.word	0x20000288
 8005444:	20000498 	.word	0x20000498

08005448 <_ZN4Blue7displayEv>:

void Blue::display() {
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
	disp.printf(1, 0, "BLUE                ");
 8005450:	4b08      	ldr	r3, [pc, #32]	@ (8005474 <_ZN4Blue7displayEv+0x2c>)
 8005452:	2200      	movs	r2, #0
 8005454:	2101      	movs	r1, #1
 8005456:	4808      	ldr	r0, [pc, #32]	@ (8005478 <_ZN4Blue7displayEv+0x30>)
 8005458:	f7fe f901 	bl	800365e <_ZN9EmbSysLib3Dev10ScreenChar6printfEhhPKcz>
	State::display();
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4618      	mov	r0, r3
 8005460:	f7ff fc30 	bl	8004cc4 <_ZN5State7displayEv>
	disp.refresh();
 8005464:	4804      	ldr	r0, [pc, #16]	@ (8005478 <_ZN4Blue7displayEv+0x30>)
 8005466:	f7fe f8e9 	bl	800363c <_ZN9EmbSysLib3Dev10ScreenChar7refreshEv>
}
 800546a:	bf00      	nop
 800546c:	3708      	adds	r7, #8
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	08006548 	.word	0x08006548
 8005478:	200003ec 	.word	0x200003ec

0800547c <_ZN8BluePass9satisfiedEv>:

//*******************************************************************

int BluePass::satisfied() {
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
	if (bandCounter.getCounter() == 37) {
 8005484:	4808      	ldr	r0, [pc, #32]	@ (80054a8 <_ZN8BluePass9satisfiedEv+0x2c>)
 8005486:	f7ff fc12 	bl	8004cae <_ZN13myBandCounter10getCounterEv>
 800548a:	4603      	mov	r3, r0
 800548c:	2b25      	cmp	r3, #37	@ 0x25
 800548e:	bf0c      	ite	eq
 8005490:	2301      	moveq	r3, #1
 8005492:	2300      	movne	r3, #0
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <_ZN8BluePass9satisfiedEv+0x22>
		return 2; //Finish
 800549a:	2302      	movs	r3, #2
 800549c:	e000      	b.n	80054a0 <_ZN8BluePass9satisfiedEv+0x24>
	} else {
		return 41; //Bleibt in BluePass
 800549e:	2329      	movs	r3, #41	@ 0x29
	}
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3708      	adds	r7, #8
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	2000047c 	.word	0x2000047c

080054ac <_ZN8BluePass10transitionEi>:

void BluePass::transition(int destination) {
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
	State::countBlue();
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7ff fca5 	bl	8004e08 <_ZN5State9countBlueEv>
}
 80054be:	bf00      	nop
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
	...

080054c8 <_ZN8BluePass7displayEv>:

void BluePass::display() {
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
	disp.printf(1, 0, "BLUE                ");
 80054d0:	4b08      	ldr	r3, [pc, #32]	@ (80054f4 <_ZN8BluePass7displayEv+0x2c>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	2101      	movs	r1, #1
 80054d6:	4808      	ldr	r0, [pc, #32]	@ (80054f8 <_ZN8BluePass7displayEv+0x30>)
 80054d8:	f7fe f8c1 	bl	800365e <_ZN9EmbSysLib3Dev10ScreenChar6printfEhhPKcz>
	State::display();
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4618      	mov	r0, r3
 80054e0:	f7ff fbf0 	bl	8004cc4 <_ZN5State7displayEv>
	disp.refresh();
 80054e4:	4804      	ldr	r0, [pc, #16]	@ (80054f8 <_ZN8BluePass7displayEv+0x30>)
 80054e6:	f7fe f8a9 	bl	800363c <_ZN9EmbSysLib3Dev10ScreenChar7refreshEv>
}
 80054ea:	bf00      	nop
 80054ec:	3708      	adds	r7, #8
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	08006548 	.word	0x08006548
 80054f8:	200003ec 	.word	0x200003ec

080054fc <_ZN5Error9satisfiedEv>:

//*******************************************************************

int Error::satisfied() {
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
	if (bandCounter.getCounter() == 45) {
 8005504:	4809      	ldr	r0, [pc, #36]	@ (800552c <_ZN5Error9satisfiedEv+0x30>)
 8005506:	f7ff fbd2 	bl	8004cae <_ZN13myBandCounter10getCounterEv>
 800550a:	4603      	mov	r3, r0
 800550c:	2b2d      	cmp	r3, #45	@ 0x2d
 800550e:	bf0c      	ite	eq
 8005510:	2301      	moveq	r3, #1
 8005512:	2300      	movne	r3, #0
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <_ZN5Error9satisfiedEv+0x22>
		return 2; //Finish
 800551a:	2302      	movs	r3, #2
 800551c:	e001      	b.n	8005522 <_ZN5Error9satisfiedEv+0x26>
	} else {
		return -1; //Bleibt in Error
 800551e:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8005522:	4618      	mov	r0, r3
 8005524:	3708      	adds	r7, #8
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	2000047c 	.word	0x2000047c

08005530 <_ZN5Error10transitionEi>:

void Error::transition(int destination) {
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
	State::countError();
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4618      	mov	r0, r3
 800553e:	f7ff fc73 	bl	8004e28 <_ZN5State10countErrorEv>
}
 8005542:	bf00      	nop
 8005544:	3708      	adds	r7, #8
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
	...

0800554c <_ZN5Error7displayEv>:

void Error::display() {
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
	disp.printf(1, 0, "ERROR               ");
 8005554:	4b08      	ldr	r3, [pc, #32]	@ (8005578 <_ZN5Error7displayEv+0x2c>)
 8005556:	2200      	movs	r2, #0
 8005558:	2101      	movs	r1, #1
 800555a:	4808      	ldr	r0, [pc, #32]	@ (800557c <_ZN5Error7displayEv+0x30>)
 800555c:	f7fe f87f 	bl	800365e <_ZN9EmbSysLib3Dev10ScreenChar6printfEhhPKcz>
	State::display();
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4618      	mov	r0, r3
 8005564:	f7ff fbae 	bl	8004cc4 <_ZN5State7displayEv>
	disp.refresh();
 8005568:	4804      	ldr	r0, [pc, #16]	@ (800557c <_ZN5Error7displayEv+0x30>)
 800556a:	f7fe f867 	bl	800363c <_ZN9EmbSysLib3Dev10ScreenChar7refreshEv>
}
 800556e:	bf00      	nop
 8005570:	3708      	adds	r7, #8
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	08006560 	.word	0x08006560
 800557c:	200003ec 	.word	0x200003ec

08005580 <_ZN6Finish9satisfiedEv>:

//*******************************************************************

int Finish::satisfied() {
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
	return 1; //StapelDetect
 8005588:	2301      	movs	r3, #1
}
 800558a:	4618      	mov	r0, r3
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	bc80      	pop	{r7}
 8005592:	4770      	bx	lr

08005594 <_ZN6Finish10transitionEi>:

void Finish::transition(int destination) {
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
	Ventil_Verarb.set(0);
 800559e:	2100      	movs	r1, #0
 80055a0:	4809      	ldr	r0, [pc, #36]	@ (80055c8 <_ZN6Finish10transitionEi+0x34>)
 80055a2:	f7fd ffde 	bl	8003562 <_ZN9EmbSysLib3Dev7Digital3setEb>
	Ventil_Ausw.set(0);
 80055a6:	2100      	movs	r1, #0
 80055a8:	4808      	ldr	r0, [pc, #32]	@ (80055cc <_ZN6Finish10transitionEi+0x38>)
 80055aa:	f7fd ffda 	bl	8003562 <_ZN9EmbSysLib3Dev7Digital3setEb>
	Ventil_Stapel.set(0);
 80055ae:	2100      	movs	r1, #0
 80055b0:	4807      	ldr	r0, [pc, #28]	@ (80055d0 <_ZN6Finish10transitionEi+0x3c>)
 80055b2:	f7fd ffd6 	bl	8003562 <_ZN9EmbSysLib3Dev7Digital3setEb>
	Motor_Band.set(0);
 80055b6:	2100      	movs	r1, #0
 80055b8:	4806      	ldr	r0, [pc, #24]	@ (80055d4 <_ZN6Finish10transitionEi+0x40>)
 80055ba:	f7fd ffd2 	bl	8003562 <_ZN9EmbSysLib3Dev7Digital3setEb>
}
 80055be:	bf00      	nop
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	20000288 	.word	0x20000288
 80055cc:	20000270 	.word	0x20000270
 80055d0:	20000258 	.word	0x20000258
 80055d4:	20000240 	.word	0x20000240

080055d8 <_ZN6Finish7displayEv>:

void Finish::display() {
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
	disp.printf(1, 0, "                    ");
 80055e0:	4b08      	ldr	r3, [pc, #32]	@ (8005604 <_ZN6Finish7displayEv+0x2c>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	2101      	movs	r1, #1
 80055e6:	4808      	ldr	r0, [pc, #32]	@ (8005608 <_ZN6Finish7displayEv+0x30>)
 80055e8:	f7fe f839 	bl	800365e <_ZN9EmbSysLib3Dev10ScreenChar6printfEhhPKcz>
	State::display();
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7ff fb68 	bl	8004cc4 <_ZN5State7displayEv>
	disp.refresh();
 80055f4:	4804      	ldr	r0, [pc, #16]	@ (8005608 <_ZN6Finish7displayEv+0x30>)
 80055f6:	f7fe f821 	bl	800363c <_ZN9EmbSysLib3Dev10ScreenChar7refreshEv>
}
 80055fa:	bf00      	nop
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	08006500 	.word	0x08006500
 8005608:	200003ec 	.word	0x200003ec

0800560c <_ZN5StateC1Ev>:
class State {
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	4a04      	ldr	r2, [pc, #16]	@ (8005628 <_ZN5StateC1Ev+0x1c>)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	601a      	str	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4618      	mov	r0, r3
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	bc80      	pop	{r7}
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	08006910 	.word	0x08006910

0800562c <_ZN6ManualC1Ev>:
};

//ID = 0
class Manual: public State {
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4618      	mov	r0, r3
 8005638:	f7ff ffe8 	bl	800560c <_ZN5StateC1Ev>
 800563c:	4a03      	ldr	r2, [pc, #12]	@ (800564c <_ZN6ManualC1Ev+0x20>)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4618      	mov	r0, r3
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	080068fc 	.word	0x080068fc

08005650 <_ZN12StateHandlerC1Ev>:
#include "state.h"
#include "statehandler.h"

//Anfangszustand = Manual
StateHandler::StateHandler() :
 8005650:	b590      	push	{r4, r7, lr}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
		zustand(new Manual()), zustandID(0) {
 8005658:	2004      	movs	r0, #4
 800565a:	f000 f968 	bl	800592e <_Znwj>
 800565e:	4603      	mov	r3, r0
 8005660:	461c      	mov	r4, r3
 8005662:	2300      	movs	r3, #0
 8005664:	6023      	str	r3, [r4, #0]
 8005666:	4620      	mov	r0, r4
 8005668:	f7ff ffe0 	bl	800562c <_ZN6ManualC1Ev>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	601c      	str	r4, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	605a      	str	r2, [r3, #4]
}
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4618      	mov	r0, r3
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	bd90      	pop	{r4, r7, pc}

08005680 <_ZN12StapelDetectC1Ev>:
	void transition(int destination = 0);
	void display();
};

//ID = 1
class StapelDetect: public State {
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4618      	mov	r0, r3
 800568c:	f7ff ffbe 	bl	800560c <_ZN5StateC1Ev>
 8005690:	4a03      	ldr	r2, [pc, #12]	@ (80056a0 <_ZN12StapelDetectC1Ev+0x20>)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	601a      	str	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4618      	mov	r0, r3
 800569a:	3708      	adds	r7, #8
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	080068e8 	.word	0x080068e8

080056a4 <_ZN6FinishC1Ev>:
	void transition(int destination = 0);
	void display();
};

//ID = 2
class Finish: public State {
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7ff ffac 	bl	800560c <_ZN5StateC1Ev>
 80056b4:	4a03      	ldr	r2, [pc, #12]	@ (80056c4 <_ZN6FinishC1Ev+0x20>)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	601a      	str	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4618      	mov	r0, r3
 80056be:	3708      	adds	r7, #8
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	0800685c 	.word	0x0800685c

080056c8 <_ZN5ErrorC1Ev>:
class Error: public State {
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7ff ff9a 	bl	800560c <_ZN5StateC1Ev>
 80056d8:	4a03      	ldr	r2, [pc, #12]	@ (80056e8 <_ZN5ErrorC1Ev+0x20>)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4618      	mov	r0, r3
 80056e2:	3708      	adds	r7, #8
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	08006870 	.word	0x08006870

080056ec <_ZN9CLRDetectC1Ev>:
class CLRDetect: public State {
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7ff ff88 	bl	800560c <_ZN5StateC1Ev>
 80056fc:	4a03      	ldr	r2, [pc, #12]	@ (800570c <_ZN9CLRDetectC1Ev+0x20>)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	601a      	str	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4618      	mov	r0, r3
 8005706:	3708      	adds	r7, #8
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	080068d4 	.word	0x080068d4

08005710 <_ZN3RedC1Ev>:
class Red: public State {
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4618      	mov	r0, r3
 800571c:	f7ff ff76 	bl	800560c <_ZN5StateC1Ev>
 8005720:	4a03      	ldr	r2, [pc, #12]	@ (8005730 <_ZN3RedC1Ev+0x20>)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	601a      	str	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4618      	mov	r0, r3
 800572a:	3708      	adds	r7, #8
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	080068c0 	.word	0x080068c0

08005734 <_ZN5WhiteC1Ev>:
class White: public State {
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4618      	mov	r0, r3
 8005740:	f7ff ff64 	bl	800560c <_ZN5StateC1Ev>
 8005744:	4a03      	ldr	r2, [pc, #12]	@ (8005754 <_ZN5WhiteC1Ev+0x20>)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	601a      	str	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4618      	mov	r0, r3
 800574e:	3708      	adds	r7, #8
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	080068ac 	.word	0x080068ac

08005758 <_ZN4BlueC1Ev>:
class Blue: public State {
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4618      	mov	r0, r3
 8005764:	f7ff ff52 	bl	800560c <_ZN5StateC1Ev>
 8005768:	4a03      	ldr	r2, [pc, #12]	@ (8005778 <_ZN4BlueC1Ev+0x20>)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	601a      	str	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4618      	mov	r0, r3
 8005772:	3708      	adds	r7, #8
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	08006898 	.word	0x08006898

0800577c <_ZN8BluePassC1Ev>:
class BluePass: public State {
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4618      	mov	r0, r3
 8005788:	f7ff ff40 	bl	800560c <_ZN5StateC1Ev>
 800578c:	4a03      	ldr	r2, [pc, #12]	@ (800579c <_ZN8BluePassC1Ev+0x20>)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4618      	mov	r0, r3
 8005796:	3708      	adds	r7, #8
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	08006884 	.word	0x08006884

080057a0 <_ZN12StateHandler7refreshEv>:

void StateHandler::refresh() {
 80057a0:	b590      	push	{r4, r7, lr}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
	//Erhalte die neue ZustandsID
	int next = zustand->satisfied();
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4610      	mov	r0, r2
 80057b6:	4798      	blx	r3
 80057b8:	60f8      	str	r0, [r7, #12]

	//Falls die ID sich geaendert hat,
	//erzeuge entsprechenden neuen zustand
	//und fuehre die Uebergangsaktion aus
	if (next != zustandID) {
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	f000 80a5 	beq.w	8005910 <_ZN12StateHandler7refreshEv+0x170>
		zustandID = next;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	605a      	str	r2, [r3, #4]
		zustand->transition(next);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3304      	adds	r3, #4
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68f9      	ldr	r1, [r7, #12]
 80057dc:	4610      	mov	r0, r2
 80057de:	4798      	blx	r3
		delete zustand;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d003      	beq.n	80057f0 <_ZN12StateHandler7refreshEv+0x50>
 80057e8:	2104      	movs	r1, #4
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 f89d 	bl	800592a <_ZdlPvj>
		if (next == 0) {
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10c      	bne.n	8005810 <_ZN12StateHandler7refreshEv+0x70>
			zustand = new Manual();
 80057f6:	2004      	movs	r0, #4
 80057f8:	f000 f899 	bl	800592e <_Znwj>
 80057fc:	4603      	mov	r3, r0
 80057fe:	461c      	mov	r4, r3
 8005800:	2300      	movs	r3, #0
 8005802:	6023      	str	r3, [r4, #0]
 8005804:	4620      	mov	r0, r4
 8005806:	f7ff ff11 	bl	800562c <_ZN6ManualC1Ev>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	601c      	str	r4, [r3, #0]
 800580e:	e07f      	b.n	8005910 <_ZN12StateHandler7refreshEv+0x170>
		} else if (next == 1) {
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2b01      	cmp	r3, #1
 8005814:	d10c      	bne.n	8005830 <_ZN12StateHandler7refreshEv+0x90>
			zustand = new StapelDetect();
 8005816:	2004      	movs	r0, #4
 8005818:	f000 f889 	bl	800592e <_Znwj>
 800581c:	4603      	mov	r3, r0
 800581e:	461c      	mov	r4, r3
 8005820:	2300      	movs	r3, #0
 8005822:	6023      	str	r3, [r4, #0]
 8005824:	4620      	mov	r0, r4
 8005826:	f7ff ff2b 	bl	8005680 <_ZN12StapelDetectC1Ev>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	601c      	str	r4, [r3, #0]
 800582e:	e06f      	b.n	8005910 <_ZN12StateHandler7refreshEv+0x170>
		} else if (next == 2) {
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2b02      	cmp	r3, #2
 8005834:	d10c      	bne.n	8005850 <_ZN12StateHandler7refreshEv+0xb0>
			zustand = new Finish();
 8005836:	2004      	movs	r0, #4
 8005838:	f000 f879 	bl	800592e <_Znwj>
 800583c:	4603      	mov	r3, r0
 800583e:	461c      	mov	r4, r3
 8005840:	2300      	movs	r3, #0
 8005842:	6023      	str	r3, [r4, #0]
 8005844:	4620      	mov	r0, r4
 8005846:	f7ff ff2d 	bl	80056a4 <_ZN6FinishC1Ev>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	601c      	str	r4, [r3, #0]
 800584e:	e05f      	b.n	8005910 <_ZN12StateHandler7refreshEv+0x170>
		} else if (next == -1) {
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005856:	d10c      	bne.n	8005872 <_ZN12StateHandler7refreshEv+0xd2>
			zustand = new Error();
 8005858:	2004      	movs	r0, #4
 800585a:	f000 f868 	bl	800592e <_Znwj>
 800585e:	4603      	mov	r3, r0
 8005860:	461c      	mov	r4, r3
 8005862:	2300      	movs	r3, #0
 8005864:	6023      	str	r3, [r4, #0]
 8005866:	4620      	mov	r0, r4
 8005868:	f7ff ff2e 	bl	80056c8 <_ZN5ErrorC1Ev>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	601c      	str	r4, [r3, #0]
 8005870:	e04e      	b.n	8005910 <_ZN12StateHandler7refreshEv+0x170>
		} else if (next == 10) {
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2b0a      	cmp	r3, #10
 8005876:	d10c      	bne.n	8005892 <_ZN12StateHandler7refreshEv+0xf2>
			zustand = new CLRDetect();
 8005878:	2004      	movs	r0, #4
 800587a:	f000 f858 	bl	800592e <_Znwj>
 800587e:	4603      	mov	r3, r0
 8005880:	461c      	mov	r4, r3
 8005882:	2300      	movs	r3, #0
 8005884:	6023      	str	r3, [r4, #0]
 8005886:	4620      	mov	r0, r4
 8005888:	f7ff ff30 	bl	80056ec <_ZN9CLRDetectC1Ev>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	601c      	str	r4, [r3, #0]
 8005890:	e03e      	b.n	8005910 <_ZN12StateHandler7refreshEv+0x170>
		} else if (next == 20) {
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2b14      	cmp	r3, #20
 8005896:	d10c      	bne.n	80058b2 <_ZN12StateHandler7refreshEv+0x112>
			zustand = new Red();
 8005898:	2004      	movs	r0, #4
 800589a:	f000 f848 	bl	800592e <_Znwj>
 800589e:	4603      	mov	r3, r0
 80058a0:	461c      	mov	r4, r3
 80058a2:	2300      	movs	r3, #0
 80058a4:	6023      	str	r3, [r4, #0]
 80058a6:	4620      	mov	r0, r4
 80058a8:	f7ff ff32 	bl	8005710 <_ZN3RedC1Ev>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	601c      	str	r4, [r3, #0]
 80058b0:	e02e      	b.n	8005910 <_ZN12StateHandler7refreshEv+0x170>
		} else if (next == 30) {
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2b1e      	cmp	r3, #30
 80058b6:	d10c      	bne.n	80058d2 <_ZN12StateHandler7refreshEv+0x132>
			zustand = new White();
 80058b8:	2004      	movs	r0, #4
 80058ba:	f000 f838 	bl	800592e <_Znwj>
 80058be:	4603      	mov	r3, r0
 80058c0:	461c      	mov	r4, r3
 80058c2:	2300      	movs	r3, #0
 80058c4:	6023      	str	r3, [r4, #0]
 80058c6:	4620      	mov	r0, r4
 80058c8:	f7ff ff34 	bl	8005734 <_ZN5WhiteC1Ev>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	601c      	str	r4, [r3, #0]
 80058d0:	e01e      	b.n	8005910 <_ZN12StateHandler7refreshEv+0x170>
		} else if (next == 40) {
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2b28      	cmp	r3, #40	@ 0x28
 80058d6:	d10c      	bne.n	80058f2 <_ZN12StateHandler7refreshEv+0x152>
			zustand = new Blue();
 80058d8:	2004      	movs	r0, #4
 80058da:	f000 f828 	bl	800592e <_Znwj>
 80058de:	4603      	mov	r3, r0
 80058e0:	461c      	mov	r4, r3
 80058e2:	2300      	movs	r3, #0
 80058e4:	6023      	str	r3, [r4, #0]
 80058e6:	4620      	mov	r0, r4
 80058e8:	f7ff ff36 	bl	8005758 <_ZN4BlueC1Ev>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	601c      	str	r4, [r3, #0]
 80058f0:	e00e      	b.n	8005910 <_ZN12StateHandler7refreshEv+0x170>
		} else if (next == 41) {
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2b29      	cmp	r3, #41	@ 0x29
 80058f6:	d10b      	bne.n	8005910 <_ZN12StateHandler7refreshEv+0x170>
			zustand = new BluePass();
 80058f8:	2004      	movs	r0, #4
 80058fa:	f000 f818 	bl	800592e <_Znwj>
 80058fe:	4603      	mov	r3, r0
 8005900:	461c      	mov	r4, r3
 8005902:	2300      	movs	r3, #0
 8005904:	6023      	str	r3, [r4, #0]
 8005906:	4620      	mov	r0, r4
 8005908:	f7ff ff38 	bl	800577c <_ZN8BluePassC1Ev>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	601c      	str	r4, [r3, #0]
		}
	}

	//Zustandsspezifische Displayausgabe
	zustand->display();
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	3308      	adds	r3, #8
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4610      	mov	r0, r2
 8005920:	4798      	blx	r3
}
 8005922:	bf00      	nop
 8005924:	3714      	adds	r7, #20
 8005926:	46bd      	mov	sp, r7
 8005928:	bd90      	pop	{r4, r7, pc}

0800592a <_ZdlPvj>:
 800592a:	f000 b813 	b.w	8005954 <_ZdlPv>

0800592e <_Znwj>:
 800592e:	2801      	cmp	r0, #1
 8005930:	bf38      	it	cc
 8005932:	2001      	movcc	r0, #1
 8005934:	b510      	push	{r4, lr}
 8005936:	4604      	mov	r4, r0
 8005938:	4620      	mov	r0, r4
 800593a:	f000 f81d 	bl	8005978 <malloc>
 800593e:	b100      	cbz	r0, 8005942 <_Znwj+0x14>
 8005940:	bd10      	pop	{r4, pc}
 8005942:	f000 f809 	bl	8005958 <_ZSt15get_new_handlerv>
 8005946:	b908      	cbnz	r0, 800594c <_Znwj+0x1e>
 8005948:	f000 f80e 	bl	8005968 <abort>
 800594c:	4780      	blx	r0
 800594e:	e7f3      	b.n	8005938 <_Znwj+0xa>

08005950 <_Znaj>:
 8005950:	f7ff bfed 	b.w	800592e <_Znwj>

08005954 <_ZdlPv>:
 8005954:	f000 b818 	b.w	8005988 <free>

08005958 <_ZSt15get_new_handlerv>:
 8005958:	4b02      	ldr	r3, [pc, #8]	@ (8005964 <_ZSt15get_new_handlerv+0xc>)
 800595a:	6818      	ldr	r0, [r3, #0]
 800595c:	f3bf 8f5b 	dmb	ish
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	200004b4 	.word	0x200004b4

08005968 <abort>:
 8005968:	2006      	movs	r0, #6
 800596a:	b508      	push	{r3, lr}
 800596c:	f000 f924 	bl	8005bb8 <raise>
 8005970:	2001      	movs	r0, #1
 8005972:	f000 fd2f 	bl	80063d4 <_exit>
	...

08005978 <malloc>:
 8005978:	4b02      	ldr	r3, [pc, #8]	@ (8005984 <malloc+0xc>)
 800597a:	4601      	mov	r1, r0
 800597c:	6818      	ldr	r0, [r3, #0]
 800597e:	f000 b82d 	b.w	80059dc <_malloc_r>
 8005982:	bf00      	nop
 8005984:	20000024 	.word	0x20000024

08005988 <free>:
 8005988:	4b02      	ldr	r3, [pc, #8]	@ (8005994 <free+0xc>)
 800598a:	4601      	mov	r1, r0
 800598c:	6818      	ldr	r0, [r3, #0]
 800598e:	f000 b973 	b.w	8005c78 <_free_r>
 8005992:	bf00      	nop
 8005994:	20000024 	.word	0x20000024

08005998 <sbrk_aligned>:
 8005998:	b570      	push	{r4, r5, r6, lr}
 800599a:	4e0f      	ldr	r6, [pc, #60]	@ (80059d8 <sbrk_aligned+0x40>)
 800599c:	460c      	mov	r4, r1
 800599e:	6831      	ldr	r1, [r6, #0]
 80059a0:	4605      	mov	r5, r0
 80059a2:	b911      	cbnz	r1, 80059aa <sbrk_aligned+0x12>
 80059a4:	f000 f924 	bl	8005bf0 <_sbrk_r>
 80059a8:	6030      	str	r0, [r6, #0]
 80059aa:	4621      	mov	r1, r4
 80059ac:	4628      	mov	r0, r5
 80059ae:	f000 f91f 	bl	8005bf0 <_sbrk_r>
 80059b2:	1c43      	adds	r3, r0, #1
 80059b4:	d103      	bne.n	80059be <sbrk_aligned+0x26>
 80059b6:	f04f 34ff 	mov.w	r4, #4294967295
 80059ba:	4620      	mov	r0, r4
 80059bc:	bd70      	pop	{r4, r5, r6, pc}
 80059be:	1cc4      	adds	r4, r0, #3
 80059c0:	f024 0403 	bic.w	r4, r4, #3
 80059c4:	42a0      	cmp	r0, r4
 80059c6:	d0f8      	beq.n	80059ba <sbrk_aligned+0x22>
 80059c8:	1a21      	subs	r1, r4, r0
 80059ca:	4628      	mov	r0, r5
 80059cc:	f000 f910 	bl	8005bf0 <_sbrk_r>
 80059d0:	3001      	adds	r0, #1
 80059d2:	d1f2      	bne.n	80059ba <sbrk_aligned+0x22>
 80059d4:	e7ef      	b.n	80059b6 <sbrk_aligned+0x1e>
 80059d6:	bf00      	nop
 80059d8:	200004b8 	.word	0x200004b8

080059dc <_malloc_r>:
 80059dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059e0:	1ccd      	adds	r5, r1, #3
 80059e2:	f025 0503 	bic.w	r5, r5, #3
 80059e6:	3508      	adds	r5, #8
 80059e8:	2d0c      	cmp	r5, #12
 80059ea:	bf38      	it	cc
 80059ec:	250c      	movcc	r5, #12
 80059ee:	2d00      	cmp	r5, #0
 80059f0:	4606      	mov	r6, r0
 80059f2:	db01      	blt.n	80059f8 <_malloc_r+0x1c>
 80059f4:	42a9      	cmp	r1, r5
 80059f6:	d904      	bls.n	8005a02 <_malloc_r+0x26>
 80059f8:	230c      	movs	r3, #12
 80059fa:	6033      	str	r3, [r6, #0]
 80059fc:	2000      	movs	r0, #0
 80059fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005ad8 <_malloc_r+0xfc>
 8005a06:	f000 f869 	bl	8005adc <__malloc_lock>
 8005a0a:	f8d8 3000 	ldr.w	r3, [r8]
 8005a0e:	461c      	mov	r4, r3
 8005a10:	bb44      	cbnz	r4, 8005a64 <_malloc_r+0x88>
 8005a12:	4629      	mov	r1, r5
 8005a14:	4630      	mov	r0, r6
 8005a16:	f7ff ffbf 	bl	8005998 <sbrk_aligned>
 8005a1a:	1c43      	adds	r3, r0, #1
 8005a1c:	4604      	mov	r4, r0
 8005a1e:	d158      	bne.n	8005ad2 <_malloc_r+0xf6>
 8005a20:	f8d8 4000 	ldr.w	r4, [r8]
 8005a24:	4627      	mov	r7, r4
 8005a26:	2f00      	cmp	r7, #0
 8005a28:	d143      	bne.n	8005ab2 <_malloc_r+0xd6>
 8005a2a:	2c00      	cmp	r4, #0
 8005a2c:	d04b      	beq.n	8005ac6 <_malloc_r+0xea>
 8005a2e:	6823      	ldr	r3, [r4, #0]
 8005a30:	4639      	mov	r1, r7
 8005a32:	4630      	mov	r0, r6
 8005a34:	eb04 0903 	add.w	r9, r4, r3
 8005a38:	f000 f8da 	bl	8005bf0 <_sbrk_r>
 8005a3c:	4581      	cmp	r9, r0
 8005a3e:	d142      	bne.n	8005ac6 <_malloc_r+0xea>
 8005a40:	6821      	ldr	r1, [r4, #0]
 8005a42:	4630      	mov	r0, r6
 8005a44:	1a6d      	subs	r5, r5, r1
 8005a46:	4629      	mov	r1, r5
 8005a48:	f7ff ffa6 	bl	8005998 <sbrk_aligned>
 8005a4c:	3001      	adds	r0, #1
 8005a4e:	d03a      	beq.n	8005ac6 <_malloc_r+0xea>
 8005a50:	6823      	ldr	r3, [r4, #0]
 8005a52:	442b      	add	r3, r5
 8005a54:	6023      	str	r3, [r4, #0]
 8005a56:	f8d8 3000 	ldr.w	r3, [r8]
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	bb62      	cbnz	r2, 8005ab8 <_malloc_r+0xdc>
 8005a5e:	f8c8 7000 	str.w	r7, [r8]
 8005a62:	e00f      	b.n	8005a84 <_malloc_r+0xa8>
 8005a64:	6822      	ldr	r2, [r4, #0]
 8005a66:	1b52      	subs	r2, r2, r5
 8005a68:	d420      	bmi.n	8005aac <_malloc_r+0xd0>
 8005a6a:	2a0b      	cmp	r2, #11
 8005a6c:	d917      	bls.n	8005a9e <_malloc_r+0xc2>
 8005a6e:	1961      	adds	r1, r4, r5
 8005a70:	42a3      	cmp	r3, r4
 8005a72:	6025      	str	r5, [r4, #0]
 8005a74:	bf18      	it	ne
 8005a76:	6059      	strne	r1, [r3, #4]
 8005a78:	6863      	ldr	r3, [r4, #4]
 8005a7a:	bf08      	it	eq
 8005a7c:	f8c8 1000 	streq.w	r1, [r8]
 8005a80:	5162      	str	r2, [r4, r5]
 8005a82:	604b      	str	r3, [r1, #4]
 8005a84:	4630      	mov	r0, r6
 8005a86:	f000 f82f 	bl	8005ae8 <__malloc_unlock>
 8005a8a:	f104 000b 	add.w	r0, r4, #11
 8005a8e:	1d23      	adds	r3, r4, #4
 8005a90:	f020 0007 	bic.w	r0, r0, #7
 8005a94:	1ac2      	subs	r2, r0, r3
 8005a96:	bf1c      	itt	ne
 8005a98:	1a1b      	subne	r3, r3, r0
 8005a9a:	50a3      	strne	r3, [r4, r2]
 8005a9c:	e7af      	b.n	80059fe <_malloc_r+0x22>
 8005a9e:	6862      	ldr	r2, [r4, #4]
 8005aa0:	42a3      	cmp	r3, r4
 8005aa2:	bf0c      	ite	eq
 8005aa4:	f8c8 2000 	streq.w	r2, [r8]
 8005aa8:	605a      	strne	r2, [r3, #4]
 8005aaa:	e7eb      	b.n	8005a84 <_malloc_r+0xa8>
 8005aac:	4623      	mov	r3, r4
 8005aae:	6864      	ldr	r4, [r4, #4]
 8005ab0:	e7ae      	b.n	8005a10 <_malloc_r+0x34>
 8005ab2:	463c      	mov	r4, r7
 8005ab4:	687f      	ldr	r7, [r7, #4]
 8005ab6:	e7b6      	b.n	8005a26 <_malloc_r+0x4a>
 8005ab8:	461a      	mov	r2, r3
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	42a3      	cmp	r3, r4
 8005abe:	d1fb      	bne.n	8005ab8 <_malloc_r+0xdc>
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	6053      	str	r3, [r2, #4]
 8005ac4:	e7de      	b.n	8005a84 <_malloc_r+0xa8>
 8005ac6:	230c      	movs	r3, #12
 8005ac8:	4630      	mov	r0, r6
 8005aca:	6033      	str	r3, [r6, #0]
 8005acc:	f000 f80c 	bl	8005ae8 <__malloc_unlock>
 8005ad0:	e794      	b.n	80059fc <_malloc_r+0x20>
 8005ad2:	6005      	str	r5, [r0, #0]
 8005ad4:	e7d6      	b.n	8005a84 <_malloc_r+0xa8>
 8005ad6:	bf00      	nop
 8005ad8:	200004bc 	.word	0x200004bc

08005adc <__malloc_lock>:
 8005adc:	4801      	ldr	r0, [pc, #4]	@ (8005ae4 <__malloc_lock+0x8>)
 8005ade:	f000 b8bb 	b.w	8005c58 <__retarget_lock_acquire_recursive>
 8005ae2:	bf00      	nop
 8005ae4:	200005fc 	.word	0x200005fc

08005ae8 <__malloc_unlock>:
 8005ae8:	4801      	ldr	r0, [pc, #4]	@ (8005af0 <__malloc_unlock+0x8>)
 8005aea:	f000 b8b6 	b.w	8005c5a <__retarget_lock_release_recursive>
 8005aee:	bf00      	nop
 8005af0:	200005fc 	.word	0x200005fc

08005af4 <_vsniprintf_r>:
 8005af4:	b530      	push	{r4, r5, lr}
 8005af6:	4614      	mov	r4, r2
 8005af8:	2c00      	cmp	r4, #0
 8005afa:	4605      	mov	r5, r0
 8005afc:	461a      	mov	r2, r3
 8005afe:	b09b      	sub	sp, #108	@ 0x6c
 8005b00:	da05      	bge.n	8005b0e <_vsniprintf_r+0x1a>
 8005b02:	238b      	movs	r3, #139	@ 0x8b
 8005b04:	6003      	str	r3, [r0, #0]
 8005b06:	f04f 30ff 	mov.w	r0, #4294967295
 8005b0a:	b01b      	add	sp, #108	@ 0x6c
 8005b0c:	bd30      	pop	{r4, r5, pc}
 8005b0e:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005b12:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005b16:	bf0c      	ite	eq
 8005b18:	4623      	moveq	r3, r4
 8005b1a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005b1e:	9302      	str	r3, [sp, #8]
 8005b20:	9305      	str	r3, [sp, #20]
 8005b22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005b26:	9100      	str	r1, [sp, #0]
 8005b28:	9104      	str	r1, [sp, #16]
 8005b2a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005b2e:	4669      	mov	r1, sp
 8005b30:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8005b32:	f000 f945 	bl	8005dc0 <_svfiprintf_r>
 8005b36:	1c43      	adds	r3, r0, #1
 8005b38:	bfbc      	itt	lt
 8005b3a:	238b      	movlt	r3, #139	@ 0x8b
 8005b3c:	602b      	strlt	r3, [r5, #0]
 8005b3e:	2c00      	cmp	r4, #0
 8005b40:	d0e3      	beq.n	8005b0a <_vsniprintf_r+0x16>
 8005b42:	2200      	movs	r2, #0
 8005b44:	9b00      	ldr	r3, [sp, #0]
 8005b46:	701a      	strb	r2, [r3, #0]
 8005b48:	e7df      	b.n	8005b0a <_vsniprintf_r+0x16>
	...

08005b4c <vsniprintf>:
 8005b4c:	b507      	push	{r0, r1, r2, lr}
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	4613      	mov	r3, r2
 8005b52:	460a      	mov	r2, r1
 8005b54:	4601      	mov	r1, r0
 8005b56:	4803      	ldr	r0, [pc, #12]	@ (8005b64 <vsniprintf+0x18>)
 8005b58:	6800      	ldr	r0, [r0, #0]
 8005b5a:	f7ff ffcb 	bl	8005af4 <_vsniprintf_r>
 8005b5e:	b003      	add	sp, #12
 8005b60:	f85d fb04 	ldr.w	pc, [sp], #4
 8005b64:	20000024 	.word	0x20000024

08005b68 <_raise_r>:
 8005b68:	291f      	cmp	r1, #31
 8005b6a:	b538      	push	{r3, r4, r5, lr}
 8005b6c:	4605      	mov	r5, r0
 8005b6e:	460c      	mov	r4, r1
 8005b70:	d904      	bls.n	8005b7c <_raise_r+0x14>
 8005b72:	2316      	movs	r3, #22
 8005b74:	6003      	str	r3, [r0, #0]
 8005b76:	f04f 30ff 	mov.w	r0, #4294967295
 8005b7a:	bd38      	pop	{r3, r4, r5, pc}
 8005b7c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005b7e:	b112      	cbz	r2, 8005b86 <_raise_r+0x1e>
 8005b80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005b84:	b94b      	cbnz	r3, 8005b9a <_raise_r+0x32>
 8005b86:	4628      	mov	r0, r5
 8005b88:	f000 f830 	bl	8005bec <_getpid_r>
 8005b8c:	4622      	mov	r2, r4
 8005b8e:	4601      	mov	r1, r0
 8005b90:	4628      	mov	r0, r5
 8005b92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b96:	f000 b817 	b.w	8005bc8 <_kill_r>
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d00a      	beq.n	8005bb4 <_raise_r+0x4c>
 8005b9e:	1c59      	adds	r1, r3, #1
 8005ba0:	d103      	bne.n	8005baa <_raise_r+0x42>
 8005ba2:	2316      	movs	r3, #22
 8005ba4:	6003      	str	r3, [r0, #0]
 8005ba6:	2001      	movs	r0, #1
 8005ba8:	e7e7      	b.n	8005b7a <_raise_r+0x12>
 8005baa:	2100      	movs	r1, #0
 8005bac:	4620      	mov	r0, r4
 8005bae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005bb2:	4798      	blx	r3
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	e7e0      	b.n	8005b7a <_raise_r+0x12>

08005bb8 <raise>:
 8005bb8:	4b02      	ldr	r3, [pc, #8]	@ (8005bc4 <raise+0xc>)
 8005bba:	4601      	mov	r1, r0
 8005bbc:	6818      	ldr	r0, [r3, #0]
 8005bbe:	f7ff bfd3 	b.w	8005b68 <_raise_r>
 8005bc2:	bf00      	nop
 8005bc4:	20000024 	.word	0x20000024

08005bc8 <_kill_r>:
 8005bc8:	b538      	push	{r3, r4, r5, lr}
 8005bca:	2300      	movs	r3, #0
 8005bcc:	4d06      	ldr	r5, [pc, #24]	@ (8005be8 <_kill_r+0x20>)
 8005bce:	4604      	mov	r4, r0
 8005bd0:	4608      	mov	r0, r1
 8005bd2:	4611      	mov	r1, r2
 8005bd4:	602b      	str	r3, [r5, #0]
 8005bd6:	f000 fbe7 	bl	80063a8 <_kill>
 8005bda:	1c43      	adds	r3, r0, #1
 8005bdc:	d102      	bne.n	8005be4 <_kill_r+0x1c>
 8005bde:	682b      	ldr	r3, [r5, #0]
 8005be0:	b103      	cbz	r3, 8005be4 <_kill_r+0x1c>
 8005be2:	6023      	str	r3, [r4, #0]
 8005be4:	bd38      	pop	{r3, r4, r5, pc}
 8005be6:	bf00      	nop
 8005be8:	200005f8 	.word	0x200005f8

08005bec <_getpid_r>:
 8005bec:	f000 bbd4 	b.w	8006398 <_getpid>

08005bf0 <_sbrk_r>:
 8005bf0:	b538      	push	{r3, r4, r5, lr}
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	4d05      	ldr	r5, [pc, #20]	@ (8005c0c <_sbrk_r+0x1c>)
 8005bf6:	4604      	mov	r4, r0
 8005bf8:	4608      	mov	r0, r1
 8005bfa:	602b      	str	r3, [r5, #0]
 8005bfc:	f000 fbdc 	bl	80063b8 <_sbrk>
 8005c00:	1c43      	adds	r3, r0, #1
 8005c02:	d102      	bne.n	8005c0a <_sbrk_r+0x1a>
 8005c04:	682b      	ldr	r3, [r5, #0]
 8005c06:	b103      	cbz	r3, 8005c0a <_sbrk_r+0x1a>
 8005c08:	6023      	str	r3, [r4, #0]
 8005c0a:	bd38      	pop	{r3, r4, r5, pc}
 8005c0c:	200005f8 	.word	0x200005f8

08005c10 <__libc_init_array>:
 8005c10:	b570      	push	{r4, r5, r6, lr}
 8005c12:	2600      	movs	r6, #0
 8005c14:	4d0c      	ldr	r5, [pc, #48]	@ (8005c48 <__libc_init_array+0x38>)
 8005c16:	4c0d      	ldr	r4, [pc, #52]	@ (8005c4c <__libc_init_array+0x3c>)
 8005c18:	1b64      	subs	r4, r4, r5
 8005c1a:	10a4      	asrs	r4, r4, #2
 8005c1c:	42a6      	cmp	r6, r4
 8005c1e:	d109      	bne.n	8005c34 <__libc_init_array+0x24>
 8005c20:	f000 fbda 	bl	80063d8 <_init>
 8005c24:	2600      	movs	r6, #0
 8005c26:	4d0a      	ldr	r5, [pc, #40]	@ (8005c50 <__libc_init_array+0x40>)
 8005c28:	4c0a      	ldr	r4, [pc, #40]	@ (8005c54 <__libc_init_array+0x44>)
 8005c2a:	1b64      	subs	r4, r4, r5
 8005c2c:	10a4      	asrs	r4, r4, #2
 8005c2e:	42a6      	cmp	r6, r4
 8005c30:	d105      	bne.n	8005c3e <__libc_init_array+0x2e>
 8005c32:	bd70      	pop	{r4, r5, r6, pc}
 8005c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c38:	4798      	blx	r3
 8005c3a:	3601      	adds	r6, #1
 8005c3c:	e7ee      	b.n	8005c1c <__libc_init_array+0xc>
 8005c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c42:	4798      	blx	r3
 8005c44:	3601      	adds	r6, #1
 8005c46:	e7f2      	b.n	8005c2e <__libc_init_array+0x1e>
 8005c48:	08006958 	.word	0x08006958
 8005c4c:	08006958 	.word	0x08006958
 8005c50:	08006958 	.word	0x08006958
 8005c54:	08006964 	.word	0x08006964

08005c58 <__retarget_lock_acquire_recursive>:
 8005c58:	4770      	bx	lr

08005c5a <__retarget_lock_release_recursive>:
 8005c5a:	4770      	bx	lr

08005c5c <memcpy>:
 8005c5c:	440a      	add	r2, r1
 8005c5e:	4291      	cmp	r1, r2
 8005c60:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c64:	d100      	bne.n	8005c68 <memcpy+0xc>
 8005c66:	4770      	bx	lr
 8005c68:	b510      	push	{r4, lr}
 8005c6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c6e:	4291      	cmp	r1, r2
 8005c70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c74:	d1f9      	bne.n	8005c6a <memcpy+0xe>
 8005c76:	bd10      	pop	{r4, pc}

08005c78 <_free_r>:
 8005c78:	b538      	push	{r3, r4, r5, lr}
 8005c7a:	4605      	mov	r5, r0
 8005c7c:	2900      	cmp	r1, #0
 8005c7e:	d040      	beq.n	8005d02 <_free_r+0x8a>
 8005c80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c84:	1f0c      	subs	r4, r1, #4
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	bfb8      	it	lt
 8005c8a:	18e4      	addlt	r4, r4, r3
 8005c8c:	f7ff ff26 	bl	8005adc <__malloc_lock>
 8005c90:	4a1c      	ldr	r2, [pc, #112]	@ (8005d04 <_free_r+0x8c>)
 8005c92:	6813      	ldr	r3, [r2, #0]
 8005c94:	b933      	cbnz	r3, 8005ca4 <_free_r+0x2c>
 8005c96:	6063      	str	r3, [r4, #4]
 8005c98:	6014      	str	r4, [r2, #0]
 8005c9a:	4628      	mov	r0, r5
 8005c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ca0:	f7ff bf22 	b.w	8005ae8 <__malloc_unlock>
 8005ca4:	42a3      	cmp	r3, r4
 8005ca6:	d908      	bls.n	8005cba <_free_r+0x42>
 8005ca8:	6820      	ldr	r0, [r4, #0]
 8005caa:	1821      	adds	r1, r4, r0
 8005cac:	428b      	cmp	r3, r1
 8005cae:	bf01      	itttt	eq
 8005cb0:	6819      	ldreq	r1, [r3, #0]
 8005cb2:	685b      	ldreq	r3, [r3, #4]
 8005cb4:	1809      	addeq	r1, r1, r0
 8005cb6:	6021      	streq	r1, [r4, #0]
 8005cb8:	e7ed      	b.n	8005c96 <_free_r+0x1e>
 8005cba:	461a      	mov	r2, r3
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	b10b      	cbz	r3, 8005cc4 <_free_r+0x4c>
 8005cc0:	42a3      	cmp	r3, r4
 8005cc2:	d9fa      	bls.n	8005cba <_free_r+0x42>
 8005cc4:	6811      	ldr	r1, [r2, #0]
 8005cc6:	1850      	adds	r0, r2, r1
 8005cc8:	42a0      	cmp	r0, r4
 8005cca:	d10b      	bne.n	8005ce4 <_free_r+0x6c>
 8005ccc:	6820      	ldr	r0, [r4, #0]
 8005cce:	4401      	add	r1, r0
 8005cd0:	1850      	adds	r0, r2, r1
 8005cd2:	4283      	cmp	r3, r0
 8005cd4:	6011      	str	r1, [r2, #0]
 8005cd6:	d1e0      	bne.n	8005c9a <_free_r+0x22>
 8005cd8:	6818      	ldr	r0, [r3, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	4408      	add	r0, r1
 8005cde:	6010      	str	r0, [r2, #0]
 8005ce0:	6053      	str	r3, [r2, #4]
 8005ce2:	e7da      	b.n	8005c9a <_free_r+0x22>
 8005ce4:	d902      	bls.n	8005cec <_free_r+0x74>
 8005ce6:	230c      	movs	r3, #12
 8005ce8:	602b      	str	r3, [r5, #0]
 8005cea:	e7d6      	b.n	8005c9a <_free_r+0x22>
 8005cec:	6820      	ldr	r0, [r4, #0]
 8005cee:	1821      	adds	r1, r4, r0
 8005cf0:	428b      	cmp	r3, r1
 8005cf2:	bf01      	itttt	eq
 8005cf4:	6819      	ldreq	r1, [r3, #0]
 8005cf6:	685b      	ldreq	r3, [r3, #4]
 8005cf8:	1809      	addeq	r1, r1, r0
 8005cfa:	6021      	streq	r1, [r4, #0]
 8005cfc:	6063      	str	r3, [r4, #4]
 8005cfe:	6054      	str	r4, [r2, #4]
 8005d00:	e7cb      	b.n	8005c9a <_free_r+0x22>
 8005d02:	bd38      	pop	{r3, r4, r5, pc}
 8005d04:	200004bc 	.word	0x200004bc

08005d08 <__ssputs_r>:
 8005d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d0c:	461f      	mov	r7, r3
 8005d0e:	688e      	ldr	r6, [r1, #8]
 8005d10:	4682      	mov	sl, r0
 8005d12:	42be      	cmp	r6, r7
 8005d14:	460c      	mov	r4, r1
 8005d16:	4690      	mov	r8, r2
 8005d18:	680b      	ldr	r3, [r1, #0]
 8005d1a:	d82d      	bhi.n	8005d78 <__ssputs_r+0x70>
 8005d1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d20:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005d24:	d026      	beq.n	8005d74 <__ssputs_r+0x6c>
 8005d26:	6965      	ldr	r5, [r4, #20]
 8005d28:	6909      	ldr	r1, [r1, #16]
 8005d2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d2e:	eba3 0901 	sub.w	r9, r3, r1
 8005d32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d36:	1c7b      	adds	r3, r7, #1
 8005d38:	444b      	add	r3, r9
 8005d3a:	106d      	asrs	r5, r5, #1
 8005d3c:	429d      	cmp	r5, r3
 8005d3e:	bf38      	it	cc
 8005d40:	461d      	movcc	r5, r3
 8005d42:	0553      	lsls	r3, r2, #21
 8005d44:	d527      	bpl.n	8005d96 <__ssputs_r+0x8e>
 8005d46:	4629      	mov	r1, r5
 8005d48:	f7ff fe48 	bl	80059dc <_malloc_r>
 8005d4c:	4606      	mov	r6, r0
 8005d4e:	b360      	cbz	r0, 8005daa <__ssputs_r+0xa2>
 8005d50:	464a      	mov	r2, r9
 8005d52:	6921      	ldr	r1, [r4, #16]
 8005d54:	f7ff ff82 	bl	8005c5c <memcpy>
 8005d58:	89a3      	ldrh	r3, [r4, #12]
 8005d5a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005d5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d62:	81a3      	strh	r3, [r4, #12]
 8005d64:	6126      	str	r6, [r4, #16]
 8005d66:	444e      	add	r6, r9
 8005d68:	6026      	str	r6, [r4, #0]
 8005d6a:	463e      	mov	r6, r7
 8005d6c:	6165      	str	r5, [r4, #20]
 8005d6e:	eba5 0509 	sub.w	r5, r5, r9
 8005d72:	60a5      	str	r5, [r4, #8]
 8005d74:	42be      	cmp	r6, r7
 8005d76:	d900      	bls.n	8005d7a <__ssputs_r+0x72>
 8005d78:	463e      	mov	r6, r7
 8005d7a:	4632      	mov	r2, r6
 8005d7c:	4641      	mov	r1, r8
 8005d7e:	6820      	ldr	r0, [r4, #0]
 8005d80:	f000 faac 	bl	80062dc <memmove>
 8005d84:	2000      	movs	r0, #0
 8005d86:	68a3      	ldr	r3, [r4, #8]
 8005d88:	1b9b      	subs	r3, r3, r6
 8005d8a:	60a3      	str	r3, [r4, #8]
 8005d8c:	6823      	ldr	r3, [r4, #0]
 8005d8e:	4433      	add	r3, r6
 8005d90:	6023      	str	r3, [r4, #0]
 8005d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d96:	462a      	mov	r2, r5
 8005d98:	f000 fac8 	bl	800632c <_realloc_r>
 8005d9c:	4606      	mov	r6, r0
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	d1e0      	bne.n	8005d64 <__ssputs_r+0x5c>
 8005da2:	4650      	mov	r0, sl
 8005da4:	6921      	ldr	r1, [r4, #16]
 8005da6:	f7ff ff67 	bl	8005c78 <_free_r>
 8005daa:	230c      	movs	r3, #12
 8005dac:	f8ca 3000 	str.w	r3, [sl]
 8005db0:	89a3      	ldrh	r3, [r4, #12]
 8005db2:	f04f 30ff 	mov.w	r0, #4294967295
 8005db6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005dba:	81a3      	strh	r3, [r4, #12]
 8005dbc:	e7e9      	b.n	8005d92 <__ssputs_r+0x8a>
	...

08005dc0 <_svfiprintf_r>:
 8005dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc4:	4698      	mov	r8, r3
 8005dc6:	898b      	ldrh	r3, [r1, #12]
 8005dc8:	4607      	mov	r7, r0
 8005dca:	061b      	lsls	r3, r3, #24
 8005dcc:	460d      	mov	r5, r1
 8005dce:	4614      	mov	r4, r2
 8005dd0:	b09d      	sub	sp, #116	@ 0x74
 8005dd2:	d510      	bpl.n	8005df6 <_svfiprintf_r+0x36>
 8005dd4:	690b      	ldr	r3, [r1, #16]
 8005dd6:	b973      	cbnz	r3, 8005df6 <_svfiprintf_r+0x36>
 8005dd8:	2140      	movs	r1, #64	@ 0x40
 8005dda:	f7ff fdff 	bl	80059dc <_malloc_r>
 8005dde:	6028      	str	r0, [r5, #0]
 8005de0:	6128      	str	r0, [r5, #16]
 8005de2:	b930      	cbnz	r0, 8005df2 <_svfiprintf_r+0x32>
 8005de4:	230c      	movs	r3, #12
 8005de6:	603b      	str	r3, [r7, #0]
 8005de8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dec:	b01d      	add	sp, #116	@ 0x74
 8005dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005df2:	2340      	movs	r3, #64	@ 0x40
 8005df4:	616b      	str	r3, [r5, #20]
 8005df6:	2300      	movs	r3, #0
 8005df8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dfa:	2320      	movs	r3, #32
 8005dfc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e00:	2330      	movs	r3, #48	@ 0x30
 8005e02:	f04f 0901 	mov.w	r9, #1
 8005e06:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e0a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005fa4 <_svfiprintf_r+0x1e4>
 8005e0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e12:	4623      	mov	r3, r4
 8005e14:	469a      	mov	sl, r3
 8005e16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e1a:	b10a      	cbz	r2, 8005e20 <_svfiprintf_r+0x60>
 8005e1c:	2a25      	cmp	r2, #37	@ 0x25
 8005e1e:	d1f9      	bne.n	8005e14 <_svfiprintf_r+0x54>
 8005e20:	ebba 0b04 	subs.w	fp, sl, r4
 8005e24:	d00b      	beq.n	8005e3e <_svfiprintf_r+0x7e>
 8005e26:	465b      	mov	r3, fp
 8005e28:	4622      	mov	r2, r4
 8005e2a:	4629      	mov	r1, r5
 8005e2c:	4638      	mov	r0, r7
 8005e2e:	f7ff ff6b 	bl	8005d08 <__ssputs_r>
 8005e32:	3001      	adds	r0, #1
 8005e34:	f000 80a7 	beq.w	8005f86 <_svfiprintf_r+0x1c6>
 8005e38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e3a:	445a      	add	r2, fp
 8005e3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e3e:	f89a 3000 	ldrb.w	r3, [sl]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f000 809f 	beq.w	8005f86 <_svfiprintf_r+0x1c6>
 8005e48:	2300      	movs	r3, #0
 8005e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e52:	f10a 0a01 	add.w	sl, sl, #1
 8005e56:	9304      	str	r3, [sp, #16]
 8005e58:	9307      	str	r3, [sp, #28]
 8005e5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e60:	4654      	mov	r4, sl
 8005e62:	2205      	movs	r2, #5
 8005e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e68:	484e      	ldr	r0, [pc, #312]	@ (8005fa4 <_svfiprintf_r+0x1e4>)
 8005e6a:	f000 fa51 	bl	8006310 <memchr>
 8005e6e:	9a04      	ldr	r2, [sp, #16]
 8005e70:	b9d8      	cbnz	r0, 8005eaa <_svfiprintf_r+0xea>
 8005e72:	06d0      	lsls	r0, r2, #27
 8005e74:	bf44      	itt	mi
 8005e76:	2320      	movmi	r3, #32
 8005e78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e7c:	0711      	lsls	r1, r2, #28
 8005e7e:	bf44      	itt	mi
 8005e80:	232b      	movmi	r3, #43	@ 0x2b
 8005e82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e86:	f89a 3000 	ldrb.w	r3, [sl]
 8005e8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e8c:	d015      	beq.n	8005eba <_svfiprintf_r+0xfa>
 8005e8e:	4654      	mov	r4, sl
 8005e90:	2000      	movs	r0, #0
 8005e92:	f04f 0c0a 	mov.w	ip, #10
 8005e96:	9a07      	ldr	r2, [sp, #28]
 8005e98:	4621      	mov	r1, r4
 8005e9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e9e:	3b30      	subs	r3, #48	@ 0x30
 8005ea0:	2b09      	cmp	r3, #9
 8005ea2:	d94b      	bls.n	8005f3c <_svfiprintf_r+0x17c>
 8005ea4:	b1b0      	cbz	r0, 8005ed4 <_svfiprintf_r+0x114>
 8005ea6:	9207      	str	r2, [sp, #28]
 8005ea8:	e014      	b.n	8005ed4 <_svfiprintf_r+0x114>
 8005eaa:	eba0 0308 	sub.w	r3, r0, r8
 8005eae:	fa09 f303 	lsl.w	r3, r9, r3
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	46a2      	mov	sl, r4
 8005eb6:	9304      	str	r3, [sp, #16]
 8005eb8:	e7d2      	b.n	8005e60 <_svfiprintf_r+0xa0>
 8005eba:	9b03      	ldr	r3, [sp, #12]
 8005ebc:	1d19      	adds	r1, r3, #4
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	9103      	str	r1, [sp, #12]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	bfbb      	ittet	lt
 8005ec6:	425b      	neglt	r3, r3
 8005ec8:	f042 0202 	orrlt.w	r2, r2, #2
 8005ecc:	9307      	strge	r3, [sp, #28]
 8005ece:	9307      	strlt	r3, [sp, #28]
 8005ed0:	bfb8      	it	lt
 8005ed2:	9204      	strlt	r2, [sp, #16]
 8005ed4:	7823      	ldrb	r3, [r4, #0]
 8005ed6:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ed8:	d10a      	bne.n	8005ef0 <_svfiprintf_r+0x130>
 8005eda:	7863      	ldrb	r3, [r4, #1]
 8005edc:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ede:	d132      	bne.n	8005f46 <_svfiprintf_r+0x186>
 8005ee0:	9b03      	ldr	r3, [sp, #12]
 8005ee2:	3402      	adds	r4, #2
 8005ee4:	1d1a      	adds	r2, r3, #4
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	9203      	str	r2, [sp, #12]
 8005eea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005eee:	9305      	str	r3, [sp, #20]
 8005ef0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005fa8 <_svfiprintf_r+0x1e8>
 8005ef4:	2203      	movs	r2, #3
 8005ef6:	4650      	mov	r0, sl
 8005ef8:	7821      	ldrb	r1, [r4, #0]
 8005efa:	f000 fa09 	bl	8006310 <memchr>
 8005efe:	b138      	cbz	r0, 8005f10 <_svfiprintf_r+0x150>
 8005f00:	2240      	movs	r2, #64	@ 0x40
 8005f02:	9b04      	ldr	r3, [sp, #16]
 8005f04:	eba0 000a 	sub.w	r0, r0, sl
 8005f08:	4082      	lsls	r2, r0
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	3401      	adds	r4, #1
 8005f0e:	9304      	str	r3, [sp, #16]
 8005f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f14:	2206      	movs	r2, #6
 8005f16:	4825      	ldr	r0, [pc, #148]	@ (8005fac <_svfiprintf_r+0x1ec>)
 8005f18:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f1c:	f000 f9f8 	bl	8006310 <memchr>
 8005f20:	2800      	cmp	r0, #0
 8005f22:	d036      	beq.n	8005f92 <_svfiprintf_r+0x1d2>
 8005f24:	4b22      	ldr	r3, [pc, #136]	@ (8005fb0 <_svfiprintf_r+0x1f0>)
 8005f26:	bb1b      	cbnz	r3, 8005f70 <_svfiprintf_r+0x1b0>
 8005f28:	9b03      	ldr	r3, [sp, #12]
 8005f2a:	3307      	adds	r3, #7
 8005f2c:	f023 0307 	bic.w	r3, r3, #7
 8005f30:	3308      	adds	r3, #8
 8005f32:	9303      	str	r3, [sp, #12]
 8005f34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f36:	4433      	add	r3, r6
 8005f38:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f3a:	e76a      	b.n	8005e12 <_svfiprintf_r+0x52>
 8005f3c:	460c      	mov	r4, r1
 8005f3e:	2001      	movs	r0, #1
 8005f40:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f44:	e7a8      	b.n	8005e98 <_svfiprintf_r+0xd8>
 8005f46:	2300      	movs	r3, #0
 8005f48:	f04f 0c0a 	mov.w	ip, #10
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	3401      	adds	r4, #1
 8005f50:	9305      	str	r3, [sp, #20]
 8005f52:	4620      	mov	r0, r4
 8005f54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f58:	3a30      	subs	r2, #48	@ 0x30
 8005f5a:	2a09      	cmp	r2, #9
 8005f5c:	d903      	bls.n	8005f66 <_svfiprintf_r+0x1a6>
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d0c6      	beq.n	8005ef0 <_svfiprintf_r+0x130>
 8005f62:	9105      	str	r1, [sp, #20]
 8005f64:	e7c4      	b.n	8005ef0 <_svfiprintf_r+0x130>
 8005f66:	4604      	mov	r4, r0
 8005f68:	2301      	movs	r3, #1
 8005f6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f6e:	e7f0      	b.n	8005f52 <_svfiprintf_r+0x192>
 8005f70:	ab03      	add	r3, sp, #12
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	462a      	mov	r2, r5
 8005f76:	4638      	mov	r0, r7
 8005f78:	4b0e      	ldr	r3, [pc, #56]	@ (8005fb4 <_svfiprintf_r+0x1f4>)
 8005f7a:	a904      	add	r1, sp, #16
 8005f7c:	f3af 8000 	nop.w
 8005f80:	1c42      	adds	r2, r0, #1
 8005f82:	4606      	mov	r6, r0
 8005f84:	d1d6      	bne.n	8005f34 <_svfiprintf_r+0x174>
 8005f86:	89ab      	ldrh	r3, [r5, #12]
 8005f88:	065b      	lsls	r3, r3, #25
 8005f8a:	f53f af2d 	bmi.w	8005de8 <_svfiprintf_r+0x28>
 8005f8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f90:	e72c      	b.n	8005dec <_svfiprintf_r+0x2c>
 8005f92:	ab03      	add	r3, sp, #12
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	462a      	mov	r2, r5
 8005f98:	4638      	mov	r0, r7
 8005f9a:	4b06      	ldr	r3, [pc, #24]	@ (8005fb4 <_svfiprintf_r+0x1f4>)
 8005f9c:	a904      	add	r1, sp, #16
 8005f9e:	f000 f87d 	bl	800609c <_printf_i>
 8005fa2:	e7ed      	b.n	8005f80 <_svfiprintf_r+0x1c0>
 8005fa4:	0800691c 	.word	0x0800691c
 8005fa8:	08006922 	.word	0x08006922
 8005fac:	08006926 	.word	0x08006926
 8005fb0:	00000000 	.word	0x00000000
 8005fb4:	08005d09 	.word	0x08005d09

08005fb8 <_printf_common>:
 8005fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fbc:	4616      	mov	r6, r2
 8005fbe:	4698      	mov	r8, r3
 8005fc0:	688a      	ldr	r2, [r1, #8]
 8005fc2:	690b      	ldr	r3, [r1, #16]
 8005fc4:	4607      	mov	r7, r0
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	bfb8      	it	lt
 8005fca:	4613      	movlt	r3, r2
 8005fcc:	6033      	str	r3, [r6, #0]
 8005fce:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005fd2:	460c      	mov	r4, r1
 8005fd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fd8:	b10a      	cbz	r2, 8005fde <_printf_common+0x26>
 8005fda:	3301      	adds	r3, #1
 8005fdc:	6033      	str	r3, [r6, #0]
 8005fde:	6823      	ldr	r3, [r4, #0]
 8005fe0:	0699      	lsls	r1, r3, #26
 8005fe2:	bf42      	ittt	mi
 8005fe4:	6833      	ldrmi	r3, [r6, #0]
 8005fe6:	3302      	addmi	r3, #2
 8005fe8:	6033      	strmi	r3, [r6, #0]
 8005fea:	6825      	ldr	r5, [r4, #0]
 8005fec:	f015 0506 	ands.w	r5, r5, #6
 8005ff0:	d106      	bne.n	8006000 <_printf_common+0x48>
 8005ff2:	f104 0a19 	add.w	sl, r4, #25
 8005ff6:	68e3      	ldr	r3, [r4, #12]
 8005ff8:	6832      	ldr	r2, [r6, #0]
 8005ffa:	1a9b      	subs	r3, r3, r2
 8005ffc:	42ab      	cmp	r3, r5
 8005ffe:	dc2b      	bgt.n	8006058 <_printf_common+0xa0>
 8006000:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006004:	6822      	ldr	r2, [r4, #0]
 8006006:	3b00      	subs	r3, #0
 8006008:	bf18      	it	ne
 800600a:	2301      	movne	r3, #1
 800600c:	0692      	lsls	r2, r2, #26
 800600e:	d430      	bmi.n	8006072 <_printf_common+0xba>
 8006010:	4641      	mov	r1, r8
 8006012:	4638      	mov	r0, r7
 8006014:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006018:	47c8      	blx	r9
 800601a:	3001      	adds	r0, #1
 800601c:	d023      	beq.n	8006066 <_printf_common+0xae>
 800601e:	6823      	ldr	r3, [r4, #0]
 8006020:	6922      	ldr	r2, [r4, #16]
 8006022:	f003 0306 	and.w	r3, r3, #6
 8006026:	2b04      	cmp	r3, #4
 8006028:	bf14      	ite	ne
 800602a:	2500      	movne	r5, #0
 800602c:	6833      	ldreq	r3, [r6, #0]
 800602e:	f04f 0600 	mov.w	r6, #0
 8006032:	bf08      	it	eq
 8006034:	68e5      	ldreq	r5, [r4, #12]
 8006036:	f104 041a 	add.w	r4, r4, #26
 800603a:	bf08      	it	eq
 800603c:	1aed      	subeq	r5, r5, r3
 800603e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006042:	bf08      	it	eq
 8006044:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006048:	4293      	cmp	r3, r2
 800604a:	bfc4      	itt	gt
 800604c:	1a9b      	subgt	r3, r3, r2
 800604e:	18ed      	addgt	r5, r5, r3
 8006050:	42b5      	cmp	r5, r6
 8006052:	d11a      	bne.n	800608a <_printf_common+0xd2>
 8006054:	2000      	movs	r0, #0
 8006056:	e008      	b.n	800606a <_printf_common+0xb2>
 8006058:	2301      	movs	r3, #1
 800605a:	4652      	mov	r2, sl
 800605c:	4641      	mov	r1, r8
 800605e:	4638      	mov	r0, r7
 8006060:	47c8      	blx	r9
 8006062:	3001      	adds	r0, #1
 8006064:	d103      	bne.n	800606e <_printf_common+0xb6>
 8006066:	f04f 30ff 	mov.w	r0, #4294967295
 800606a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800606e:	3501      	adds	r5, #1
 8006070:	e7c1      	b.n	8005ff6 <_printf_common+0x3e>
 8006072:	2030      	movs	r0, #48	@ 0x30
 8006074:	18e1      	adds	r1, r4, r3
 8006076:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800607a:	1c5a      	adds	r2, r3, #1
 800607c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006080:	4422      	add	r2, r4
 8006082:	3302      	adds	r3, #2
 8006084:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006088:	e7c2      	b.n	8006010 <_printf_common+0x58>
 800608a:	2301      	movs	r3, #1
 800608c:	4622      	mov	r2, r4
 800608e:	4641      	mov	r1, r8
 8006090:	4638      	mov	r0, r7
 8006092:	47c8      	blx	r9
 8006094:	3001      	adds	r0, #1
 8006096:	d0e6      	beq.n	8006066 <_printf_common+0xae>
 8006098:	3601      	adds	r6, #1
 800609a:	e7d9      	b.n	8006050 <_printf_common+0x98>

0800609c <_printf_i>:
 800609c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060a0:	7e0f      	ldrb	r7, [r1, #24]
 80060a2:	4691      	mov	r9, r2
 80060a4:	2f78      	cmp	r7, #120	@ 0x78
 80060a6:	4680      	mov	r8, r0
 80060a8:	460c      	mov	r4, r1
 80060aa:	469a      	mov	sl, r3
 80060ac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80060ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060b2:	d807      	bhi.n	80060c4 <_printf_i+0x28>
 80060b4:	2f62      	cmp	r7, #98	@ 0x62
 80060b6:	d80a      	bhi.n	80060ce <_printf_i+0x32>
 80060b8:	2f00      	cmp	r7, #0
 80060ba:	f000 80d3 	beq.w	8006264 <_printf_i+0x1c8>
 80060be:	2f58      	cmp	r7, #88	@ 0x58
 80060c0:	f000 80ba 	beq.w	8006238 <_printf_i+0x19c>
 80060c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060cc:	e03a      	b.n	8006144 <_printf_i+0xa8>
 80060ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060d2:	2b15      	cmp	r3, #21
 80060d4:	d8f6      	bhi.n	80060c4 <_printf_i+0x28>
 80060d6:	a101      	add	r1, pc, #4	@ (adr r1, 80060dc <_printf_i+0x40>)
 80060d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060dc:	08006135 	.word	0x08006135
 80060e0:	08006149 	.word	0x08006149
 80060e4:	080060c5 	.word	0x080060c5
 80060e8:	080060c5 	.word	0x080060c5
 80060ec:	080060c5 	.word	0x080060c5
 80060f0:	080060c5 	.word	0x080060c5
 80060f4:	08006149 	.word	0x08006149
 80060f8:	080060c5 	.word	0x080060c5
 80060fc:	080060c5 	.word	0x080060c5
 8006100:	080060c5 	.word	0x080060c5
 8006104:	080060c5 	.word	0x080060c5
 8006108:	0800624b 	.word	0x0800624b
 800610c:	08006173 	.word	0x08006173
 8006110:	08006205 	.word	0x08006205
 8006114:	080060c5 	.word	0x080060c5
 8006118:	080060c5 	.word	0x080060c5
 800611c:	0800626d 	.word	0x0800626d
 8006120:	080060c5 	.word	0x080060c5
 8006124:	08006173 	.word	0x08006173
 8006128:	080060c5 	.word	0x080060c5
 800612c:	080060c5 	.word	0x080060c5
 8006130:	0800620d 	.word	0x0800620d
 8006134:	6833      	ldr	r3, [r6, #0]
 8006136:	1d1a      	adds	r2, r3, #4
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	6032      	str	r2, [r6, #0]
 800613c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006140:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006144:	2301      	movs	r3, #1
 8006146:	e09e      	b.n	8006286 <_printf_i+0x1ea>
 8006148:	6833      	ldr	r3, [r6, #0]
 800614a:	6820      	ldr	r0, [r4, #0]
 800614c:	1d19      	adds	r1, r3, #4
 800614e:	6031      	str	r1, [r6, #0]
 8006150:	0606      	lsls	r6, r0, #24
 8006152:	d501      	bpl.n	8006158 <_printf_i+0xbc>
 8006154:	681d      	ldr	r5, [r3, #0]
 8006156:	e003      	b.n	8006160 <_printf_i+0xc4>
 8006158:	0645      	lsls	r5, r0, #25
 800615a:	d5fb      	bpl.n	8006154 <_printf_i+0xb8>
 800615c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006160:	2d00      	cmp	r5, #0
 8006162:	da03      	bge.n	800616c <_printf_i+0xd0>
 8006164:	232d      	movs	r3, #45	@ 0x2d
 8006166:	426d      	negs	r5, r5
 8006168:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800616c:	230a      	movs	r3, #10
 800616e:	4859      	ldr	r0, [pc, #356]	@ (80062d4 <_printf_i+0x238>)
 8006170:	e011      	b.n	8006196 <_printf_i+0xfa>
 8006172:	6821      	ldr	r1, [r4, #0]
 8006174:	6833      	ldr	r3, [r6, #0]
 8006176:	0608      	lsls	r0, r1, #24
 8006178:	f853 5b04 	ldr.w	r5, [r3], #4
 800617c:	d402      	bmi.n	8006184 <_printf_i+0xe8>
 800617e:	0649      	lsls	r1, r1, #25
 8006180:	bf48      	it	mi
 8006182:	b2ad      	uxthmi	r5, r5
 8006184:	2f6f      	cmp	r7, #111	@ 0x6f
 8006186:	6033      	str	r3, [r6, #0]
 8006188:	bf14      	ite	ne
 800618a:	230a      	movne	r3, #10
 800618c:	2308      	moveq	r3, #8
 800618e:	4851      	ldr	r0, [pc, #324]	@ (80062d4 <_printf_i+0x238>)
 8006190:	2100      	movs	r1, #0
 8006192:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006196:	6866      	ldr	r6, [r4, #4]
 8006198:	2e00      	cmp	r6, #0
 800619a:	bfa8      	it	ge
 800619c:	6821      	ldrge	r1, [r4, #0]
 800619e:	60a6      	str	r6, [r4, #8]
 80061a0:	bfa4      	itt	ge
 80061a2:	f021 0104 	bicge.w	r1, r1, #4
 80061a6:	6021      	strge	r1, [r4, #0]
 80061a8:	b90d      	cbnz	r5, 80061ae <_printf_i+0x112>
 80061aa:	2e00      	cmp	r6, #0
 80061ac:	d04b      	beq.n	8006246 <_printf_i+0x1aa>
 80061ae:	4616      	mov	r6, r2
 80061b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80061b4:	fb03 5711 	mls	r7, r3, r1, r5
 80061b8:	5dc7      	ldrb	r7, [r0, r7]
 80061ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061be:	462f      	mov	r7, r5
 80061c0:	42bb      	cmp	r3, r7
 80061c2:	460d      	mov	r5, r1
 80061c4:	d9f4      	bls.n	80061b0 <_printf_i+0x114>
 80061c6:	2b08      	cmp	r3, #8
 80061c8:	d10b      	bne.n	80061e2 <_printf_i+0x146>
 80061ca:	6823      	ldr	r3, [r4, #0]
 80061cc:	07df      	lsls	r7, r3, #31
 80061ce:	d508      	bpl.n	80061e2 <_printf_i+0x146>
 80061d0:	6923      	ldr	r3, [r4, #16]
 80061d2:	6861      	ldr	r1, [r4, #4]
 80061d4:	4299      	cmp	r1, r3
 80061d6:	bfde      	ittt	le
 80061d8:	2330      	movle	r3, #48	@ 0x30
 80061da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061e2:	1b92      	subs	r2, r2, r6
 80061e4:	6122      	str	r2, [r4, #16]
 80061e6:	464b      	mov	r3, r9
 80061e8:	4621      	mov	r1, r4
 80061ea:	4640      	mov	r0, r8
 80061ec:	f8cd a000 	str.w	sl, [sp]
 80061f0:	aa03      	add	r2, sp, #12
 80061f2:	f7ff fee1 	bl	8005fb8 <_printf_common>
 80061f6:	3001      	adds	r0, #1
 80061f8:	d14a      	bne.n	8006290 <_printf_i+0x1f4>
 80061fa:	f04f 30ff 	mov.w	r0, #4294967295
 80061fe:	b004      	add	sp, #16
 8006200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006204:	6823      	ldr	r3, [r4, #0]
 8006206:	f043 0320 	orr.w	r3, r3, #32
 800620a:	6023      	str	r3, [r4, #0]
 800620c:	2778      	movs	r7, #120	@ 0x78
 800620e:	4832      	ldr	r0, [pc, #200]	@ (80062d8 <_printf_i+0x23c>)
 8006210:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006214:	6823      	ldr	r3, [r4, #0]
 8006216:	6831      	ldr	r1, [r6, #0]
 8006218:	061f      	lsls	r7, r3, #24
 800621a:	f851 5b04 	ldr.w	r5, [r1], #4
 800621e:	d402      	bmi.n	8006226 <_printf_i+0x18a>
 8006220:	065f      	lsls	r7, r3, #25
 8006222:	bf48      	it	mi
 8006224:	b2ad      	uxthmi	r5, r5
 8006226:	6031      	str	r1, [r6, #0]
 8006228:	07d9      	lsls	r1, r3, #31
 800622a:	bf44      	itt	mi
 800622c:	f043 0320 	orrmi.w	r3, r3, #32
 8006230:	6023      	strmi	r3, [r4, #0]
 8006232:	b11d      	cbz	r5, 800623c <_printf_i+0x1a0>
 8006234:	2310      	movs	r3, #16
 8006236:	e7ab      	b.n	8006190 <_printf_i+0xf4>
 8006238:	4826      	ldr	r0, [pc, #152]	@ (80062d4 <_printf_i+0x238>)
 800623a:	e7e9      	b.n	8006210 <_printf_i+0x174>
 800623c:	6823      	ldr	r3, [r4, #0]
 800623e:	f023 0320 	bic.w	r3, r3, #32
 8006242:	6023      	str	r3, [r4, #0]
 8006244:	e7f6      	b.n	8006234 <_printf_i+0x198>
 8006246:	4616      	mov	r6, r2
 8006248:	e7bd      	b.n	80061c6 <_printf_i+0x12a>
 800624a:	6833      	ldr	r3, [r6, #0]
 800624c:	6825      	ldr	r5, [r4, #0]
 800624e:	1d18      	adds	r0, r3, #4
 8006250:	6961      	ldr	r1, [r4, #20]
 8006252:	6030      	str	r0, [r6, #0]
 8006254:	062e      	lsls	r6, r5, #24
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	d501      	bpl.n	800625e <_printf_i+0x1c2>
 800625a:	6019      	str	r1, [r3, #0]
 800625c:	e002      	b.n	8006264 <_printf_i+0x1c8>
 800625e:	0668      	lsls	r0, r5, #25
 8006260:	d5fb      	bpl.n	800625a <_printf_i+0x1be>
 8006262:	8019      	strh	r1, [r3, #0]
 8006264:	2300      	movs	r3, #0
 8006266:	4616      	mov	r6, r2
 8006268:	6123      	str	r3, [r4, #16]
 800626a:	e7bc      	b.n	80061e6 <_printf_i+0x14a>
 800626c:	6833      	ldr	r3, [r6, #0]
 800626e:	2100      	movs	r1, #0
 8006270:	1d1a      	adds	r2, r3, #4
 8006272:	6032      	str	r2, [r6, #0]
 8006274:	681e      	ldr	r6, [r3, #0]
 8006276:	6862      	ldr	r2, [r4, #4]
 8006278:	4630      	mov	r0, r6
 800627a:	f000 f849 	bl	8006310 <memchr>
 800627e:	b108      	cbz	r0, 8006284 <_printf_i+0x1e8>
 8006280:	1b80      	subs	r0, r0, r6
 8006282:	6060      	str	r0, [r4, #4]
 8006284:	6863      	ldr	r3, [r4, #4]
 8006286:	6123      	str	r3, [r4, #16]
 8006288:	2300      	movs	r3, #0
 800628a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800628e:	e7aa      	b.n	80061e6 <_printf_i+0x14a>
 8006290:	4632      	mov	r2, r6
 8006292:	4649      	mov	r1, r9
 8006294:	4640      	mov	r0, r8
 8006296:	6923      	ldr	r3, [r4, #16]
 8006298:	47d0      	blx	sl
 800629a:	3001      	adds	r0, #1
 800629c:	d0ad      	beq.n	80061fa <_printf_i+0x15e>
 800629e:	6823      	ldr	r3, [r4, #0]
 80062a0:	079b      	lsls	r3, r3, #30
 80062a2:	d413      	bmi.n	80062cc <_printf_i+0x230>
 80062a4:	68e0      	ldr	r0, [r4, #12]
 80062a6:	9b03      	ldr	r3, [sp, #12]
 80062a8:	4298      	cmp	r0, r3
 80062aa:	bfb8      	it	lt
 80062ac:	4618      	movlt	r0, r3
 80062ae:	e7a6      	b.n	80061fe <_printf_i+0x162>
 80062b0:	2301      	movs	r3, #1
 80062b2:	4632      	mov	r2, r6
 80062b4:	4649      	mov	r1, r9
 80062b6:	4640      	mov	r0, r8
 80062b8:	47d0      	blx	sl
 80062ba:	3001      	adds	r0, #1
 80062bc:	d09d      	beq.n	80061fa <_printf_i+0x15e>
 80062be:	3501      	adds	r5, #1
 80062c0:	68e3      	ldr	r3, [r4, #12]
 80062c2:	9903      	ldr	r1, [sp, #12]
 80062c4:	1a5b      	subs	r3, r3, r1
 80062c6:	42ab      	cmp	r3, r5
 80062c8:	dcf2      	bgt.n	80062b0 <_printf_i+0x214>
 80062ca:	e7eb      	b.n	80062a4 <_printf_i+0x208>
 80062cc:	2500      	movs	r5, #0
 80062ce:	f104 0619 	add.w	r6, r4, #25
 80062d2:	e7f5      	b.n	80062c0 <_printf_i+0x224>
 80062d4:	0800692d 	.word	0x0800692d
 80062d8:	0800693e 	.word	0x0800693e

080062dc <memmove>:
 80062dc:	4288      	cmp	r0, r1
 80062de:	b510      	push	{r4, lr}
 80062e0:	eb01 0402 	add.w	r4, r1, r2
 80062e4:	d902      	bls.n	80062ec <memmove+0x10>
 80062e6:	4284      	cmp	r4, r0
 80062e8:	4623      	mov	r3, r4
 80062ea:	d807      	bhi.n	80062fc <memmove+0x20>
 80062ec:	1e43      	subs	r3, r0, #1
 80062ee:	42a1      	cmp	r1, r4
 80062f0:	d008      	beq.n	8006304 <memmove+0x28>
 80062f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80062fa:	e7f8      	b.n	80062ee <memmove+0x12>
 80062fc:	4601      	mov	r1, r0
 80062fe:	4402      	add	r2, r0
 8006300:	428a      	cmp	r2, r1
 8006302:	d100      	bne.n	8006306 <memmove+0x2a>
 8006304:	bd10      	pop	{r4, pc}
 8006306:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800630a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800630e:	e7f7      	b.n	8006300 <memmove+0x24>

08006310 <memchr>:
 8006310:	4603      	mov	r3, r0
 8006312:	b510      	push	{r4, lr}
 8006314:	b2c9      	uxtb	r1, r1
 8006316:	4402      	add	r2, r0
 8006318:	4293      	cmp	r3, r2
 800631a:	4618      	mov	r0, r3
 800631c:	d101      	bne.n	8006322 <memchr+0x12>
 800631e:	2000      	movs	r0, #0
 8006320:	e003      	b.n	800632a <memchr+0x1a>
 8006322:	7804      	ldrb	r4, [r0, #0]
 8006324:	3301      	adds	r3, #1
 8006326:	428c      	cmp	r4, r1
 8006328:	d1f6      	bne.n	8006318 <memchr+0x8>
 800632a:	bd10      	pop	{r4, pc}

0800632c <_realloc_r>:
 800632c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006330:	4680      	mov	r8, r0
 8006332:	4615      	mov	r5, r2
 8006334:	460c      	mov	r4, r1
 8006336:	b921      	cbnz	r1, 8006342 <_realloc_r+0x16>
 8006338:	4611      	mov	r1, r2
 800633a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800633e:	f7ff bb4d 	b.w	80059dc <_malloc_r>
 8006342:	b92a      	cbnz	r2, 8006350 <_realloc_r+0x24>
 8006344:	f7ff fc98 	bl	8005c78 <_free_r>
 8006348:	2400      	movs	r4, #0
 800634a:	4620      	mov	r0, r4
 800634c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006350:	f000 f81a 	bl	8006388 <_malloc_usable_size_r>
 8006354:	4285      	cmp	r5, r0
 8006356:	4606      	mov	r6, r0
 8006358:	d802      	bhi.n	8006360 <_realloc_r+0x34>
 800635a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800635e:	d8f4      	bhi.n	800634a <_realloc_r+0x1e>
 8006360:	4629      	mov	r1, r5
 8006362:	4640      	mov	r0, r8
 8006364:	f7ff fb3a 	bl	80059dc <_malloc_r>
 8006368:	4607      	mov	r7, r0
 800636a:	2800      	cmp	r0, #0
 800636c:	d0ec      	beq.n	8006348 <_realloc_r+0x1c>
 800636e:	42b5      	cmp	r5, r6
 8006370:	462a      	mov	r2, r5
 8006372:	4621      	mov	r1, r4
 8006374:	bf28      	it	cs
 8006376:	4632      	movcs	r2, r6
 8006378:	f7ff fc70 	bl	8005c5c <memcpy>
 800637c:	4621      	mov	r1, r4
 800637e:	4640      	mov	r0, r8
 8006380:	f7ff fc7a 	bl	8005c78 <_free_r>
 8006384:	463c      	mov	r4, r7
 8006386:	e7e0      	b.n	800634a <_realloc_r+0x1e>

08006388 <_malloc_usable_size_r>:
 8006388:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800638c:	1f18      	subs	r0, r3, #4
 800638e:	2b00      	cmp	r3, #0
 8006390:	bfbc      	itt	lt
 8006392:	580b      	ldrlt	r3, [r1, r0]
 8006394:	18c0      	addlt	r0, r0, r3
 8006396:	4770      	bx	lr

08006398 <_getpid>:
 8006398:	2258      	movs	r2, #88	@ 0x58
 800639a:	4b02      	ldr	r3, [pc, #8]	@ (80063a4 <_getpid+0xc>)
 800639c:	f04f 30ff 	mov.w	r0, #4294967295
 80063a0:	601a      	str	r2, [r3, #0]
 80063a2:	4770      	bx	lr
 80063a4:	200005f8 	.word	0x200005f8

080063a8 <_kill>:
 80063a8:	2258      	movs	r2, #88	@ 0x58
 80063aa:	4b02      	ldr	r3, [pc, #8]	@ (80063b4 <_kill+0xc>)
 80063ac:	f04f 30ff 	mov.w	r0, #4294967295
 80063b0:	601a      	str	r2, [r3, #0]
 80063b2:	4770      	bx	lr
 80063b4:	200005f8 	.word	0x200005f8

080063b8 <_sbrk>:
 80063b8:	4a04      	ldr	r2, [pc, #16]	@ (80063cc <_sbrk+0x14>)
 80063ba:	4603      	mov	r3, r0
 80063bc:	6811      	ldr	r1, [r2, #0]
 80063be:	b909      	cbnz	r1, 80063c4 <_sbrk+0xc>
 80063c0:	4903      	ldr	r1, [pc, #12]	@ (80063d0 <_sbrk+0x18>)
 80063c2:	6011      	str	r1, [r2, #0]
 80063c4:	6810      	ldr	r0, [r2, #0]
 80063c6:	4403      	add	r3, r0
 80063c8:	6013      	str	r3, [r2, #0]
 80063ca:	4770      	bx	lr
 80063cc:	20000600 	.word	0x20000600
 80063d0:	20000608 	.word	0x20000608

080063d4 <_exit>:
 80063d4:	e7fe      	b.n	80063d4 <_exit>
	...

080063d8 <_init>:
 80063d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063da:	bf00      	nop
 80063dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063de:	bc08      	pop	{r3}
 80063e0:	469e      	mov	lr, r3
 80063e2:	4770      	bx	lr

080063e4 <_fini>:
 80063e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e6:	bf00      	nop
 80063e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ea:	bc08      	pop	{r3}
 80063ec:	469e      	mov	lr, r3
 80063ee:	4770      	bx	lr
